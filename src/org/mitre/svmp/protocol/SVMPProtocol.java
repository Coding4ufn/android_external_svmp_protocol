// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: svmp.proto

package org.mitre.svmp.protocol;

public final class SVMPProtocol {
  private SVMPProtocol() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }
  public enum SensorType
      implements com.google.protobuf.Internal.EnumLite {
    ACCELEROMETER(0, 1),
    MAGNETIC_FIELD(1, 2),
    ORIENTATION(2, 3),
    GYROSCOPE(3, 4),
    LIGHT(4, 5),
    PRESSURE(5, 6),
    TEMPERATURE(6, 7),
    PROXIMITY(7, 8),
    GRAVITY(8, 9),
    LINEAR_ACCELERATION(9, 10),
    ROTATION_VECTOR(10, 11),
    RELATIVE_HUMIDITY(11, 12),
    AMBIENT_TEMPERATURE(12, 13),
    ;
    
    public static final int ACCELEROMETER_VALUE = 1;
    public static final int MAGNETIC_FIELD_VALUE = 2;
    public static final int ORIENTATION_VALUE = 3;
    public static final int GYROSCOPE_VALUE = 4;
    public static final int LIGHT_VALUE = 5;
    public static final int PRESSURE_VALUE = 6;
    public static final int TEMPERATURE_VALUE = 7;
    public static final int PROXIMITY_VALUE = 8;
    public static final int GRAVITY_VALUE = 9;
    public static final int LINEAR_ACCELERATION_VALUE = 10;
    public static final int ROTATION_VECTOR_VALUE = 11;
    public static final int RELATIVE_HUMIDITY_VALUE = 12;
    public static final int AMBIENT_TEMPERATURE_VALUE = 13;
    
    
    public final int getNumber() { return value; }
    
    public static SensorType valueOf(int value) {
      switch (value) {
        case 1: return ACCELEROMETER;
        case 2: return MAGNETIC_FIELD;
        case 3: return ORIENTATION;
        case 4: return GYROSCOPE;
        case 5: return LIGHT;
        case 6: return PRESSURE;
        case 7: return TEMPERATURE;
        case 8: return PROXIMITY;
        case 9: return GRAVITY;
        case 10: return LINEAR_ACCELERATION;
        case 11: return ROTATION_VECTOR;
        case 12: return RELATIVE_HUMIDITY;
        case 13: return AMBIENT_TEMPERATURE;
        default: return null;
      }
    }
    
    public static com.google.protobuf.Internal.EnumLiteMap<SensorType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<SensorType>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<SensorType>() {
            public SensorType findValueByNumber(int number) {
              return SensorType.valueOf(number);
            }
          };
    
    private final int value;
    
    private SensorType(int index, int value) {
      this.value = value;
    }
    
    // @@protoc_insertion_point(enum_scope:svmp.SensorType)
  }
  
  public interface RequestOrBuilder
      extends com.google.protobuf.MessageLiteOrBuilder {
    
    // required .svmp.Request.RequestType type = 1;
    boolean hasType();
    org.mitre.svmp.protocol.SVMPProtocol.Request.RequestType getType();
    
    // optional .svmp.Authentication authentication = 2;
    boolean hasAuthentication();
    org.mitre.svmp.protocol.SVMPProtocol.Authentication getAuthentication();
    
    // optional .svmp.Proxy proxy = 3;
    boolean hasProxy();
    org.mitre.svmp.protocol.SVMPProtocol.Proxy getProxy();
    
    // optional .svmp.TouchEvent touch = 4;
    boolean hasTouch();
    org.mitre.svmp.protocol.SVMPProtocol.TouchEvent getTouch();
    
    // optional .svmp.SensorEvent sensor = 5;
    boolean hasSensor();
    org.mitre.svmp.protocol.SVMPProtocol.SensorEvent getSensor();
    
    // optional .svmp.LocationUpdate location = 6;
    boolean hasLocation();
    org.mitre.svmp.protocol.SVMPProtocol.LocationUpdate getLocation();
    
    // optional .svmp.Intent intent = 7;
    boolean hasIntent();
    org.mitre.svmp.protocol.SVMPProtocol.Intent getIntent();
  }
  public static final class Request extends
      com.google.protobuf.GeneratedMessageLite
      implements RequestOrBuilder {
    // Use Request.newBuilder() to construct.
    private Request(Builder builder) {
      super(builder);
    }
    private Request(boolean noInit) {}
    
    private static final Request defaultInstance;
    public static Request getDefaultInstance() {
      return defaultInstance;
    }
    
    public Request getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public enum RequestType
        implements com.google.protobuf.Internal.EnumLite {
      USERAUTH(0, 0),
      RAWINPUTPROXY(1, 1),
      TOUCHEVENT(2, 2),
      SENSOREVENT(3, 3),
      LOCATION(4, 4),
      INTENT(5, 5),
      SCREENINFO(6, 6),
      ;
      
      public static final int USERAUTH_VALUE = 0;
      public static final int RAWINPUTPROXY_VALUE = 1;
      public static final int TOUCHEVENT_VALUE = 2;
      public static final int SENSOREVENT_VALUE = 3;
      public static final int LOCATION_VALUE = 4;
      public static final int INTENT_VALUE = 5;
      public static final int SCREENINFO_VALUE = 6;
      
      
      public final int getNumber() { return value; }
      
      public static RequestType valueOf(int value) {
        switch (value) {
          case 0: return USERAUTH;
          case 1: return RAWINPUTPROXY;
          case 2: return TOUCHEVENT;
          case 3: return SENSOREVENT;
          case 4: return LOCATION;
          case 5: return INTENT;
          case 6: return SCREENINFO;
          default: return null;
        }
      }
      
      public static com.google.protobuf.Internal.EnumLiteMap<RequestType>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static com.google.protobuf.Internal.EnumLiteMap<RequestType>
          internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<RequestType>() {
              public RequestType findValueByNumber(int number) {
                return RequestType.valueOf(number);
              }
            };
      
      private final int value;
      
      private RequestType(int index, int value) {
        this.value = value;
      }
      
      // @@protoc_insertion_point(enum_scope:svmp.Request.RequestType)
    }
    
    private int bitField0_;
    // required .svmp.Request.RequestType type = 1;
    public static final int TYPE_FIELD_NUMBER = 1;
    private org.mitre.svmp.protocol.SVMPProtocol.Request.RequestType type_;
    public boolean hasType() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    public org.mitre.svmp.protocol.SVMPProtocol.Request.RequestType getType() {
      return type_;
    }
    
    // optional .svmp.Authentication authentication = 2;
    public static final int AUTHENTICATION_FIELD_NUMBER = 2;
    private org.mitre.svmp.protocol.SVMPProtocol.Authentication authentication_;
    public boolean hasAuthentication() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    public org.mitre.svmp.protocol.SVMPProtocol.Authentication getAuthentication() {
      return authentication_;
    }
    
    // optional .svmp.Proxy proxy = 3;
    public static final int PROXY_FIELD_NUMBER = 3;
    private org.mitre.svmp.protocol.SVMPProtocol.Proxy proxy_;
    public boolean hasProxy() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    public org.mitre.svmp.protocol.SVMPProtocol.Proxy getProxy() {
      return proxy_;
    }
    
    // optional .svmp.TouchEvent touch = 4;
    public static final int TOUCH_FIELD_NUMBER = 4;
    private org.mitre.svmp.protocol.SVMPProtocol.TouchEvent touch_;
    public boolean hasTouch() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    public org.mitre.svmp.protocol.SVMPProtocol.TouchEvent getTouch() {
      return touch_;
    }
    
    // optional .svmp.SensorEvent sensor = 5;
    public static final int SENSOR_FIELD_NUMBER = 5;
    private org.mitre.svmp.protocol.SVMPProtocol.SensorEvent sensor_;
    public boolean hasSensor() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    public org.mitre.svmp.protocol.SVMPProtocol.SensorEvent getSensor() {
      return sensor_;
    }
    
    // optional .svmp.LocationUpdate location = 6;
    public static final int LOCATION_FIELD_NUMBER = 6;
    private org.mitre.svmp.protocol.SVMPProtocol.LocationUpdate location_;
    public boolean hasLocation() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    public org.mitre.svmp.protocol.SVMPProtocol.LocationUpdate getLocation() {
      return location_;
    }
    
    // optional .svmp.Intent intent = 7;
    public static final int INTENT_FIELD_NUMBER = 7;
    private org.mitre.svmp.protocol.SVMPProtocol.Intent intent_;
    public boolean hasIntent() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    public org.mitre.svmp.protocol.SVMPProtocol.Intent getIntent() {
      return intent_;
    }
    
    private void initFields() {
      type_ = org.mitre.svmp.protocol.SVMPProtocol.Request.RequestType.USERAUTH;
      authentication_ = org.mitre.svmp.protocol.SVMPProtocol.Authentication.getDefaultInstance();
      proxy_ = org.mitre.svmp.protocol.SVMPProtocol.Proxy.getDefaultInstance();
      touch_ = org.mitre.svmp.protocol.SVMPProtocol.TouchEvent.getDefaultInstance();
      sensor_ = org.mitre.svmp.protocol.SVMPProtocol.SensorEvent.getDefaultInstance();
      location_ = org.mitre.svmp.protocol.SVMPProtocol.LocationUpdate.getDefaultInstance();
      intent_ = org.mitre.svmp.protocol.SVMPProtocol.Intent.getDefaultInstance();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;
      
      if (!hasType()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (hasAuthentication()) {
        if (!getAuthentication().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasProxy()) {
        if (!getProxy().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasTouch()) {
        if (!getTouch().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasSensor()) {
        if (!getSensor().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeEnum(1, type_.getNumber());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeMessage(2, authentication_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeMessage(3, proxy_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeMessage(4, touch_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeMessage(5, sensor_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeMessage(6, location_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeMessage(7, intent_);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(1, type_.getNumber());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, authentication_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, proxy_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, touch_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, sensor_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(6, location_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(7, intent_);
      }
      memoizedSerializedSize = size;
      return size;
    }
    
    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }
    
    public static org.mitre.svmp.protocol.SVMPProtocol.Request parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.Request parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.Request parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.Request parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.Request parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.Request parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.Request parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.Request parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.Request parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.Request parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.mitre.svmp.protocol.SVMPProtocol.Request prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          org.mitre.svmp.protocol.SVMPProtocol.Request, Builder>
        implements org.mitre.svmp.protocol.SVMPProtocol.RequestOrBuilder {
      // Construct using org.mitre.svmp.protocol.SVMPProtocol.Request.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }
      
      private void maybeForceBuilderInitialization() {
      }
      private static Builder create() {
        return new Builder();
      }
      
      public Builder clear() {
        super.clear();
        type_ = org.mitre.svmp.protocol.SVMPProtocol.Request.RequestType.USERAUTH;
        bitField0_ = (bitField0_ & ~0x00000001);
        authentication_ = org.mitre.svmp.protocol.SVMPProtocol.Authentication.getDefaultInstance();
        bitField0_ = (bitField0_ & ~0x00000002);
        proxy_ = org.mitre.svmp.protocol.SVMPProtocol.Proxy.getDefaultInstance();
        bitField0_ = (bitField0_ & ~0x00000004);
        touch_ = org.mitre.svmp.protocol.SVMPProtocol.TouchEvent.getDefaultInstance();
        bitField0_ = (bitField0_ & ~0x00000008);
        sensor_ = org.mitre.svmp.protocol.SVMPProtocol.SensorEvent.getDefaultInstance();
        bitField0_ = (bitField0_ & ~0x00000010);
        location_ = org.mitre.svmp.protocol.SVMPProtocol.LocationUpdate.getDefaultInstance();
        bitField0_ = (bitField0_ & ~0x00000020);
        intent_ = org.mitre.svmp.protocol.SVMPProtocol.Intent.getDefaultInstance();
        bitField0_ = (bitField0_ & ~0x00000040);
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }
      
      public org.mitre.svmp.protocol.SVMPProtocol.Request getDefaultInstanceForType() {
        return org.mitre.svmp.protocol.SVMPProtocol.Request.getDefaultInstance();
      }
      
      public org.mitre.svmp.protocol.SVMPProtocol.Request build() {
        org.mitre.svmp.protocol.SVMPProtocol.Request result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }
      
      private org.mitre.svmp.protocol.SVMPProtocol.Request buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        org.mitre.svmp.protocol.SVMPProtocol.Request result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return result;
      }
      
      public org.mitre.svmp.protocol.SVMPProtocol.Request buildPartial() {
        org.mitre.svmp.protocol.SVMPProtocol.Request result = new org.mitre.svmp.protocol.SVMPProtocol.Request(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.type_ = type_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.authentication_ = authentication_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.proxy_ = proxy_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.touch_ = touch_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.sensor_ = sensor_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        result.location_ = location_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000040;
        }
        result.intent_ = intent_;
        result.bitField0_ = to_bitField0_;
        return result;
      }
      
      public Builder mergeFrom(org.mitre.svmp.protocol.SVMPProtocol.Request other) {
        if (other == org.mitre.svmp.protocol.SVMPProtocol.Request.getDefaultInstance()) return this;
        if (other.hasType()) {
          setType(other.getType());
        }
        if (other.hasAuthentication()) {
          mergeAuthentication(other.getAuthentication());
        }
        if (other.hasProxy()) {
          mergeProxy(other.getProxy());
        }
        if (other.hasTouch()) {
          mergeTouch(other.getTouch());
        }
        if (other.hasSensor()) {
          mergeSensor(other.getSensor());
        }
        if (other.hasLocation()) {
          mergeLocation(other.getLocation());
        }
        if (other.hasIntent()) {
          mergeIntent(other.getIntent());
        }
        return this;
      }
      
      public final boolean isInitialized() {
        if (!hasType()) {
          
          return false;
        }
        if (hasAuthentication()) {
          if (!getAuthentication().isInitialized()) {
            
            return false;
          }
        }
        if (hasProxy()) {
          if (!getProxy().isInitialized()) {
            
            return false;
          }
        }
        if (hasTouch()) {
          if (!getTouch().isInitialized()) {
            
            return false;
          }
        }
        if (hasSensor()) {
          if (!getSensor().isInitialized()) {
            
            return false;
          }
        }
        return true;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              
              return this;
            default: {
              if (!parseUnknownField(input, extensionRegistry, tag)) {
                
                return this;
              }
              break;
            }
            case 8: {
              int rawValue = input.readEnum();
              org.mitre.svmp.protocol.SVMPProtocol.Request.RequestType value = org.mitre.svmp.protocol.SVMPProtocol.Request.RequestType.valueOf(rawValue);
              if (value != null) {
                bitField0_ |= 0x00000001;
                type_ = value;
              }
              break;
            }
            case 18: {
              org.mitre.svmp.protocol.SVMPProtocol.Authentication.Builder subBuilder = org.mitre.svmp.protocol.SVMPProtocol.Authentication.newBuilder();
              if (hasAuthentication()) {
                subBuilder.mergeFrom(getAuthentication());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setAuthentication(subBuilder.buildPartial());
              break;
            }
            case 26: {
              org.mitre.svmp.protocol.SVMPProtocol.Proxy.Builder subBuilder = org.mitre.svmp.protocol.SVMPProtocol.Proxy.newBuilder();
              if (hasProxy()) {
                subBuilder.mergeFrom(getProxy());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setProxy(subBuilder.buildPartial());
              break;
            }
            case 34: {
              org.mitre.svmp.protocol.SVMPProtocol.TouchEvent.Builder subBuilder = org.mitre.svmp.protocol.SVMPProtocol.TouchEvent.newBuilder();
              if (hasTouch()) {
                subBuilder.mergeFrom(getTouch());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setTouch(subBuilder.buildPartial());
              break;
            }
            case 42: {
              org.mitre.svmp.protocol.SVMPProtocol.SensorEvent.Builder subBuilder = org.mitre.svmp.protocol.SVMPProtocol.SensorEvent.newBuilder();
              if (hasSensor()) {
                subBuilder.mergeFrom(getSensor());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setSensor(subBuilder.buildPartial());
              break;
            }
            case 50: {
              org.mitre.svmp.protocol.SVMPProtocol.LocationUpdate.Builder subBuilder = org.mitre.svmp.protocol.SVMPProtocol.LocationUpdate.newBuilder();
              if (hasLocation()) {
                subBuilder.mergeFrom(getLocation());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setLocation(subBuilder.buildPartial());
              break;
            }
            case 58: {
              org.mitre.svmp.protocol.SVMPProtocol.Intent.Builder subBuilder = org.mitre.svmp.protocol.SVMPProtocol.Intent.newBuilder();
              if (hasIntent()) {
                subBuilder.mergeFrom(getIntent());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setIntent(subBuilder.buildPartial());
              break;
            }
          }
        }
      }
      
      private int bitField0_;
      
      // required .svmp.Request.RequestType type = 1;
      private org.mitre.svmp.protocol.SVMPProtocol.Request.RequestType type_ = org.mitre.svmp.protocol.SVMPProtocol.Request.RequestType.USERAUTH;
      public boolean hasType() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      public org.mitre.svmp.protocol.SVMPProtocol.Request.RequestType getType() {
        return type_;
      }
      public Builder setType(org.mitre.svmp.protocol.SVMPProtocol.Request.RequestType value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000001;
        type_ = value;
        
        return this;
      }
      public Builder clearType() {
        bitField0_ = (bitField0_ & ~0x00000001);
        type_ = org.mitre.svmp.protocol.SVMPProtocol.Request.RequestType.USERAUTH;
        
        return this;
      }
      
      // optional .svmp.Authentication authentication = 2;
      private org.mitre.svmp.protocol.SVMPProtocol.Authentication authentication_ = org.mitre.svmp.protocol.SVMPProtocol.Authentication.getDefaultInstance();
      public boolean hasAuthentication() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      public org.mitre.svmp.protocol.SVMPProtocol.Authentication getAuthentication() {
        return authentication_;
      }
      public Builder setAuthentication(org.mitre.svmp.protocol.SVMPProtocol.Authentication value) {
        if (value == null) {
          throw new NullPointerException();
        }
        authentication_ = value;
        
        bitField0_ |= 0x00000002;
        return this;
      }
      public Builder setAuthentication(
          org.mitre.svmp.protocol.SVMPProtocol.Authentication.Builder builderForValue) {
        authentication_ = builderForValue.build();
        
        bitField0_ |= 0x00000002;
        return this;
      }
      public Builder mergeAuthentication(org.mitre.svmp.protocol.SVMPProtocol.Authentication value) {
        if (((bitField0_ & 0x00000002) == 0x00000002) &&
            authentication_ != org.mitre.svmp.protocol.SVMPProtocol.Authentication.getDefaultInstance()) {
          authentication_ =
            org.mitre.svmp.protocol.SVMPProtocol.Authentication.newBuilder(authentication_).mergeFrom(value).buildPartial();
        } else {
          authentication_ = value;
        }
        
        bitField0_ |= 0x00000002;
        return this;
      }
      public Builder clearAuthentication() {
        authentication_ = org.mitre.svmp.protocol.SVMPProtocol.Authentication.getDefaultInstance();
        
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }
      
      // optional .svmp.Proxy proxy = 3;
      private org.mitre.svmp.protocol.SVMPProtocol.Proxy proxy_ = org.mitre.svmp.protocol.SVMPProtocol.Proxy.getDefaultInstance();
      public boolean hasProxy() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      public org.mitre.svmp.protocol.SVMPProtocol.Proxy getProxy() {
        return proxy_;
      }
      public Builder setProxy(org.mitre.svmp.protocol.SVMPProtocol.Proxy value) {
        if (value == null) {
          throw new NullPointerException();
        }
        proxy_ = value;
        
        bitField0_ |= 0x00000004;
        return this;
      }
      public Builder setProxy(
          org.mitre.svmp.protocol.SVMPProtocol.Proxy.Builder builderForValue) {
        proxy_ = builderForValue.build();
        
        bitField0_ |= 0x00000004;
        return this;
      }
      public Builder mergeProxy(org.mitre.svmp.protocol.SVMPProtocol.Proxy value) {
        if (((bitField0_ & 0x00000004) == 0x00000004) &&
            proxy_ != org.mitre.svmp.protocol.SVMPProtocol.Proxy.getDefaultInstance()) {
          proxy_ =
            org.mitre.svmp.protocol.SVMPProtocol.Proxy.newBuilder(proxy_).mergeFrom(value).buildPartial();
        } else {
          proxy_ = value;
        }
        
        bitField0_ |= 0x00000004;
        return this;
      }
      public Builder clearProxy() {
        proxy_ = org.mitre.svmp.protocol.SVMPProtocol.Proxy.getDefaultInstance();
        
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }
      
      // optional .svmp.TouchEvent touch = 4;
      private org.mitre.svmp.protocol.SVMPProtocol.TouchEvent touch_ = org.mitre.svmp.protocol.SVMPProtocol.TouchEvent.getDefaultInstance();
      public boolean hasTouch() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      public org.mitre.svmp.protocol.SVMPProtocol.TouchEvent getTouch() {
        return touch_;
      }
      public Builder setTouch(org.mitre.svmp.protocol.SVMPProtocol.TouchEvent value) {
        if (value == null) {
          throw new NullPointerException();
        }
        touch_ = value;
        
        bitField0_ |= 0x00000008;
        return this;
      }
      public Builder setTouch(
          org.mitre.svmp.protocol.SVMPProtocol.TouchEvent.Builder builderForValue) {
        touch_ = builderForValue.build();
        
        bitField0_ |= 0x00000008;
        return this;
      }
      public Builder mergeTouch(org.mitre.svmp.protocol.SVMPProtocol.TouchEvent value) {
        if (((bitField0_ & 0x00000008) == 0x00000008) &&
            touch_ != org.mitre.svmp.protocol.SVMPProtocol.TouchEvent.getDefaultInstance()) {
          touch_ =
            org.mitre.svmp.protocol.SVMPProtocol.TouchEvent.newBuilder(touch_).mergeFrom(value).buildPartial();
        } else {
          touch_ = value;
        }
        
        bitField0_ |= 0x00000008;
        return this;
      }
      public Builder clearTouch() {
        touch_ = org.mitre.svmp.protocol.SVMPProtocol.TouchEvent.getDefaultInstance();
        
        bitField0_ = (bitField0_ & ~0x00000008);
        return this;
      }
      
      // optional .svmp.SensorEvent sensor = 5;
      private org.mitre.svmp.protocol.SVMPProtocol.SensorEvent sensor_ = org.mitre.svmp.protocol.SVMPProtocol.SensorEvent.getDefaultInstance();
      public boolean hasSensor() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      public org.mitre.svmp.protocol.SVMPProtocol.SensorEvent getSensor() {
        return sensor_;
      }
      public Builder setSensor(org.mitre.svmp.protocol.SVMPProtocol.SensorEvent value) {
        if (value == null) {
          throw new NullPointerException();
        }
        sensor_ = value;
        
        bitField0_ |= 0x00000010;
        return this;
      }
      public Builder setSensor(
          org.mitre.svmp.protocol.SVMPProtocol.SensorEvent.Builder builderForValue) {
        sensor_ = builderForValue.build();
        
        bitField0_ |= 0x00000010;
        return this;
      }
      public Builder mergeSensor(org.mitre.svmp.protocol.SVMPProtocol.SensorEvent value) {
        if (((bitField0_ & 0x00000010) == 0x00000010) &&
            sensor_ != org.mitre.svmp.protocol.SVMPProtocol.SensorEvent.getDefaultInstance()) {
          sensor_ =
            org.mitre.svmp.protocol.SVMPProtocol.SensorEvent.newBuilder(sensor_).mergeFrom(value).buildPartial();
        } else {
          sensor_ = value;
        }
        
        bitField0_ |= 0x00000010;
        return this;
      }
      public Builder clearSensor() {
        sensor_ = org.mitre.svmp.protocol.SVMPProtocol.SensorEvent.getDefaultInstance();
        
        bitField0_ = (bitField0_ & ~0x00000010);
        return this;
      }
      
      // optional .svmp.LocationUpdate location = 6;
      private org.mitre.svmp.protocol.SVMPProtocol.LocationUpdate location_ = org.mitre.svmp.protocol.SVMPProtocol.LocationUpdate.getDefaultInstance();
      public boolean hasLocation() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      public org.mitre.svmp.protocol.SVMPProtocol.LocationUpdate getLocation() {
        return location_;
      }
      public Builder setLocation(org.mitre.svmp.protocol.SVMPProtocol.LocationUpdate value) {
        if (value == null) {
          throw new NullPointerException();
        }
        location_ = value;
        
        bitField0_ |= 0x00000020;
        return this;
      }
      public Builder setLocation(
          org.mitre.svmp.protocol.SVMPProtocol.LocationUpdate.Builder builderForValue) {
        location_ = builderForValue.build();
        
        bitField0_ |= 0x00000020;
        return this;
      }
      public Builder mergeLocation(org.mitre.svmp.protocol.SVMPProtocol.LocationUpdate value) {
        if (((bitField0_ & 0x00000020) == 0x00000020) &&
            location_ != org.mitre.svmp.protocol.SVMPProtocol.LocationUpdate.getDefaultInstance()) {
          location_ =
            org.mitre.svmp.protocol.SVMPProtocol.LocationUpdate.newBuilder(location_).mergeFrom(value).buildPartial();
        } else {
          location_ = value;
        }
        
        bitField0_ |= 0x00000020;
        return this;
      }
      public Builder clearLocation() {
        location_ = org.mitre.svmp.protocol.SVMPProtocol.LocationUpdate.getDefaultInstance();
        
        bitField0_ = (bitField0_ & ~0x00000020);
        return this;
      }
      
      // optional .svmp.Intent intent = 7;
      private org.mitre.svmp.protocol.SVMPProtocol.Intent intent_ = org.mitre.svmp.protocol.SVMPProtocol.Intent.getDefaultInstance();
      public boolean hasIntent() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      public org.mitre.svmp.protocol.SVMPProtocol.Intent getIntent() {
        return intent_;
      }
      public Builder setIntent(org.mitre.svmp.protocol.SVMPProtocol.Intent value) {
        if (value == null) {
          throw new NullPointerException();
        }
        intent_ = value;
        
        bitField0_ |= 0x00000040;
        return this;
      }
      public Builder setIntent(
          org.mitre.svmp.protocol.SVMPProtocol.Intent.Builder builderForValue) {
        intent_ = builderForValue.build();
        
        bitField0_ |= 0x00000040;
        return this;
      }
      public Builder mergeIntent(org.mitre.svmp.protocol.SVMPProtocol.Intent value) {
        if (((bitField0_ & 0x00000040) == 0x00000040) &&
            intent_ != org.mitre.svmp.protocol.SVMPProtocol.Intent.getDefaultInstance()) {
          intent_ =
            org.mitre.svmp.protocol.SVMPProtocol.Intent.newBuilder(intent_).mergeFrom(value).buildPartial();
        } else {
          intent_ = value;
        }
        
        bitField0_ |= 0x00000040;
        return this;
      }
      public Builder clearIntent() {
        intent_ = org.mitre.svmp.protocol.SVMPProtocol.Intent.getDefaultInstance();
        
        bitField0_ = (bitField0_ & ~0x00000040);
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:svmp.Request)
    }
    
    static {
      defaultInstance = new Request(true);
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:svmp.Request)
  }
  
  public interface ResponseOrBuilder
      extends com.google.protobuf.MessageLiteOrBuilder {
    
    // required .svmp.Response.ResponseType type = 1;
    boolean hasType();
    org.mitre.svmp.protocol.SVMPProtocol.Response.ResponseType getType();
    
    // optional string message = 2;
    boolean hasMessage();
    String getMessage();
    
    // optional .svmp.Proxy proxy = 3;
    boolean hasProxy();
    org.mitre.svmp.protocol.SVMPProtocol.Proxy getProxy();
    
    // optional .svmp.Intent intent = 4;
    boolean hasIntent();
    org.mitre.svmp.protocol.SVMPProtocol.Intent getIntent();
    
    // optional .svmp.Notification notification = 5;
    boolean hasNotification();
    org.mitre.svmp.protocol.SVMPProtocol.Notification getNotification();
    
    // optional .svmp.ScreenInfo screen_info = 16;
    boolean hasScreenInfo();
    org.mitre.svmp.protocol.SVMPProtocol.ScreenInfo getScreenInfo();
    
    // optional .svmp.VideoStreamInfo video_info = 17;
    boolean hasVideoInfo();
    org.mitre.svmp.protocol.SVMPProtocol.VideoStreamInfo getVideoInfo();
  }
  public static final class Response extends
      com.google.protobuf.GeneratedMessageLite
      implements ResponseOrBuilder {
    // Use Response.newBuilder() to construct.
    private Response(Builder builder) {
      super(builder);
    }
    private Response(boolean noInit) {}
    
    private static final Response defaultInstance;
    public static Response getDefaultInstance() {
      return defaultInstance;
    }
    
    public Response getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public enum ResponseType
        implements com.google.protobuf.Internal.EnumLite {
      ERROR(0, 0),
      AUTHOK(1, 1),
      VMREADY(2, 2),
      SCREENINFO(3, 3),
      VIDSTREAMINFO(4, 4),
      INTENT(5, 5),
      NOTIFICATION(6, 6),
      GLDATA(7, 7),
      AUDIODATA(8, 8),
      ;
      
      public static final int ERROR_VALUE = 0;
      public static final int AUTHOK_VALUE = 1;
      public static final int VMREADY_VALUE = 2;
      public static final int SCREENINFO_VALUE = 3;
      public static final int VIDSTREAMINFO_VALUE = 4;
      public static final int INTENT_VALUE = 5;
      public static final int NOTIFICATION_VALUE = 6;
      public static final int GLDATA_VALUE = 7;
      public static final int AUDIODATA_VALUE = 8;
      
      
      public final int getNumber() { return value; }
      
      public static ResponseType valueOf(int value) {
        switch (value) {
          case 0: return ERROR;
          case 1: return AUTHOK;
          case 2: return VMREADY;
          case 3: return SCREENINFO;
          case 4: return VIDSTREAMINFO;
          case 5: return INTENT;
          case 6: return NOTIFICATION;
          case 7: return GLDATA;
          case 8: return AUDIODATA;
          default: return null;
        }
      }
      
      public static com.google.protobuf.Internal.EnumLiteMap<ResponseType>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static com.google.protobuf.Internal.EnumLiteMap<ResponseType>
          internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<ResponseType>() {
              public ResponseType findValueByNumber(int number) {
                return ResponseType.valueOf(number);
              }
            };
      
      private final int value;
      
      private ResponseType(int index, int value) {
        this.value = value;
      }
      
      // @@protoc_insertion_point(enum_scope:svmp.Response.ResponseType)
    }
    
    private int bitField0_;
    // required .svmp.Response.ResponseType type = 1;
    public static final int TYPE_FIELD_NUMBER = 1;
    private org.mitre.svmp.protocol.SVMPProtocol.Response.ResponseType type_;
    public boolean hasType() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    public org.mitre.svmp.protocol.SVMPProtocol.Response.ResponseType getType() {
      return type_;
    }
    
    // optional string message = 2;
    public static final int MESSAGE_FIELD_NUMBER = 2;
    private java.lang.Object message_;
    public boolean hasMessage() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    public String getMessage() {
      java.lang.Object ref = message_;
      if (ref instanceof String) {
        return (String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        String s = bs.toStringUtf8();
        if (com.google.protobuf.Internal.isValidUtf8(bs)) {
          message_ = s;
        }
        return s;
      }
    }
    private com.google.protobuf.ByteString getMessageBytes() {
      java.lang.Object ref = message_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8((String) ref);
        message_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    
    // optional .svmp.Proxy proxy = 3;
    public static final int PROXY_FIELD_NUMBER = 3;
    private org.mitre.svmp.protocol.SVMPProtocol.Proxy proxy_;
    public boolean hasProxy() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    public org.mitre.svmp.protocol.SVMPProtocol.Proxy getProxy() {
      return proxy_;
    }
    
    // optional .svmp.Intent intent = 4;
    public static final int INTENT_FIELD_NUMBER = 4;
    private org.mitre.svmp.protocol.SVMPProtocol.Intent intent_;
    public boolean hasIntent() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    public org.mitre.svmp.protocol.SVMPProtocol.Intent getIntent() {
      return intent_;
    }
    
    // optional .svmp.Notification notification = 5;
    public static final int NOTIFICATION_FIELD_NUMBER = 5;
    private org.mitre.svmp.protocol.SVMPProtocol.Notification notification_;
    public boolean hasNotification() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    public org.mitre.svmp.protocol.SVMPProtocol.Notification getNotification() {
      return notification_;
    }
    
    // optional .svmp.ScreenInfo screen_info = 16;
    public static final int SCREEN_INFO_FIELD_NUMBER = 16;
    private org.mitre.svmp.protocol.SVMPProtocol.ScreenInfo screenInfo_;
    public boolean hasScreenInfo() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    public org.mitre.svmp.protocol.SVMPProtocol.ScreenInfo getScreenInfo() {
      return screenInfo_;
    }
    
    // optional .svmp.VideoStreamInfo video_info = 17;
    public static final int VIDEO_INFO_FIELD_NUMBER = 17;
    private org.mitre.svmp.protocol.SVMPProtocol.VideoStreamInfo videoInfo_;
    public boolean hasVideoInfo() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    public org.mitre.svmp.protocol.SVMPProtocol.VideoStreamInfo getVideoInfo() {
      return videoInfo_;
    }
    
    private void initFields() {
      type_ = org.mitre.svmp.protocol.SVMPProtocol.Response.ResponseType.ERROR;
      message_ = "";
      proxy_ = org.mitre.svmp.protocol.SVMPProtocol.Proxy.getDefaultInstance();
      intent_ = org.mitre.svmp.protocol.SVMPProtocol.Intent.getDefaultInstance();
      notification_ = org.mitre.svmp.protocol.SVMPProtocol.Notification.getDefaultInstance();
      screenInfo_ = org.mitre.svmp.protocol.SVMPProtocol.ScreenInfo.getDefaultInstance();
      videoInfo_ = org.mitre.svmp.protocol.SVMPProtocol.VideoStreamInfo.getDefaultInstance();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;
      
      if (!hasType()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (hasProxy()) {
        if (!getProxy().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasScreenInfo()) {
        if (!getScreenInfo().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeEnum(1, type_.getNumber());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeBytes(2, getMessageBytes());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeMessage(3, proxy_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeMessage(4, intent_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeMessage(5, notification_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeMessage(16, screenInfo_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeMessage(17, videoInfo_);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(1, type_.getNumber());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(2, getMessageBytes());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, proxy_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, intent_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, notification_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(16, screenInfo_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(17, videoInfo_);
      }
      memoizedSerializedSize = size;
      return size;
    }
    
    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }
    
    public static org.mitre.svmp.protocol.SVMPProtocol.Response parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.Response parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.Response parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.Response parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.Response parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.Response parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.Response parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.Response parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.Response parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.Response parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.mitre.svmp.protocol.SVMPProtocol.Response prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          org.mitre.svmp.protocol.SVMPProtocol.Response, Builder>
        implements org.mitre.svmp.protocol.SVMPProtocol.ResponseOrBuilder {
      // Construct using org.mitre.svmp.protocol.SVMPProtocol.Response.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }
      
      private void maybeForceBuilderInitialization() {
      }
      private static Builder create() {
        return new Builder();
      }
      
      public Builder clear() {
        super.clear();
        type_ = org.mitre.svmp.protocol.SVMPProtocol.Response.ResponseType.ERROR;
        bitField0_ = (bitField0_ & ~0x00000001);
        message_ = "";
        bitField0_ = (bitField0_ & ~0x00000002);
        proxy_ = org.mitre.svmp.protocol.SVMPProtocol.Proxy.getDefaultInstance();
        bitField0_ = (bitField0_ & ~0x00000004);
        intent_ = org.mitre.svmp.protocol.SVMPProtocol.Intent.getDefaultInstance();
        bitField0_ = (bitField0_ & ~0x00000008);
        notification_ = org.mitre.svmp.protocol.SVMPProtocol.Notification.getDefaultInstance();
        bitField0_ = (bitField0_ & ~0x00000010);
        screenInfo_ = org.mitre.svmp.protocol.SVMPProtocol.ScreenInfo.getDefaultInstance();
        bitField0_ = (bitField0_ & ~0x00000020);
        videoInfo_ = org.mitre.svmp.protocol.SVMPProtocol.VideoStreamInfo.getDefaultInstance();
        bitField0_ = (bitField0_ & ~0x00000040);
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }
      
      public org.mitre.svmp.protocol.SVMPProtocol.Response getDefaultInstanceForType() {
        return org.mitre.svmp.protocol.SVMPProtocol.Response.getDefaultInstance();
      }
      
      public org.mitre.svmp.protocol.SVMPProtocol.Response build() {
        org.mitre.svmp.protocol.SVMPProtocol.Response result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }
      
      private org.mitre.svmp.protocol.SVMPProtocol.Response buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        org.mitre.svmp.protocol.SVMPProtocol.Response result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return result;
      }
      
      public org.mitre.svmp.protocol.SVMPProtocol.Response buildPartial() {
        org.mitre.svmp.protocol.SVMPProtocol.Response result = new org.mitre.svmp.protocol.SVMPProtocol.Response(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.type_ = type_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.message_ = message_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.proxy_ = proxy_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.intent_ = intent_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.notification_ = notification_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        result.screenInfo_ = screenInfo_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000040;
        }
        result.videoInfo_ = videoInfo_;
        result.bitField0_ = to_bitField0_;
        return result;
      }
      
      public Builder mergeFrom(org.mitre.svmp.protocol.SVMPProtocol.Response other) {
        if (other == org.mitre.svmp.protocol.SVMPProtocol.Response.getDefaultInstance()) return this;
        if (other.hasType()) {
          setType(other.getType());
        }
        if (other.hasMessage()) {
          setMessage(other.getMessage());
        }
        if (other.hasProxy()) {
          mergeProxy(other.getProxy());
        }
        if (other.hasIntent()) {
          mergeIntent(other.getIntent());
        }
        if (other.hasNotification()) {
          mergeNotification(other.getNotification());
        }
        if (other.hasScreenInfo()) {
          mergeScreenInfo(other.getScreenInfo());
        }
        if (other.hasVideoInfo()) {
          mergeVideoInfo(other.getVideoInfo());
        }
        return this;
      }
      
      public final boolean isInitialized() {
        if (!hasType()) {
          
          return false;
        }
        if (hasProxy()) {
          if (!getProxy().isInitialized()) {
            
            return false;
          }
        }
        if (hasScreenInfo()) {
          if (!getScreenInfo().isInitialized()) {
            
            return false;
          }
        }
        return true;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              
              return this;
            default: {
              if (!parseUnknownField(input, extensionRegistry, tag)) {
                
                return this;
              }
              break;
            }
            case 8: {
              int rawValue = input.readEnum();
              org.mitre.svmp.protocol.SVMPProtocol.Response.ResponseType value = org.mitre.svmp.protocol.SVMPProtocol.Response.ResponseType.valueOf(rawValue);
              if (value != null) {
                bitField0_ |= 0x00000001;
                type_ = value;
              }
              break;
            }
            case 18: {
              bitField0_ |= 0x00000002;
              message_ = input.readBytes();
              break;
            }
            case 26: {
              org.mitre.svmp.protocol.SVMPProtocol.Proxy.Builder subBuilder = org.mitre.svmp.protocol.SVMPProtocol.Proxy.newBuilder();
              if (hasProxy()) {
                subBuilder.mergeFrom(getProxy());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setProxy(subBuilder.buildPartial());
              break;
            }
            case 34: {
              org.mitre.svmp.protocol.SVMPProtocol.Intent.Builder subBuilder = org.mitre.svmp.protocol.SVMPProtocol.Intent.newBuilder();
              if (hasIntent()) {
                subBuilder.mergeFrom(getIntent());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setIntent(subBuilder.buildPartial());
              break;
            }
            case 42: {
              org.mitre.svmp.protocol.SVMPProtocol.Notification.Builder subBuilder = org.mitre.svmp.protocol.SVMPProtocol.Notification.newBuilder();
              if (hasNotification()) {
                subBuilder.mergeFrom(getNotification());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setNotification(subBuilder.buildPartial());
              break;
            }
            case 130: {
              org.mitre.svmp.protocol.SVMPProtocol.ScreenInfo.Builder subBuilder = org.mitre.svmp.protocol.SVMPProtocol.ScreenInfo.newBuilder();
              if (hasScreenInfo()) {
                subBuilder.mergeFrom(getScreenInfo());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setScreenInfo(subBuilder.buildPartial());
              break;
            }
            case 138: {
              org.mitre.svmp.protocol.SVMPProtocol.VideoStreamInfo.Builder subBuilder = org.mitre.svmp.protocol.SVMPProtocol.VideoStreamInfo.newBuilder();
              if (hasVideoInfo()) {
                subBuilder.mergeFrom(getVideoInfo());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setVideoInfo(subBuilder.buildPartial());
              break;
            }
          }
        }
      }
      
      private int bitField0_;
      
      // required .svmp.Response.ResponseType type = 1;
      private org.mitre.svmp.protocol.SVMPProtocol.Response.ResponseType type_ = org.mitre.svmp.protocol.SVMPProtocol.Response.ResponseType.ERROR;
      public boolean hasType() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      public org.mitre.svmp.protocol.SVMPProtocol.Response.ResponseType getType() {
        return type_;
      }
      public Builder setType(org.mitre.svmp.protocol.SVMPProtocol.Response.ResponseType value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000001;
        type_ = value;
        
        return this;
      }
      public Builder clearType() {
        bitField0_ = (bitField0_ & ~0x00000001);
        type_ = org.mitre.svmp.protocol.SVMPProtocol.Response.ResponseType.ERROR;
        
        return this;
      }
      
      // optional string message = 2;
      private java.lang.Object message_ = "";
      public boolean hasMessage() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      public String getMessage() {
        java.lang.Object ref = message_;
        if (!(ref instanceof String)) {
          String s = ((com.google.protobuf.ByteString) ref).toStringUtf8();
          message_ = s;
          return s;
        } else {
          return (String) ref;
        }
      }
      public Builder setMessage(String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        message_ = value;
        
        return this;
      }
      public Builder clearMessage() {
        bitField0_ = (bitField0_ & ~0x00000002);
        message_ = getDefaultInstance().getMessage();
        
        return this;
      }
      void setMessage(com.google.protobuf.ByteString value) {
        bitField0_ |= 0x00000002;
        message_ = value;
        
      }
      
      // optional .svmp.Proxy proxy = 3;
      private org.mitre.svmp.protocol.SVMPProtocol.Proxy proxy_ = org.mitre.svmp.protocol.SVMPProtocol.Proxy.getDefaultInstance();
      public boolean hasProxy() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      public org.mitre.svmp.protocol.SVMPProtocol.Proxy getProxy() {
        return proxy_;
      }
      public Builder setProxy(org.mitre.svmp.protocol.SVMPProtocol.Proxy value) {
        if (value == null) {
          throw new NullPointerException();
        }
        proxy_ = value;
        
        bitField0_ |= 0x00000004;
        return this;
      }
      public Builder setProxy(
          org.mitre.svmp.protocol.SVMPProtocol.Proxy.Builder builderForValue) {
        proxy_ = builderForValue.build();
        
        bitField0_ |= 0x00000004;
        return this;
      }
      public Builder mergeProxy(org.mitre.svmp.protocol.SVMPProtocol.Proxy value) {
        if (((bitField0_ & 0x00000004) == 0x00000004) &&
            proxy_ != org.mitre.svmp.protocol.SVMPProtocol.Proxy.getDefaultInstance()) {
          proxy_ =
            org.mitre.svmp.protocol.SVMPProtocol.Proxy.newBuilder(proxy_).mergeFrom(value).buildPartial();
        } else {
          proxy_ = value;
        }
        
        bitField0_ |= 0x00000004;
        return this;
      }
      public Builder clearProxy() {
        proxy_ = org.mitre.svmp.protocol.SVMPProtocol.Proxy.getDefaultInstance();
        
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }
      
      // optional .svmp.Intent intent = 4;
      private org.mitre.svmp.protocol.SVMPProtocol.Intent intent_ = org.mitre.svmp.protocol.SVMPProtocol.Intent.getDefaultInstance();
      public boolean hasIntent() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      public org.mitre.svmp.protocol.SVMPProtocol.Intent getIntent() {
        return intent_;
      }
      public Builder setIntent(org.mitre.svmp.protocol.SVMPProtocol.Intent value) {
        if (value == null) {
          throw new NullPointerException();
        }
        intent_ = value;
        
        bitField0_ |= 0x00000008;
        return this;
      }
      public Builder setIntent(
          org.mitre.svmp.protocol.SVMPProtocol.Intent.Builder builderForValue) {
        intent_ = builderForValue.build();
        
        bitField0_ |= 0x00000008;
        return this;
      }
      public Builder mergeIntent(org.mitre.svmp.protocol.SVMPProtocol.Intent value) {
        if (((bitField0_ & 0x00000008) == 0x00000008) &&
            intent_ != org.mitre.svmp.protocol.SVMPProtocol.Intent.getDefaultInstance()) {
          intent_ =
            org.mitre.svmp.protocol.SVMPProtocol.Intent.newBuilder(intent_).mergeFrom(value).buildPartial();
        } else {
          intent_ = value;
        }
        
        bitField0_ |= 0x00000008;
        return this;
      }
      public Builder clearIntent() {
        intent_ = org.mitre.svmp.protocol.SVMPProtocol.Intent.getDefaultInstance();
        
        bitField0_ = (bitField0_ & ~0x00000008);
        return this;
      }
      
      // optional .svmp.Notification notification = 5;
      private org.mitre.svmp.protocol.SVMPProtocol.Notification notification_ = org.mitre.svmp.protocol.SVMPProtocol.Notification.getDefaultInstance();
      public boolean hasNotification() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      public org.mitre.svmp.protocol.SVMPProtocol.Notification getNotification() {
        return notification_;
      }
      public Builder setNotification(org.mitre.svmp.protocol.SVMPProtocol.Notification value) {
        if (value == null) {
          throw new NullPointerException();
        }
        notification_ = value;
        
        bitField0_ |= 0x00000010;
        return this;
      }
      public Builder setNotification(
          org.mitre.svmp.protocol.SVMPProtocol.Notification.Builder builderForValue) {
        notification_ = builderForValue.build();
        
        bitField0_ |= 0x00000010;
        return this;
      }
      public Builder mergeNotification(org.mitre.svmp.protocol.SVMPProtocol.Notification value) {
        if (((bitField0_ & 0x00000010) == 0x00000010) &&
            notification_ != org.mitre.svmp.protocol.SVMPProtocol.Notification.getDefaultInstance()) {
          notification_ =
            org.mitre.svmp.protocol.SVMPProtocol.Notification.newBuilder(notification_).mergeFrom(value).buildPartial();
        } else {
          notification_ = value;
        }
        
        bitField0_ |= 0x00000010;
        return this;
      }
      public Builder clearNotification() {
        notification_ = org.mitre.svmp.protocol.SVMPProtocol.Notification.getDefaultInstance();
        
        bitField0_ = (bitField0_ & ~0x00000010);
        return this;
      }
      
      // optional .svmp.ScreenInfo screen_info = 16;
      private org.mitre.svmp.protocol.SVMPProtocol.ScreenInfo screenInfo_ = org.mitre.svmp.protocol.SVMPProtocol.ScreenInfo.getDefaultInstance();
      public boolean hasScreenInfo() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      public org.mitre.svmp.protocol.SVMPProtocol.ScreenInfo getScreenInfo() {
        return screenInfo_;
      }
      public Builder setScreenInfo(org.mitre.svmp.protocol.SVMPProtocol.ScreenInfo value) {
        if (value == null) {
          throw new NullPointerException();
        }
        screenInfo_ = value;
        
        bitField0_ |= 0x00000020;
        return this;
      }
      public Builder setScreenInfo(
          org.mitre.svmp.protocol.SVMPProtocol.ScreenInfo.Builder builderForValue) {
        screenInfo_ = builderForValue.build();
        
        bitField0_ |= 0x00000020;
        return this;
      }
      public Builder mergeScreenInfo(org.mitre.svmp.protocol.SVMPProtocol.ScreenInfo value) {
        if (((bitField0_ & 0x00000020) == 0x00000020) &&
            screenInfo_ != org.mitre.svmp.protocol.SVMPProtocol.ScreenInfo.getDefaultInstance()) {
          screenInfo_ =
            org.mitre.svmp.protocol.SVMPProtocol.ScreenInfo.newBuilder(screenInfo_).mergeFrom(value).buildPartial();
        } else {
          screenInfo_ = value;
        }
        
        bitField0_ |= 0x00000020;
        return this;
      }
      public Builder clearScreenInfo() {
        screenInfo_ = org.mitre.svmp.protocol.SVMPProtocol.ScreenInfo.getDefaultInstance();
        
        bitField0_ = (bitField0_ & ~0x00000020);
        return this;
      }
      
      // optional .svmp.VideoStreamInfo video_info = 17;
      private org.mitre.svmp.protocol.SVMPProtocol.VideoStreamInfo videoInfo_ = org.mitre.svmp.protocol.SVMPProtocol.VideoStreamInfo.getDefaultInstance();
      public boolean hasVideoInfo() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      public org.mitre.svmp.protocol.SVMPProtocol.VideoStreamInfo getVideoInfo() {
        return videoInfo_;
      }
      public Builder setVideoInfo(org.mitre.svmp.protocol.SVMPProtocol.VideoStreamInfo value) {
        if (value == null) {
          throw new NullPointerException();
        }
        videoInfo_ = value;
        
        bitField0_ |= 0x00000040;
        return this;
      }
      public Builder setVideoInfo(
          org.mitre.svmp.protocol.SVMPProtocol.VideoStreamInfo.Builder builderForValue) {
        videoInfo_ = builderForValue.build();
        
        bitField0_ |= 0x00000040;
        return this;
      }
      public Builder mergeVideoInfo(org.mitre.svmp.protocol.SVMPProtocol.VideoStreamInfo value) {
        if (((bitField0_ & 0x00000040) == 0x00000040) &&
            videoInfo_ != org.mitre.svmp.protocol.SVMPProtocol.VideoStreamInfo.getDefaultInstance()) {
          videoInfo_ =
            org.mitre.svmp.protocol.SVMPProtocol.VideoStreamInfo.newBuilder(videoInfo_).mergeFrom(value).buildPartial();
        } else {
          videoInfo_ = value;
        }
        
        bitField0_ |= 0x00000040;
        return this;
      }
      public Builder clearVideoInfo() {
        videoInfo_ = org.mitre.svmp.protocol.SVMPProtocol.VideoStreamInfo.getDefaultInstance();
        
        bitField0_ = (bitField0_ & ~0x00000040);
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:svmp.Response)
    }
    
    static {
      defaultInstance = new Response(true);
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:svmp.Response)
  }
  
  public interface ProxyOrBuilder
      extends com.google.protobuf.MessageLiteOrBuilder {
    
    // required .svmp.Proxy.ServiceType type = 1;
    boolean hasType();
    org.mitre.svmp.protocol.SVMPProtocol.Proxy.ServiceType getType();
    
    // optional bytes data = 2;
    boolean hasData();
    com.google.protobuf.ByteString getData();
  }
  public static final class Proxy extends
      com.google.protobuf.GeneratedMessageLite
      implements ProxyOrBuilder {
    // Use Proxy.newBuilder() to construct.
    private Proxy(Builder builder) {
      super(builder);
    }
    private Proxy(boolean noInit) {}
    
    private static final Proxy defaultInstance;
    public static Proxy getDefaultInstance() {
      return defaultInstance;
    }
    
    public Proxy getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public enum ServiceType
        implements com.google.protobuf.Internal.EnumLite {
      INPUT(0, 0),
      INTENT(1, 1),
      ;
      
      public static final int INPUT_VALUE = 0;
      public static final int INTENT_VALUE = 1;
      
      
      public final int getNumber() { return value; }
      
      public static ServiceType valueOf(int value) {
        switch (value) {
          case 0: return INPUT;
          case 1: return INTENT;
          default: return null;
        }
      }
      
      public static com.google.protobuf.Internal.EnumLiteMap<ServiceType>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static com.google.protobuf.Internal.EnumLiteMap<ServiceType>
          internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<ServiceType>() {
              public ServiceType findValueByNumber(int number) {
                return ServiceType.valueOf(number);
              }
            };
      
      private final int value;
      
      private ServiceType(int index, int value) {
        this.value = value;
      }
      
      // @@protoc_insertion_point(enum_scope:svmp.Proxy.ServiceType)
    }
    
    private int bitField0_;
    // required .svmp.Proxy.ServiceType type = 1;
    public static final int TYPE_FIELD_NUMBER = 1;
    private org.mitre.svmp.protocol.SVMPProtocol.Proxy.ServiceType type_;
    public boolean hasType() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    public org.mitre.svmp.protocol.SVMPProtocol.Proxy.ServiceType getType() {
      return type_;
    }
    
    // optional bytes data = 2;
    public static final int DATA_FIELD_NUMBER = 2;
    private com.google.protobuf.ByteString data_;
    public boolean hasData() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    public com.google.protobuf.ByteString getData() {
      return data_;
    }
    
    private void initFields() {
      type_ = org.mitre.svmp.protocol.SVMPProtocol.Proxy.ServiceType.INPUT;
      data_ = com.google.protobuf.ByteString.EMPTY;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;
      
      if (!hasType()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeEnum(1, type_.getNumber());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeBytes(2, data_);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(1, type_.getNumber());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(2, data_);
      }
      memoizedSerializedSize = size;
      return size;
    }
    
    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }
    
    public static org.mitre.svmp.protocol.SVMPProtocol.Proxy parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.Proxy parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.Proxy parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.Proxy parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.Proxy parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.Proxy parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.Proxy parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.Proxy parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.Proxy parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.Proxy parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.mitre.svmp.protocol.SVMPProtocol.Proxy prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          org.mitre.svmp.protocol.SVMPProtocol.Proxy, Builder>
        implements org.mitre.svmp.protocol.SVMPProtocol.ProxyOrBuilder {
      // Construct using org.mitre.svmp.protocol.SVMPProtocol.Proxy.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }
      
      private void maybeForceBuilderInitialization() {
      }
      private static Builder create() {
        return new Builder();
      }
      
      public Builder clear() {
        super.clear();
        type_ = org.mitre.svmp.protocol.SVMPProtocol.Proxy.ServiceType.INPUT;
        bitField0_ = (bitField0_ & ~0x00000001);
        data_ = com.google.protobuf.ByteString.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }
      
      public org.mitre.svmp.protocol.SVMPProtocol.Proxy getDefaultInstanceForType() {
        return org.mitre.svmp.protocol.SVMPProtocol.Proxy.getDefaultInstance();
      }
      
      public org.mitre.svmp.protocol.SVMPProtocol.Proxy build() {
        org.mitre.svmp.protocol.SVMPProtocol.Proxy result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }
      
      private org.mitre.svmp.protocol.SVMPProtocol.Proxy buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        org.mitre.svmp.protocol.SVMPProtocol.Proxy result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return result;
      }
      
      public org.mitre.svmp.protocol.SVMPProtocol.Proxy buildPartial() {
        org.mitre.svmp.protocol.SVMPProtocol.Proxy result = new org.mitre.svmp.protocol.SVMPProtocol.Proxy(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.type_ = type_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.data_ = data_;
        result.bitField0_ = to_bitField0_;
        return result;
      }
      
      public Builder mergeFrom(org.mitre.svmp.protocol.SVMPProtocol.Proxy other) {
        if (other == org.mitre.svmp.protocol.SVMPProtocol.Proxy.getDefaultInstance()) return this;
        if (other.hasType()) {
          setType(other.getType());
        }
        if (other.hasData()) {
          setData(other.getData());
        }
        return this;
      }
      
      public final boolean isInitialized() {
        if (!hasType()) {
          
          return false;
        }
        return true;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              
              return this;
            default: {
              if (!parseUnknownField(input, extensionRegistry, tag)) {
                
                return this;
              }
              break;
            }
            case 8: {
              int rawValue = input.readEnum();
              org.mitre.svmp.protocol.SVMPProtocol.Proxy.ServiceType value = org.mitre.svmp.protocol.SVMPProtocol.Proxy.ServiceType.valueOf(rawValue);
              if (value != null) {
                bitField0_ |= 0x00000001;
                type_ = value;
              }
              break;
            }
            case 18: {
              bitField0_ |= 0x00000002;
              data_ = input.readBytes();
              break;
            }
          }
        }
      }
      
      private int bitField0_;
      
      // required .svmp.Proxy.ServiceType type = 1;
      private org.mitre.svmp.protocol.SVMPProtocol.Proxy.ServiceType type_ = org.mitre.svmp.protocol.SVMPProtocol.Proxy.ServiceType.INPUT;
      public boolean hasType() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      public org.mitre.svmp.protocol.SVMPProtocol.Proxy.ServiceType getType() {
        return type_;
      }
      public Builder setType(org.mitre.svmp.protocol.SVMPProtocol.Proxy.ServiceType value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000001;
        type_ = value;
        
        return this;
      }
      public Builder clearType() {
        bitField0_ = (bitField0_ & ~0x00000001);
        type_ = org.mitre.svmp.protocol.SVMPProtocol.Proxy.ServiceType.INPUT;
        
        return this;
      }
      
      // optional bytes data = 2;
      private com.google.protobuf.ByteString data_ = com.google.protobuf.ByteString.EMPTY;
      public boolean hasData() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      public com.google.protobuf.ByteString getData() {
        return data_;
      }
      public Builder setData(com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        data_ = value;
        
        return this;
      }
      public Builder clearData() {
        bitField0_ = (bitField0_ & ~0x00000002);
        data_ = getDefaultInstance().getData();
        
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:svmp.Proxy)
    }
    
    static {
      defaultInstance = new Proxy(true);
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:svmp.Proxy)
  }
  
  public interface IntentOrBuilder
      extends com.google.protobuf.MessageLiteOrBuilder {
  }
  public static final class Intent extends
      com.google.protobuf.GeneratedMessageLite
      implements IntentOrBuilder {
    // Use Intent.newBuilder() to construct.
    private Intent(Builder builder) {
      super(builder);
    }
    private Intent(boolean noInit) {}
    
    private static final Intent defaultInstance;
    public static Intent getDefaultInstance() {
      return defaultInstance;
    }
    
    public Intent getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    private void initFields() {
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;
      
      memoizedIsInitialized = 1;
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      memoizedSerializedSize = size;
      return size;
    }
    
    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }
    
    public static org.mitre.svmp.protocol.SVMPProtocol.Intent parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.Intent parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.Intent parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.Intent parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.Intent parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.Intent parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.Intent parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.Intent parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.Intent parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.Intent parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.mitre.svmp.protocol.SVMPProtocol.Intent prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          org.mitre.svmp.protocol.SVMPProtocol.Intent, Builder>
        implements org.mitre.svmp.protocol.SVMPProtocol.IntentOrBuilder {
      // Construct using org.mitre.svmp.protocol.SVMPProtocol.Intent.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }
      
      private void maybeForceBuilderInitialization() {
      }
      private static Builder create() {
        return new Builder();
      }
      
      public Builder clear() {
        super.clear();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }
      
      public org.mitre.svmp.protocol.SVMPProtocol.Intent getDefaultInstanceForType() {
        return org.mitre.svmp.protocol.SVMPProtocol.Intent.getDefaultInstance();
      }
      
      public org.mitre.svmp.protocol.SVMPProtocol.Intent build() {
        org.mitre.svmp.protocol.SVMPProtocol.Intent result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }
      
      private org.mitre.svmp.protocol.SVMPProtocol.Intent buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        org.mitre.svmp.protocol.SVMPProtocol.Intent result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return result;
      }
      
      public org.mitre.svmp.protocol.SVMPProtocol.Intent buildPartial() {
        org.mitre.svmp.protocol.SVMPProtocol.Intent result = new org.mitre.svmp.protocol.SVMPProtocol.Intent(this);
        return result;
      }
      
      public Builder mergeFrom(org.mitre.svmp.protocol.SVMPProtocol.Intent other) {
        if (other == org.mitre.svmp.protocol.SVMPProtocol.Intent.getDefaultInstance()) return this;
        return this;
      }
      
      public final boolean isInitialized() {
        return true;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              
              return this;
            default: {
              if (!parseUnknownField(input, extensionRegistry, tag)) {
                
                return this;
              }
              break;
            }
          }
        }
      }
      
      
      // @@protoc_insertion_point(builder_scope:svmp.Intent)
    }
    
    static {
      defaultInstance = new Intent(true);
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:svmp.Intent)
  }
  
  public interface NotificationOrBuilder
      extends com.google.protobuf.MessageLiteOrBuilder {
  }
  public static final class Notification extends
      com.google.protobuf.GeneratedMessageLite
      implements NotificationOrBuilder {
    // Use Notification.newBuilder() to construct.
    private Notification(Builder builder) {
      super(builder);
    }
    private Notification(boolean noInit) {}
    
    private static final Notification defaultInstance;
    public static Notification getDefaultInstance() {
      return defaultInstance;
    }
    
    public Notification getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    private void initFields() {
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;
      
      memoizedIsInitialized = 1;
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      memoizedSerializedSize = size;
      return size;
    }
    
    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }
    
    public static org.mitre.svmp.protocol.SVMPProtocol.Notification parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.Notification parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.Notification parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.Notification parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.Notification parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.Notification parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.Notification parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.Notification parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.Notification parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.Notification parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.mitre.svmp.protocol.SVMPProtocol.Notification prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          org.mitre.svmp.protocol.SVMPProtocol.Notification, Builder>
        implements org.mitre.svmp.protocol.SVMPProtocol.NotificationOrBuilder {
      // Construct using org.mitre.svmp.protocol.SVMPProtocol.Notification.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }
      
      private void maybeForceBuilderInitialization() {
      }
      private static Builder create() {
        return new Builder();
      }
      
      public Builder clear() {
        super.clear();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }
      
      public org.mitre.svmp.protocol.SVMPProtocol.Notification getDefaultInstanceForType() {
        return org.mitre.svmp.protocol.SVMPProtocol.Notification.getDefaultInstance();
      }
      
      public org.mitre.svmp.protocol.SVMPProtocol.Notification build() {
        org.mitre.svmp.protocol.SVMPProtocol.Notification result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }
      
      private org.mitre.svmp.protocol.SVMPProtocol.Notification buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        org.mitre.svmp.protocol.SVMPProtocol.Notification result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return result;
      }
      
      public org.mitre.svmp.protocol.SVMPProtocol.Notification buildPartial() {
        org.mitre.svmp.protocol.SVMPProtocol.Notification result = new org.mitre.svmp.protocol.SVMPProtocol.Notification(this);
        return result;
      }
      
      public Builder mergeFrom(org.mitre.svmp.protocol.SVMPProtocol.Notification other) {
        if (other == org.mitre.svmp.protocol.SVMPProtocol.Notification.getDefaultInstance()) return this;
        return this;
      }
      
      public final boolean isInitialized() {
        return true;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              
              return this;
            default: {
              if (!parseUnknownField(input, extensionRegistry, tag)) {
                
                return this;
              }
              break;
            }
          }
        }
      }
      
      
      // @@protoc_insertion_point(builder_scope:svmp.Notification)
    }
    
    static {
      defaultInstance = new Notification(true);
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:svmp.Notification)
  }
  
  public interface TouchEventOrBuilder
      extends com.google.protobuf.MessageLiteOrBuilder {
    
    // required int32 action = 1;
    boolean hasAction();
    int getAction();
    
    // repeated .svmp.TouchEvent.PointerCoords items = 2;
    java.util.List<org.mitre.svmp.protocol.SVMPProtocol.TouchEvent.PointerCoords> 
        getItemsList();
    org.mitre.svmp.protocol.SVMPProtocol.TouchEvent.PointerCoords getItems(int index);
    int getItemsCount();
  }
  public static final class TouchEvent extends
      com.google.protobuf.GeneratedMessageLite
      implements TouchEventOrBuilder {
    // Use TouchEvent.newBuilder() to construct.
    private TouchEvent(Builder builder) {
      super(builder);
    }
    private TouchEvent(boolean noInit) {}
    
    private static final TouchEvent defaultInstance;
    public static TouchEvent getDefaultInstance() {
      return defaultInstance;
    }
    
    public TouchEvent getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public interface PointerCoordsOrBuilder
        extends com.google.protobuf.MessageLiteOrBuilder {
      
      // required int32 id = 1;
      boolean hasId();
      int getId();
      
      // required float x = 2;
      boolean hasX();
      float getX();
      
      // required float y = 3;
      boolean hasY();
      float getY();
    }
    public static final class PointerCoords extends
        com.google.protobuf.GeneratedMessageLite
        implements PointerCoordsOrBuilder {
      // Use PointerCoords.newBuilder() to construct.
      private PointerCoords(Builder builder) {
        super(builder);
      }
      private PointerCoords(boolean noInit) {}
      
      private static final PointerCoords defaultInstance;
      public static PointerCoords getDefaultInstance() {
        return defaultInstance;
      }
      
      public PointerCoords getDefaultInstanceForType() {
        return defaultInstance;
      }
      
      private int bitField0_;
      // required int32 id = 1;
      public static final int ID_FIELD_NUMBER = 1;
      private int id_;
      public boolean hasId() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      public int getId() {
        return id_;
      }
      
      // required float x = 2;
      public static final int X_FIELD_NUMBER = 2;
      private float x_;
      public boolean hasX() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      public float getX() {
        return x_;
      }
      
      // required float y = 3;
      public static final int Y_FIELD_NUMBER = 3;
      private float y_;
      public boolean hasY() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      public float getY() {
        return y_;
      }
      
      private void initFields() {
        id_ = 0;
        x_ = 0F;
        y_ = 0F;
      }
      private byte memoizedIsInitialized = -1;
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized != -1) return isInitialized == 1;
        
        if (!hasId()) {
          memoizedIsInitialized = 0;
          return false;
        }
        if (!hasX()) {
          memoizedIsInitialized = 0;
          return false;
        }
        if (!hasY()) {
          memoizedIsInitialized = 0;
          return false;
        }
        memoizedIsInitialized = 1;
        return true;
      }
      
      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        getSerializedSize();
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          output.writeInt32(1, id_);
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          output.writeFloat(2, x_);
        }
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
          output.writeFloat(3, y_);
        }
      }
      
      private int memoizedSerializedSize = -1;
      public int getSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
      
        size = 0;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          size += com.google.protobuf.CodedOutputStream
            .computeInt32Size(1, id_);
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          size += com.google.protobuf.CodedOutputStream
            .computeFloatSize(2, x_);
        }
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
          size += com.google.protobuf.CodedOutputStream
            .computeFloatSize(3, y_);
        }
        memoizedSerializedSize = size;
        return size;
      }
      
      private static final long serialVersionUID = 0L;
      @java.lang.Override
      protected java.lang.Object writeReplace()
          throws java.io.ObjectStreamException {
        return super.writeReplace();
      }
      
      public static org.mitre.svmp.protocol.SVMPProtocol.TouchEvent.PointerCoords parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return newBuilder().mergeFrom(data).buildParsed();
      }
      public static org.mitre.svmp.protocol.SVMPProtocol.TouchEvent.PointerCoords parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return newBuilder().mergeFrom(data, extensionRegistry)
                 .buildParsed();
      }
      public static org.mitre.svmp.protocol.SVMPProtocol.TouchEvent.PointerCoords parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return newBuilder().mergeFrom(data).buildParsed();
      }
      public static org.mitre.svmp.protocol.SVMPProtocol.TouchEvent.PointerCoords parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return newBuilder().mergeFrom(data, extensionRegistry)
                 .buildParsed();
      }
      public static org.mitre.svmp.protocol.SVMPProtocol.TouchEvent.PointerCoords parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return newBuilder().mergeFrom(input).buildParsed();
      }
      public static org.mitre.svmp.protocol.SVMPProtocol.TouchEvent.PointerCoords parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return newBuilder().mergeFrom(input, extensionRegistry)
                 .buildParsed();
      }
      public static org.mitre.svmp.protocol.SVMPProtocol.TouchEvent.PointerCoords parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        Builder builder = newBuilder();
        if (builder.mergeDelimitedFrom(input)) {
          return builder.buildParsed();
        } else {
          return null;
        }
      }
      public static org.mitre.svmp.protocol.SVMPProtocol.TouchEvent.PointerCoords parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        Builder builder = newBuilder();
        if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
          return builder.buildParsed();
        } else {
          return null;
        }
      }
      public static org.mitre.svmp.protocol.SVMPProtocol.TouchEvent.PointerCoords parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return newBuilder().mergeFrom(input).buildParsed();
      }
      public static org.mitre.svmp.protocol.SVMPProtocol.TouchEvent.PointerCoords parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return newBuilder().mergeFrom(input, extensionRegistry)
                 .buildParsed();
      }
      
      public static Builder newBuilder() { return Builder.create(); }
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder(org.mitre.svmp.protocol.SVMPProtocol.TouchEvent.PointerCoords prototype) {
        return newBuilder().mergeFrom(prototype);
      }
      public Builder toBuilder() { return newBuilder(this); }
      
      public static final class Builder extends
          com.google.protobuf.GeneratedMessageLite.Builder<
            org.mitre.svmp.protocol.SVMPProtocol.TouchEvent.PointerCoords, Builder>
          implements org.mitre.svmp.protocol.SVMPProtocol.TouchEvent.PointerCoordsOrBuilder {
        // Construct using org.mitre.svmp.protocol.SVMPProtocol.TouchEvent.PointerCoords.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }
        
        private void maybeForceBuilderInitialization() {
        }
        private static Builder create() {
          return new Builder();
        }
        
        public Builder clear() {
          super.clear();
          id_ = 0;
          bitField0_ = (bitField0_ & ~0x00000001);
          x_ = 0F;
          bitField0_ = (bitField0_ & ~0x00000002);
          y_ = 0F;
          bitField0_ = (bitField0_ & ~0x00000004);
          return this;
        }
        
        public Builder clone() {
          return create().mergeFrom(buildPartial());
        }
        
        public org.mitre.svmp.protocol.SVMPProtocol.TouchEvent.PointerCoords getDefaultInstanceForType() {
          return org.mitre.svmp.protocol.SVMPProtocol.TouchEvent.PointerCoords.getDefaultInstance();
        }
        
        public org.mitre.svmp.protocol.SVMPProtocol.TouchEvent.PointerCoords build() {
          org.mitre.svmp.protocol.SVMPProtocol.TouchEvent.PointerCoords result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }
        
        private org.mitre.svmp.protocol.SVMPProtocol.TouchEvent.PointerCoords buildParsed()
            throws com.google.protobuf.InvalidProtocolBufferException {
          org.mitre.svmp.protocol.SVMPProtocol.TouchEvent.PointerCoords result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(
              result).asInvalidProtocolBufferException();
          }
          return result;
        }
        
        public org.mitre.svmp.protocol.SVMPProtocol.TouchEvent.PointerCoords buildPartial() {
          org.mitre.svmp.protocol.SVMPProtocol.TouchEvent.PointerCoords result = new org.mitre.svmp.protocol.SVMPProtocol.TouchEvent.PointerCoords(this);
          int from_bitField0_ = bitField0_;
          int to_bitField0_ = 0;
          if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
            to_bitField0_ |= 0x00000001;
          }
          result.id_ = id_;
          if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
            to_bitField0_ |= 0x00000002;
          }
          result.x_ = x_;
          if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
            to_bitField0_ |= 0x00000004;
          }
          result.y_ = y_;
          result.bitField0_ = to_bitField0_;
          return result;
        }
        
        public Builder mergeFrom(org.mitre.svmp.protocol.SVMPProtocol.TouchEvent.PointerCoords other) {
          if (other == org.mitre.svmp.protocol.SVMPProtocol.TouchEvent.PointerCoords.getDefaultInstance()) return this;
          if (other.hasId()) {
            setId(other.getId());
          }
          if (other.hasX()) {
            setX(other.getX());
          }
          if (other.hasY()) {
            setY(other.getY());
          }
          return this;
        }
        
        public final boolean isInitialized() {
          if (!hasId()) {
            
            return false;
          }
          if (!hasX()) {
            
            return false;
          }
          if (!hasY()) {
            
            return false;
          }
          return true;
        }
        
        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          while (true) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                
                return this;
              default: {
                if (!parseUnknownField(input, extensionRegistry, tag)) {
                  
                  return this;
                }
                break;
              }
              case 8: {
                bitField0_ |= 0x00000001;
                id_ = input.readInt32();
                break;
              }
              case 21: {
                bitField0_ |= 0x00000002;
                x_ = input.readFloat();
                break;
              }
              case 29: {
                bitField0_ |= 0x00000004;
                y_ = input.readFloat();
                break;
              }
            }
          }
        }
        
        private int bitField0_;
        
        // required int32 id = 1;
        private int id_ ;
        public boolean hasId() {
          return ((bitField0_ & 0x00000001) == 0x00000001);
        }
        public int getId() {
          return id_;
        }
        public Builder setId(int value) {
          bitField0_ |= 0x00000001;
          id_ = value;
          
          return this;
        }
        public Builder clearId() {
          bitField0_ = (bitField0_ & ~0x00000001);
          id_ = 0;
          
          return this;
        }
        
        // required float x = 2;
        private float x_ ;
        public boolean hasX() {
          return ((bitField0_ & 0x00000002) == 0x00000002);
        }
        public float getX() {
          return x_;
        }
        public Builder setX(float value) {
          bitField0_ |= 0x00000002;
          x_ = value;
          
          return this;
        }
        public Builder clearX() {
          bitField0_ = (bitField0_ & ~0x00000002);
          x_ = 0F;
          
          return this;
        }
        
        // required float y = 3;
        private float y_ ;
        public boolean hasY() {
          return ((bitField0_ & 0x00000004) == 0x00000004);
        }
        public float getY() {
          return y_;
        }
        public Builder setY(float value) {
          bitField0_ |= 0x00000004;
          y_ = value;
          
          return this;
        }
        public Builder clearY() {
          bitField0_ = (bitField0_ & ~0x00000004);
          y_ = 0F;
          
          return this;
        }
        
        // @@protoc_insertion_point(builder_scope:svmp.TouchEvent.PointerCoords)
      }
      
      static {
        defaultInstance = new PointerCoords(true);
        defaultInstance.initFields();
      }
      
      // @@protoc_insertion_point(class_scope:svmp.TouchEvent.PointerCoords)
    }
    
    private int bitField0_;
    // required int32 action = 1;
    public static final int ACTION_FIELD_NUMBER = 1;
    private int action_;
    public boolean hasAction() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    public int getAction() {
      return action_;
    }
    
    // repeated .svmp.TouchEvent.PointerCoords items = 2;
    public static final int ITEMS_FIELD_NUMBER = 2;
    private java.util.List<org.mitre.svmp.protocol.SVMPProtocol.TouchEvent.PointerCoords> items_;
    public java.util.List<org.mitre.svmp.protocol.SVMPProtocol.TouchEvent.PointerCoords> getItemsList() {
      return items_;
    }
    public java.util.List<? extends org.mitre.svmp.protocol.SVMPProtocol.TouchEvent.PointerCoordsOrBuilder> 
        getItemsOrBuilderList() {
      return items_;
    }
    public int getItemsCount() {
      return items_.size();
    }
    public org.mitre.svmp.protocol.SVMPProtocol.TouchEvent.PointerCoords getItems(int index) {
      return items_.get(index);
    }
    public org.mitre.svmp.protocol.SVMPProtocol.TouchEvent.PointerCoordsOrBuilder getItemsOrBuilder(
        int index) {
      return items_.get(index);
    }
    
    private void initFields() {
      action_ = 0;
      items_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;
      
      if (!hasAction()) {
        memoizedIsInitialized = 0;
        return false;
      }
      for (int i = 0; i < getItemsCount(); i++) {
        if (!getItems(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, action_);
      }
      for (int i = 0; i < items_.size(); i++) {
        output.writeMessage(2, items_.get(i));
      }
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, action_);
      }
      for (int i = 0; i < items_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, items_.get(i));
      }
      memoizedSerializedSize = size;
      return size;
    }
    
    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }
    
    public static org.mitre.svmp.protocol.SVMPProtocol.TouchEvent parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.TouchEvent parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.TouchEvent parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.TouchEvent parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.TouchEvent parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.TouchEvent parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.TouchEvent parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.TouchEvent parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.TouchEvent parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.TouchEvent parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.mitre.svmp.protocol.SVMPProtocol.TouchEvent prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          org.mitre.svmp.protocol.SVMPProtocol.TouchEvent, Builder>
        implements org.mitre.svmp.protocol.SVMPProtocol.TouchEventOrBuilder {
      // Construct using org.mitre.svmp.protocol.SVMPProtocol.TouchEvent.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }
      
      private void maybeForceBuilderInitialization() {
      }
      private static Builder create() {
        return new Builder();
      }
      
      public Builder clear() {
        super.clear();
        action_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        items_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }
      
      public org.mitre.svmp.protocol.SVMPProtocol.TouchEvent getDefaultInstanceForType() {
        return org.mitre.svmp.protocol.SVMPProtocol.TouchEvent.getDefaultInstance();
      }
      
      public org.mitre.svmp.protocol.SVMPProtocol.TouchEvent build() {
        org.mitre.svmp.protocol.SVMPProtocol.TouchEvent result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }
      
      private org.mitre.svmp.protocol.SVMPProtocol.TouchEvent buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        org.mitre.svmp.protocol.SVMPProtocol.TouchEvent result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return result;
      }
      
      public org.mitre.svmp.protocol.SVMPProtocol.TouchEvent buildPartial() {
        org.mitre.svmp.protocol.SVMPProtocol.TouchEvent result = new org.mitre.svmp.protocol.SVMPProtocol.TouchEvent(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.action_ = action_;
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          items_ = java.util.Collections.unmodifiableList(items_);
          bitField0_ = (bitField0_ & ~0x00000002);
        }
        result.items_ = items_;
        result.bitField0_ = to_bitField0_;
        return result;
      }
      
      public Builder mergeFrom(org.mitre.svmp.protocol.SVMPProtocol.TouchEvent other) {
        if (other == org.mitre.svmp.protocol.SVMPProtocol.TouchEvent.getDefaultInstance()) return this;
        if (other.hasAction()) {
          setAction(other.getAction());
        }
        if (!other.items_.isEmpty()) {
          if (items_.isEmpty()) {
            items_ = other.items_;
            bitField0_ = (bitField0_ & ~0x00000002);
          } else {
            ensureItemsIsMutable();
            items_.addAll(other.items_);
          }
          
        }
        return this;
      }
      
      public final boolean isInitialized() {
        if (!hasAction()) {
          
          return false;
        }
        for (int i = 0; i < getItemsCount(); i++) {
          if (!getItems(i).isInitialized()) {
            
            return false;
          }
        }
        return true;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              
              return this;
            default: {
              if (!parseUnknownField(input, extensionRegistry, tag)) {
                
                return this;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              action_ = input.readInt32();
              break;
            }
            case 18: {
              org.mitre.svmp.protocol.SVMPProtocol.TouchEvent.PointerCoords.Builder subBuilder = org.mitre.svmp.protocol.SVMPProtocol.TouchEvent.PointerCoords.newBuilder();
              input.readMessage(subBuilder, extensionRegistry);
              addItems(subBuilder.buildPartial());
              break;
            }
          }
        }
      }
      
      private int bitField0_;
      
      // required int32 action = 1;
      private int action_ ;
      public boolean hasAction() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      public int getAction() {
        return action_;
      }
      public Builder setAction(int value) {
        bitField0_ |= 0x00000001;
        action_ = value;
        
        return this;
      }
      public Builder clearAction() {
        bitField0_ = (bitField0_ & ~0x00000001);
        action_ = 0;
        
        return this;
      }
      
      // repeated .svmp.TouchEvent.PointerCoords items = 2;
      private java.util.List<org.mitre.svmp.protocol.SVMPProtocol.TouchEvent.PointerCoords> items_ =
        java.util.Collections.emptyList();
      private void ensureItemsIsMutable() {
        if (!((bitField0_ & 0x00000002) == 0x00000002)) {
          items_ = new java.util.ArrayList<org.mitre.svmp.protocol.SVMPProtocol.TouchEvent.PointerCoords>(items_);
          bitField0_ |= 0x00000002;
         }
      }
      
      public java.util.List<org.mitre.svmp.protocol.SVMPProtocol.TouchEvent.PointerCoords> getItemsList() {
        return java.util.Collections.unmodifiableList(items_);
      }
      public int getItemsCount() {
        return items_.size();
      }
      public org.mitre.svmp.protocol.SVMPProtocol.TouchEvent.PointerCoords getItems(int index) {
        return items_.get(index);
      }
      public Builder setItems(
          int index, org.mitre.svmp.protocol.SVMPProtocol.TouchEvent.PointerCoords value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureItemsIsMutable();
        items_.set(index, value);
        
        return this;
      }
      public Builder setItems(
          int index, org.mitre.svmp.protocol.SVMPProtocol.TouchEvent.PointerCoords.Builder builderForValue) {
        ensureItemsIsMutable();
        items_.set(index, builderForValue.build());
        
        return this;
      }
      public Builder addItems(org.mitre.svmp.protocol.SVMPProtocol.TouchEvent.PointerCoords value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureItemsIsMutable();
        items_.add(value);
        
        return this;
      }
      public Builder addItems(
          int index, org.mitre.svmp.protocol.SVMPProtocol.TouchEvent.PointerCoords value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureItemsIsMutable();
        items_.add(index, value);
        
        return this;
      }
      public Builder addItems(
          org.mitre.svmp.protocol.SVMPProtocol.TouchEvent.PointerCoords.Builder builderForValue) {
        ensureItemsIsMutable();
        items_.add(builderForValue.build());
        
        return this;
      }
      public Builder addItems(
          int index, org.mitre.svmp.protocol.SVMPProtocol.TouchEvent.PointerCoords.Builder builderForValue) {
        ensureItemsIsMutable();
        items_.add(index, builderForValue.build());
        
        return this;
      }
      public Builder addAllItems(
          java.lang.Iterable<? extends org.mitre.svmp.protocol.SVMPProtocol.TouchEvent.PointerCoords> values) {
        ensureItemsIsMutable();
        super.addAll(values, items_);
        
        return this;
      }
      public Builder clearItems() {
        items_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        
        return this;
      }
      public Builder removeItems(int index) {
        ensureItemsIsMutable();
        items_.remove(index);
        
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:svmp.TouchEvent)
    }
    
    static {
      defaultInstance = new TouchEvent(true);
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:svmp.TouchEvent)
  }
  
  public interface ScreenInfoOrBuilder
      extends com.google.protobuf.MessageLiteOrBuilder {
    
    // required int32 x = 1;
    boolean hasX();
    int getX();
    
    // required int32 y = 2;
    boolean hasY();
    int getY();
  }
  public static final class ScreenInfo extends
      com.google.protobuf.GeneratedMessageLite
      implements ScreenInfoOrBuilder {
    // Use ScreenInfo.newBuilder() to construct.
    private ScreenInfo(Builder builder) {
      super(builder);
    }
    private ScreenInfo(boolean noInit) {}
    
    private static final ScreenInfo defaultInstance;
    public static ScreenInfo getDefaultInstance() {
      return defaultInstance;
    }
    
    public ScreenInfo getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    private int bitField0_;
    // required int32 x = 1;
    public static final int X_FIELD_NUMBER = 1;
    private int x_;
    public boolean hasX() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    public int getX() {
      return x_;
    }
    
    // required int32 y = 2;
    public static final int Y_FIELD_NUMBER = 2;
    private int y_;
    public boolean hasY() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    public int getY() {
      return y_;
    }
    
    private void initFields() {
      x_ = 0;
      y_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;
      
      if (!hasX()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasY()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, x_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(2, y_);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, x_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, y_);
      }
      memoizedSerializedSize = size;
      return size;
    }
    
    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }
    
    public static org.mitre.svmp.protocol.SVMPProtocol.ScreenInfo parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.ScreenInfo parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.ScreenInfo parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.ScreenInfo parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.ScreenInfo parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.ScreenInfo parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.ScreenInfo parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.ScreenInfo parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.ScreenInfo parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.ScreenInfo parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.mitre.svmp.protocol.SVMPProtocol.ScreenInfo prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          org.mitre.svmp.protocol.SVMPProtocol.ScreenInfo, Builder>
        implements org.mitre.svmp.protocol.SVMPProtocol.ScreenInfoOrBuilder {
      // Construct using org.mitre.svmp.protocol.SVMPProtocol.ScreenInfo.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }
      
      private void maybeForceBuilderInitialization() {
      }
      private static Builder create() {
        return new Builder();
      }
      
      public Builder clear() {
        super.clear();
        x_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        y_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }
      
      public org.mitre.svmp.protocol.SVMPProtocol.ScreenInfo getDefaultInstanceForType() {
        return org.mitre.svmp.protocol.SVMPProtocol.ScreenInfo.getDefaultInstance();
      }
      
      public org.mitre.svmp.protocol.SVMPProtocol.ScreenInfo build() {
        org.mitre.svmp.protocol.SVMPProtocol.ScreenInfo result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }
      
      private org.mitre.svmp.protocol.SVMPProtocol.ScreenInfo buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        org.mitre.svmp.protocol.SVMPProtocol.ScreenInfo result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return result;
      }
      
      public org.mitre.svmp.protocol.SVMPProtocol.ScreenInfo buildPartial() {
        org.mitre.svmp.protocol.SVMPProtocol.ScreenInfo result = new org.mitre.svmp.protocol.SVMPProtocol.ScreenInfo(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.x_ = x_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.y_ = y_;
        result.bitField0_ = to_bitField0_;
        return result;
      }
      
      public Builder mergeFrom(org.mitre.svmp.protocol.SVMPProtocol.ScreenInfo other) {
        if (other == org.mitre.svmp.protocol.SVMPProtocol.ScreenInfo.getDefaultInstance()) return this;
        if (other.hasX()) {
          setX(other.getX());
        }
        if (other.hasY()) {
          setY(other.getY());
        }
        return this;
      }
      
      public final boolean isInitialized() {
        if (!hasX()) {
          
          return false;
        }
        if (!hasY()) {
          
          return false;
        }
        return true;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              
              return this;
            default: {
              if (!parseUnknownField(input, extensionRegistry, tag)) {
                
                return this;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              x_ = input.readInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              y_ = input.readInt32();
              break;
            }
          }
        }
      }
      
      private int bitField0_;
      
      // required int32 x = 1;
      private int x_ ;
      public boolean hasX() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      public int getX() {
        return x_;
      }
      public Builder setX(int value) {
        bitField0_ |= 0x00000001;
        x_ = value;
        
        return this;
      }
      public Builder clearX() {
        bitField0_ = (bitField0_ & ~0x00000001);
        x_ = 0;
        
        return this;
      }
      
      // required int32 y = 2;
      private int y_ ;
      public boolean hasY() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      public int getY() {
        return y_;
      }
      public Builder setY(int value) {
        bitField0_ |= 0x00000002;
        y_ = value;
        
        return this;
      }
      public Builder clearY() {
        bitField0_ = (bitField0_ & ~0x00000002);
        y_ = 0;
        
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:svmp.ScreenInfo)
    }
    
    static {
      defaultInstance = new ScreenInfo(true);
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:svmp.ScreenInfo)
  }
  
  public interface SensorEventOrBuilder
      extends com.google.protobuf.MessageLiteOrBuilder {
    
    // required .svmp.SensorType type = 1;
    boolean hasType();
    org.mitre.svmp.protocol.SVMPProtocol.SensorType getType();
    
    // required int32 accuracy = 2;
    boolean hasAccuracy();
    int getAccuracy();
    
    // required int64 timestamp = 3;
    boolean hasTimestamp();
    long getTimestamp();
    
    // repeated float values = 4;
    java.util.List<java.lang.Float> getValuesList();
    int getValuesCount();
    float getValues(int index);
  }
  public static final class SensorEvent extends
      com.google.protobuf.GeneratedMessageLite
      implements SensorEventOrBuilder {
    // Use SensorEvent.newBuilder() to construct.
    private SensorEvent(Builder builder) {
      super(builder);
    }
    private SensorEvent(boolean noInit) {}
    
    private static final SensorEvent defaultInstance;
    public static SensorEvent getDefaultInstance() {
      return defaultInstance;
    }
    
    public SensorEvent getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    private int bitField0_;
    // required .svmp.SensorType type = 1;
    public static final int TYPE_FIELD_NUMBER = 1;
    private org.mitre.svmp.protocol.SVMPProtocol.SensorType type_;
    public boolean hasType() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    public org.mitre.svmp.protocol.SVMPProtocol.SensorType getType() {
      return type_;
    }
    
    // required int32 accuracy = 2;
    public static final int ACCURACY_FIELD_NUMBER = 2;
    private int accuracy_;
    public boolean hasAccuracy() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    public int getAccuracy() {
      return accuracy_;
    }
    
    // required int64 timestamp = 3;
    public static final int TIMESTAMP_FIELD_NUMBER = 3;
    private long timestamp_;
    public boolean hasTimestamp() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    public long getTimestamp() {
      return timestamp_;
    }
    
    // repeated float values = 4;
    public static final int VALUES_FIELD_NUMBER = 4;
    private java.util.List<java.lang.Float> values_;
    public java.util.List<java.lang.Float>
        getValuesList() {
      return values_;
    }
    public int getValuesCount() {
      return values_.size();
    }
    public float getValues(int index) {
      return values_.get(index);
    }
    
    private void initFields() {
      type_ = org.mitre.svmp.protocol.SVMPProtocol.SensorType.ACCELEROMETER;
      accuracy_ = 0;
      timestamp_ = 0L;
      values_ = java.util.Collections.emptyList();;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;
      
      if (!hasType()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasAccuracy()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasTimestamp()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeEnum(1, type_.getNumber());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(2, accuracy_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeInt64(3, timestamp_);
      }
      for (int i = 0; i < values_.size(); i++) {
        output.writeFloat(4, values_.get(i));
      }
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(1, type_.getNumber());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, accuracy_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(3, timestamp_);
      }
      {
        int dataSize = 0;
        dataSize = 4 * getValuesList().size();
        size += dataSize;
        size += 1 * getValuesList().size();
      }
      memoizedSerializedSize = size;
      return size;
    }
    
    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }
    
    public static org.mitre.svmp.protocol.SVMPProtocol.SensorEvent parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.SensorEvent parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.SensorEvent parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.SensorEvent parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.SensorEvent parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.SensorEvent parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.SensorEvent parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.SensorEvent parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.SensorEvent parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.SensorEvent parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.mitre.svmp.protocol.SVMPProtocol.SensorEvent prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          org.mitre.svmp.protocol.SVMPProtocol.SensorEvent, Builder>
        implements org.mitre.svmp.protocol.SVMPProtocol.SensorEventOrBuilder {
      // Construct using org.mitre.svmp.protocol.SVMPProtocol.SensorEvent.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }
      
      private void maybeForceBuilderInitialization() {
      }
      private static Builder create() {
        return new Builder();
      }
      
      public Builder clear() {
        super.clear();
        type_ = org.mitre.svmp.protocol.SVMPProtocol.SensorType.ACCELEROMETER;
        bitField0_ = (bitField0_ & ~0x00000001);
        accuracy_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        timestamp_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000004);
        values_ = java.util.Collections.emptyList();;
        bitField0_ = (bitField0_ & ~0x00000008);
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }
      
      public org.mitre.svmp.protocol.SVMPProtocol.SensorEvent getDefaultInstanceForType() {
        return org.mitre.svmp.protocol.SVMPProtocol.SensorEvent.getDefaultInstance();
      }
      
      public org.mitre.svmp.protocol.SVMPProtocol.SensorEvent build() {
        org.mitre.svmp.protocol.SVMPProtocol.SensorEvent result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }
      
      private org.mitre.svmp.protocol.SVMPProtocol.SensorEvent buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        org.mitre.svmp.protocol.SVMPProtocol.SensorEvent result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return result;
      }
      
      public org.mitre.svmp.protocol.SVMPProtocol.SensorEvent buildPartial() {
        org.mitre.svmp.protocol.SVMPProtocol.SensorEvent result = new org.mitre.svmp.protocol.SVMPProtocol.SensorEvent(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.type_ = type_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.accuracy_ = accuracy_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.timestamp_ = timestamp_;
        if (((bitField0_ & 0x00000008) == 0x00000008)) {
          values_ = java.util.Collections.unmodifiableList(values_);
          bitField0_ = (bitField0_ & ~0x00000008);
        }
        result.values_ = values_;
        result.bitField0_ = to_bitField0_;
        return result;
      }
      
      public Builder mergeFrom(org.mitre.svmp.protocol.SVMPProtocol.SensorEvent other) {
        if (other == org.mitre.svmp.protocol.SVMPProtocol.SensorEvent.getDefaultInstance()) return this;
        if (other.hasType()) {
          setType(other.getType());
        }
        if (other.hasAccuracy()) {
          setAccuracy(other.getAccuracy());
        }
        if (other.hasTimestamp()) {
          setTimestamp(other.getTimestamp());
        }
        if (!other.values_.isEmpty()) {
          if (values_.isEmpty()) {
            values_ = other.values_;
            bitField0_ = (bitField0_ & ~0x00000008);
          } else {
            ensureValuesIsMutable();
            values_.addAll(other.values_);
          }
          
        }
        return this;
      }
      
      public final boolean isInitialized() {
        if (!hasType()) {
          
          return false;
        }
        if (!hasAccuracy()) {
          
          return false;
        }
        if (!hasTimestamp()) {
          
          return false;
        }
        return true;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              
              return this;
            default: {
              if (!parseUnknownField(input, extensionRegistry, tag)) {
                
                return this;
              }
              break;
            }
            case 8: {
              int rawValue = input.readEnum();
              org.mitre.svmp.protocol.SVMPProtocol.SensorType value = org.mitre.svmp.protocol.SVMPProtocol.SensorType.valueOf(rawValue);
              if (value != null) {
                bitField0_ |= 0x00000001;
                type_ = value;
              }
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              accuracy_ = input.readInt32();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              timestamp_ = input.readInt64();
              break;
            }
            case 37: {
              ensureValuesIsMutable();
              values_.add(input.readFloat());
              break;
            }
            case 34: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              while (input.getBytesUntilLimit() > 0) {
                addValues(input.readFloat());
              }
              input.popLimit(limit);
              break;
            }
          }
        }
      }
      
      private int bitField0_;
      
      // required .svmp.SensorType type = 1;
      private org.mitre.svmp.protocol.SVMPProtocol.SensorType type_ = org.mitre.svmp.protocol.SVMPProtocol.SensorType.ACCELEROMETER;
      public boolean hasType() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      public org.mitre.svmp.protocol.SVMPProtocol.SensorType getType() {
        return type_;
      }
      public Builder setType(org.mitre.svmp.protocol.SVMPProtocol.SensorType value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000001;
        type_ = value;
        
        return this;
      }
      public Builder clearType() {
        bitField0_ = (bitField0_ & ~0x00000001);
        type_ = org.mitre.svmp.protocol.SVMPProtocol.SensorType.ACCELEROMETER;
        
        return this;
      }
      
      // required int32 accuracy = 2;
      private int accuracy_ ;
      public boolean hasAccuracy() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      public int getAccuracy() {
        return accuracy_;
      }
      public Builder setAccuracy(int value) {
        bitField0_ |= 0x00000002;
        accuracy_ = value;
        
        return this;
      }
      public Builder clearAccuracy() {
        bitField0_ = (bitField0_ & ~0x00000002);
        accuracy_ = 0;
        
        return this;
      }
      
      // required int64 timestamp = 3;
      private long timestamp_ ;
      public boolean hasTimestamp() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      public long getTimestamp() {
        return timestamp_;
      }
      public Builder setTimestamp(long value) {
        bitField0_ |= 0x00000004;
        timestamp_ = value;
        
        return this;
      }
      public Builder clearTimestamp() {
        bitField0_ = (bitField0_ & ~0x00000004);
        timestamp_ = 0L;
        
        return this;
      }
      
      // repeated float values = 4;
      private java.util.List<java.lang.Float> values_ = java.util.Collections.emptyList();;
      private void ensureValuesIsMutable() {
        if (!((bitField0_ & 0x00000008) == 0x00000008)) {
          values_ = new java.util.ArrayList<java.lang.Float>(values_);
          bitField0_ |= 0x00000008;
         }
      }
      public java.util.List<java.lang.Float>
          getValuesList() {
        return java.util.Collections.unmodifiableList(values_);
      }
      public int getValuesCount() {
        return values_.size();
      }
      public float getValues(int index) {
        return values_.get(index);
      }
      public Builder setValues(
          int index, float value) {
        ensureValuesIsMutable();
        values_.set(index, value);
        
        return this;
      }
      public Builder addValues(float value) {
        ensureValuesIsMutable();
        values_.add(value);
        
        return this;
      }
      public Builder addAllValues(
          java.lang.Iterable<? extends java.lang.Float> values) {
        ensureValuesIsMutable();
        super.addAll(values, values_);
        
        return this;
      }
      public Builder clearValues() {
        values_ = java.util.Collections.emptyList();;
        bitField0_ = (bitField0_ & ~0x00000008);
        
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:svmp.SensorEvent)
    }
    
    static {
      defaultInstance = new SensorEvent(true);
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:svmp.SensorEvent)
  }
  
  public interface SensorSubscribeOrBuilder
      extends com.google.protobuf.MessageLiteOrBuilder {
    
    // required .svmp.SensorType type = 1;
    boolean hasType();
    org.mitre.svmp.protocol.SVMPProtocol.SensorType getType();
    
    // optional int32 frequency = 2;
    boolean hasFrequency();
    int getFrequency();
  }
  public static final class SensorSubscribe extends
      com.google.protobuf.GeneratedMessageLite
      implements SensorSubscribeOrBuilder {
    // Use SensorSubscribe.newBuilder() to construct.
    private SensorSubscribe(Builder builder) {
      super(builder);
    }
    private SensorSubscribe(boolean noInit) {}
    
    private static final SensorSubscribe defaultInstance;
    public static SensorSubscribe getDefaultInstance() {
      return defaultInstance;
    }
    
    public SensorSubscribe getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    private int bitField0_;
    // required .svmp.SensorType type = 1;
    public static final int TYPE_FIELD_NUMBER = 1;
    private org.mitre.svmp.protocol.SVMPProtocol.SensorType type_;
    public boolean hasType() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    public org.mitre.svmp.protocol.SVMPProtocol.SensorType getType() {
      return type_;
    }
    
    // optional int32 frequency = 2;
    public static final int FREQUENCY_FIELD_NUMBER = 2;
    private int frequency_;
    public boolean hasFrequency() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    public int getFrequency() {
      return frequency_;
    }
    
    private void initFields() {
      type_ = org.mitre.svmp.protocol.SVMPProtocol.SensorType.ACCELEROMETER;
      frequency_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;
      
      if (!hasType()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeEnum(1, type_.getNumber());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(2, frequency_);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(1, type_.getNumber());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, frequency_);
      }
      memoizedSerializedSize = size;
      return size;
    }
    
    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }
    
    public static org.mitre.svmp.protocol.SVMPProtocol.SensorSubscribe parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.SensorSubscribe parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.SensorSubscribe parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.SensorSubscribe parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.SensorSubscribe parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.SensorSubscribe parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.SensorSubscribe parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.SensorSubscribe parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.SensorSubscribe parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.SensorSubscribe parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.mitre.svmp.protocol.SVMPProtocol.SensorSubscribe prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          org.mitre.svmp.protocol.SVMPProtocol.SensorSubscribe, Builder>
        implements org.mitre.svmp.protocol.SVMPProtocol.SensorSubscribeOrBuilder {
      // Construct using org.mitre.svmp.protocol.SVMPProtocol.SensorSubscribe.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }
      
      private void maybeForceBuilderInitialization() {
      }
      private static Builder create() {
        return new Builder();
      }
      
      public Builder clear() {
        super.clear();
        type_ = org.mitre.svmp.protocol.SVMPProtocol.SensorType.ACCELEROMETER;
        bitField0_ = (bitField0_ & ~0x00000001);
        frequency_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }
      
      public org.mitre.svmp.protocol.SVMPProtocol.SensorSubscribe getDefaultInstanceForType() {
        return org.mitre.svmp.protocol.SVMPProtocol.SensorSubscribe.getDefaultInstance();
      }
      
      public org.mitre.svmp.protocol.SVMPProtocol.SensorSubscribe build() {
        org.mitre.svmp.protocol.SVMPProtocol.SensorSubscribe result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }
      
      private org.mitre.svmp.protocol.SVMPProtocol.SensorSubscribe buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        org.mitre.svmp.protocol.SVMPProtocol.SensorSubscribe result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return result;
      }
      
      public org.mitre.svmp.protocol.SVMPProtocol.SensorSubscribe buildPartial() {
        org.mitre.svmp.protocol.SVMPProtocol.SensorSubscribe result = new org.mitre.svmp.protocol.SVMPProtocol.SensorSubscribe(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.type_ = type_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.frequency_ = frequency_;
        result.bitField0_ = to_bitField0_;
        return result;
      }
      
      public Builder mergeFrom(org.mitre.svmp.protocol.SVMPProtocol.SensorSubscribe other) {
        if (other == org.mitre.svmp.protocol.SVMPProtocol.SensorSubscribe.getDefaultInstance()) return this;
        if (other.hasType()) {
          setType(other.getType());
        }
        if (other.hasFrequency()) {
          setFrequency(other.getFrequency());
        }
        return this;
      }
      
      public final boolean isInitialized() {
        if (!hasType()) {
          
          return false;
        }
        return true;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              
              return this;
            default: {
              if (!parseUnknownField(input, extensionRegistry, tag)) {
                
                return this;
              }
              break;
            }
            case 8: {
              int rawValue = input.readEnum();
              org.mitre.svmp.protocol.SVMPProtocol.SensorType value = org.mitre.svmp.protocol.SVMPProtocol.SensorType.valueOf(rawValue);
              if (value != null) {
                bitField0_ |= 0x00000001;
                type_ = value;
              }
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              frequency_ = input.readInt32();
              break;
            }
          }
        }
      }
      
      private int bitField0_;
      
      // required .svmp.SensorType type = 1;
      private org.mitre.svmp.protocol.SVMPProtocol.SensorType type_ = org.mitre.svmp.protocol.SVMPProtocol.SensorType.ACCELEROMETER;
      public boolean hasType() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      public org.mitre.svmp.protocol.SVMPProtocol.SensorType getType() {
        return type_;
      }
      public Builder setType(org.mitre.svmp.protocol.SVMPProtocol.SensorType value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000001;
        type_ = value;
        
        return this;
      }
      public Builder clearType() {
        bitField0_ = (bitField0_ & ~0x00000001);
        type_ = org.mitre.svmp.protocol.SVMPProtocol.SensorType.ACCELEROMETER;
        
        return this;
      }
      
      // optional int32 frequency = 2;
      private int frequency_ ;
      public boolean hasFrequency() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      public int getFrequency() {
        return frequency_;
      }
      public Builder setFrequency(int value) {
        bitField0_ |= 0x00000002;
        frequency_ = value;
        
        return this;
      }
      public Builder clearFrequency() {
        bitField0_ = (bitField0_ & ~0x00000002);
        frequency_ = 0;
        
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:svmp.SensorSubscribe)
    }
    
    static {
      defaultInstance = new SensorSubscribe(true);
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:svmp.SensorSubscribe)
  }
  
  public interface SensorUnsubscribeOrBuilder
      extends com.google.protobuf.MessageLiteOrBuilder {
    
    // required .svmp.SensorType type = 1;
    boolean hasType();
    org.mitre.svmp.protocol.SVMPProtocol.SensorType getType();
  }
  public static final class SensorUnsubscribe extends
      com.google.protobuf.GeneratedMessageLite
      implements SensorUnsubscribeOrBuilder {
    // Use SensorUnsubscribe.newBuilder() to construct.
    private SensorUnsubscribe(Builder builder) {
      super(builder);
    }
    private SensorUnsubscribe(boolean noInit) {}
    
    private static final SensorUnsubscribe defaultInstance;
    public static SensorUnsubscribe getDefaultInstance() {
      return defaultInstance;
    }
    
    public SensorUnsubscribe getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    private int bitField0_;
    // required .svmp.SensorType type = 1;
    public static final int TYPE_FIELD_NUMBER = 1;
    private org.mitre.svmp.protocol.SVMPProtocol.SensorType type_;
    public boolean hasType() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    public org.mitre.svmp.protocol.SVMPProtocol.SensorType getType() {
      return type_;
    }
    
    private void initFields() {
      type_ = org.mitre.svmp.protocol.SVMPProtocol.SensorType.ACCELEROMETER;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;
      
      if (!hasType()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeEnum(1, type_.getNumber());
      }
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(1, type_.getNumber());
      }
      memoizedSerializedSize = size;
      return size;
    }
    
    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }
    
    public static org.mitre.svmp.protocol.SVMPProtocol.SensorUnsubscribe parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.SensorUnsubscribe parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.SensorUnsubscribe parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.SensorUnsubscribe parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.SensorUnsubscribe parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.SensorUnsubscribe parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.SensorUnsubscribe parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.SensorUnsubscribe parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.SensorUnsubscribe parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.SensorUnsubscribe parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.mitre.svmp.protocol.SVMPProtocol.SensorUnsubscribe prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          org.mitre.svmp.protocol.SVMPProtocol.SensorUnsubscribe, Builder>
        implements org.mitre.svmp.protocol.SVMPProtocol.SensorUnsubscribeOrBuilder {
      // Construct using org.mitre.svmp.protocol.SVMPProtocol.SensorUnsubscribe.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }
      
      private void maybeForceBuilderInitialization() {
      }
      private static Builder create() {
        return new Builder();
      }
      
      public Builder clear() {
        super.clear();
        type_ = org.mitre.svmp.protocol.SVMPProtocol.SensorType.ACCELEROMETER;
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }
      
      public org.mitre.svmp.protocol.SVMPProtocol.SensorUnsubscribe getDefaultInstanceForType() {
        return org.mitre.svmp.protocol.SVMPProtocol.SensorUnsubscribe.getDefaultInstance();
      }
      
      public org.mitre.svmp.protocol.SVMPProtocol.SensorUnsubscribe build() {
        org.mitre.svmp.protocol.SVMPProtocol.SensorUnsubscribe result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }
      
      private org.mitre.svmp.protocol.SVMPProtocol.SensorUnsubscribe buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        org.mitre.svmp.protocol.SVMPProtocol.SensorUnsubscribe result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return result;
      }
      
      public org.mitre.svmp.protocol.SVMPProtocol.SensorUnsubscribe buildPartial() {
        org.mitre.svmp.protocol.SVMPProtocol.SensorUnsubscribe result = new org.mitre.svmp.protocol.SVMPProtocol.SensorUnsubscribe(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.type_ = type_;
        result.bitField0_ = to_bitField0_;
        return result;
      }
      
      public Builder mergeFrom(org.mitre.svmp.protocol.SVMPProtocol.SensorUnsubscribe other) {
        if (other == org.mitre.svmp.protocol.SVMPProtocol.SensorUnsubscribe.getDefaultInstance()) return this;
        if (other.hasType()) {
          setType(other.getType());
        }
        return this;
      }
      
      public final boolean isInitialized() {
        if (!hasType()) {
          
          return false;
        }
        return true;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              
              return this;
            default: {
              if (!parseUnknownField(input, extensionRegistry, tag)) {
                
                return this;
              }
              break;
            }
            case 8: {
              int rawValue = input.readEnum();
              org.mitre.svmp.protocol.SVMPProtocol.SensorType value = org.mitre.svmp.protocol.SVMPProtocol.SensorType.valueOf(rawValue);
              if (value != null) {
                bitField0_ |= 0x00000001;
                type_ = value;
              }
              break;
            }
          }
        }
      }
      
      private int bitField0_;
      
      // required .svmp.SensorType type = 1;
      private org.mitre.svmp.protocol.SVMPProtocol.SensorType type_ = org.mitre.svmp.protocol.SVMPProtocol.SensorType.ACCELEROMETER;
      public boolean hasType() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      public org.mitre.svmp.protocol.SVMPProtocol.SensorType getType() {
        return type_;
      }
      public Builder setType(org.mitre.svmp.protocol.SVMPProtocol.SensorType value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000001;
        type_ = value;
        
        return this;
      }
      public Builder clearType() {
        bitField0_ = (bitField0_ & ~0x00000001);
        type_ = org.mitre.svmp.protocol.SVMPProtocol.SensorType.ACCELEROMETER;
        
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:svmp.SensorUnsubscribe)
    }
    
    static {
      defaultInstance = new SensorUnsubscribe(true);
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:svmp.SensorUnsubscribe)
  }
  
  public interface LocationUpdateOrBuilder
      extends com.google.protobuf.MessageLiteOrBuilder {
  }
  public static final class LocationUpdate extends
      com.google.protobuf.GeneratedMessageLite
      implements LocationUpdateOrBuilder {
    // Use LocationUpdate.newBuilder() to construct.
    private LocationUpdate(Builder builder) {
      super(builder);
    }
    private LocationUpdate(boolean noInit) {}
    
    private static final LocationUpdate defaultInstance;
    public static LocationUpdate getDefaultInstance() {
      return defaultInstance;
    }
    
    public LocationUpdate getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    private void initFields() {
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;
      
      memoizedIsInitialized = 1;
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      memoizedSerializedSize = size;
      return size;
    }
    
    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }
    
    public static org.mitre.svmp.protocol.SVMPProtocol.LocationUpdate parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.LocationUpdate parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.LocationUpdate parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.LocationUpdate parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.LocationUpdate parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.LocationUpdate parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.LocationUpdate parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.LocationUpdate parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.LocationUpdate parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.LocationUpdate parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.mitre.svmp.protocol.SVMPProtocol.LocationUpdate prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          org.mitre.svmp.protocol.SVMPProtocol.LocationUpdate, Builder>
        implements org.mitre.svmp.protocol.SVMPProtocol.LocationUpdateOrBuilder {
      // Construct using org.mitre.svmp.protocol.SVMPProtocol.LocationUpdate.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }
      
      private void maybeForceBuilderInitialization() {
      }
      private static Builder create() {
        return new Builder();
      }
      
      public Builder clear() {
        super.clear();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }
      
      public org.mitre.svmp.protocol.SVMPProtocol.LocationUpdate getDefaultInstanceForType() {
        return org.mitre.svmp.protocol.SVMPProtocol.LocationUpdate.getDefaultInstance();
      }
      
      public org.mitre.svmp.protocol.SVMPProtocol.LocationUpdate build() {
        org.mitre.svmp.protocol.SVMPProtocol.LocationUpdate result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }
      
      private org.mitre.svmp.protocol.SVMPProtocol.LocationUpdate buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        org.mitre.svmp.protocol.SVMPProtocol.LocationUpdate result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return result;
      }
      
      public org.mitre.svmp.protocol.SVMPProtocol.LocationUpdate buildPartial() {
        org.mitre.svmp.protocol.SVMPProtocol.LocationUpdate result = new org.mitre.svmp.protocol.SVMPProtocol.LocationUpdate(this);
        return result;
      }
      
      public Builder mergeFrom(org.mitre.svmp.protocol.SVMPProtocol.LocationUpdate other) {
        if (other == org.mitre.svmp.protocol.SVMPProtocol.LocationUpdate.getDefaultInstance()) return this;
        return this;
      }
      
      public final boolean isInitialized() {
        return true;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              
              return this;
            default: {
              if (!parseUnknownField(input, extensionRegistry, tag)) {
                
                return this;
              }
              break;
            }
          }
        }
      }
      
      
      // @@protoc_insertion_point(builder_scope:svmp.LocationUpdate)
    }
    
    static {
      defaultInstance = new LocationUpdate(true);
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:svmp.LocationUpdate)
  }
  
  public interface LocationSubscribeOrBuilder
      extends com.google.protobuf.MessageLiteOrBuilder {
  }
  public static final class LocationSubscribe extends
      com.google.protobuf.GeneratedMessageLite
      implements LocationSubscribeOrBuilder {
    // Use LocationSubscribe.newBuilder() to construct.
    private LocationSubscribe(Builder builder) {
      super(builder);
    }
    private LocationSubscribe(boolean noInit) {}
    
    private static final LocationSubscribe defaultInstance;
    public static LocationSubscribe getDefaultInstance() {
      return defaultInstance;
    }
    
    public LocationSubscribe getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    private void initFields() {
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;
      
      memoizedIsInitialized = 1;
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      memoizedSerializedSize = size;
      return size;
    }
    
    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }
    
    public static org.mitre.svmp.protocol.SVMPProtocol.LocationSubscribe parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.LocationSubscribe parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.LocationSubscribe parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.LocationSubscribe parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.LocationSubscribe parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.LocationSubscribe parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.LocationSubscribe parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.LocationSubscribe parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.LocationSubscribe parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.LocationSubscribe parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.mitre.svmp.protocol.SVMPProtocol.LocationSubscribe prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          org.mitre.svmp.protocol.SVMPProtocol.LocationSubscribe, Builder>
        implements org.mitre.svmp.protocol.SVMPProtocol.LocationSubscribeOrBuilder {
      // Construct using org.mitre.svmp.protocol.SVMPProtocol.LocationSubscribe.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }
      
      private void maybeForceBuilderInitialization() {
      }
      private static Builder create() {
        return new Builder();
      }
      
      public Builder clear() {
        super.clear();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }
      
      public org.mitre.svmp.protocol.SVMPProtocol.LocationSubscribe getDefaultInstanceForType() {
        return org.mitre.svmp.protocol.SVMPProtocol.LocationSubscribe.getDefaultInstance();
      }
      
      public org.mitre.svmp.protocol.SVMPProtocol.LocationSubscribe build() {
        org.mitre.svmp.protocol.SVMPProtocol.LocationSubscribe result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }
      
      private org.mitre.svmp.protocol.SVMPProtocol.LocationSubscribe buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        org.mitre.svmp.protocol.SVMPProtocol.LocationSubscribe result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return result;
      }
      
      public org.mitre.svmp.protocol.SVMPProtocol.LocationSubscribe buildPartial() {
        org.mitre.svmp.protocol.SVMPProtocol.LocationSubscribe result = new org.mitre.svmp.protocol.SVMPProtocol.LocationSubscribe(this);
        return result;
      }
      
      public Builder mergeFrom(org.mitre.svmp.protocol.SVMPProtocol.LocationSubscribe other) {
        if (other == org.mitre.svmp.protocol.SVMPProtocol.LocationSubscribe.getDefaultInstance()) return this;
        return this;
      }
      
      public final boolean isInitialized() {
        return true;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              
              return this;
            default: {
              if (!parseUnknownField(input, extensionRegistry, tag)) {
                
                return this;
              }
              break;
            }
          }
        }
      }
      
      
      // @@protoc_insertion_point(builder_scope:svmp.LocationSubscribe)
    }
    
    static {
      defaultInstance = new LocationSubscribe(true);
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:svmp.LocationSubscribe)
  }
  
  public interface AuthenticationOrBuilder
      extends com.google.protobuf.MessageLiteOrBuilder {
    
    // required string un = 1;
    boolean hasUn();
    String getUn();
    
    // required string pw = 2;
    boolean hasPw();
    String getPw();
  }
  public static final class Authentication extends
      com.google.protobuf.GeneratedMessageLite
      implements AuthenticationOrBuilder {
    // Use Authentication.newBuilder() to construct.
    private Authentication(Builder builder) {
      super(builder);
    }
    private Authentication(boolean noInit) {}
    
    private static final Authentication defaultInstance;
    public static Authentication getDefaultInstance() {
      return defaultInstance;
    }
    
    public Authentication getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    private int bitField0_;
    // required string un = 1;
    public static final int UN_FIELD_NUMBER = 1;
    private java.lang.Object un_;
    public boolean hasUn() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    public String getUn() {
      java.lang.Object ref = un_;
      if (ref instanceof String) {
        return (String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        String s = bs.toStringUtf8();
        if (com.google.protobuf.Internal.isValidUtf8(bs)) {
          un_ = s;
        }
        return s;
      }
    }
    private com.google.protobuf.ByteString getUnBytes() {
      java.lang.Object ref = un_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8((String) ref);
        un_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    
    // required string pw = 2;
    public static final int PW_FIELD_NUMBER = 2;
    private java.lang.Object pw_;
    public boolean hasPw() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    public String getPw() {
      java.lang.Object ref = pw_;
      if (ref instanceof String) {
        return (String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        String s = bs.toStringUtf8();
        if (com.google.protobuf.Internal.isValidUtf8(bs)) {
          pw_ = s;
        }
        return s;
      }
    }
    private com.google.protobuf.ByteString getPwBytes() {
      java.lang.Object ref = pw_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8((String) ref);
        pw_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    
    private void initFields() {
      un_ = "";
      pw_ = "";
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;
      
      if (!hasUn()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasPw()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeBytes(1, getUnBytes());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeBytes(2, getPwBytes());
      }
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(1, getUnBytes());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(2, getPwBytes());
      }
      memoizedSerializedSize = size;
      return size;
    }
    
    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }
    
    public static org.mitre.svmp.protocol.SVMPProtocol.Authentication parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.Authentication parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.Authentication parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.Authentication parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.Authentication parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.Authentication parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.Authentication parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.Authentication parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.Authentication parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.Authentication parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.mitre.svmp.protocol.SVMPProtocol.Authentication prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          org.mitre.svmp.protocol.SVMPProtocol.Authentication, Builder>
        implements org.mitre.svmp.protocol.SVMPProtocol.AuthenticationOrBuilder {
      // Construct using org.mitre.svmp.protocol.SVMPProtocol.Authentication.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }
      
      private void maybeForceBuilderInitialization() {
      }
      private static Builder create() {
        return new Builder();
      }
      
      public Builder clear() {
        super.clear();
        un_ = "";
        bitField0_ = (bitField0_ & ~0x00000001);
        pw_ = "";
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }
      
      public org.mitre.svmp.protocol.SVMPProtocol.Authentication getDefaultInstanceForType() {
        return org.mitre.svmp.protocol.SVMPProtocol.Authentication.getDefaultInstance();
      }
      
      public org.mitre.svmp.protocol.SVMPProtocol.Authentication build() {
        org.mitre.svmp.protocol.SVMPProtocol.Authentication result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }
      
      private org.mitre.svmp.protocol.SVMPProtocol.Authentication buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        org.mitre.svmp.protocol.SVMPProtocol.Authentication result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return result;
      }
      
      public org.mitre.svmp.protocol.SVMPProtocol.Authentication buildPartial() {
        org.mitre.svmp.protocol.SVMPProtocol.Authentication result = new org.mitre.svmp.protocol.SVMPProtocol.Authentication(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.un_ = un_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.pw_ = pw_;
        result.bitField0_ = to_bitField0_;
        return result;
      }
      
      public Builder mergeFrom(org.mitre.svmp.protocol.SVMPProtocol.Authentication other) {
        if (other == org.mitre.svmp.protocol.SVMPProtocol.Authentication.getDefaultInstance()) return this;
        if (other.hasUn()) {
          setUn(other.getUn());
        }
        if (other.hasPw()) {
          setPw(other.getPw());
        }
        return this;
      }
      
      public final boolean isInitialized() {
        if (!hasUn()) {
          
          return false;
        }
        if (!hasPw()) {
          
          return false;
        }
        return true;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              
              return this;
            default: {
              if (!parseUnknownField(input, extensionRegistry, tag)) {
                
                return this;
              }
              break;
            }
            case 10: {
              bitField0_ |= 0x00000001;
              un_ = input.readBytes();
              break;
            }
            case 18: {
              bitField0_ |= 0x00000002;
              pw_ = input.readBytes();
              break;
            }
          }
        }
      }
      
      private int bitField0_;
      
      // required string un = 1;
      private java.lang.Object un_ = "";
      public boolean hasUn() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      public String getUn() {
        java.lang.Object ref = un_;
        if (!(ref instanceof String)) {
          String s = ((com.google.protobuf.ByteString) ref).toStringUtf8();
          un_ = s;
          return s;
        } else {
          return (String) ref;
        }
      }
      public Builder setUn(String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        un_ = value;
        
        return this;
      }
      public Builder clearUn() {
        bitField0_ = (bitField0_ & ~0x00000001);
        un_ = getDefaultInstance().getUn();
        
        return this;
      }
      void setUn(com.google.protobuf.ByteString value) {
        bitField0_ |= 0x00000001;
        un_ = value;
        
      }
      
      // required string pw = 2;
      private java.lang.Object pw_ = "";
      public boolean hasPw() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      public String getPw() {
        java.lang.Object ref = pw_;
        if (!(ref instanceof String)) {
          String s = ((com.google.protobuf.ByteString) ref).toStringUtf8();
          pw_ = s;
          return s;
        } else {
          return (String) ref;
        }
      }
      public Builder setPw(String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        pw_ = value;
        
        return this;
      }
      public Builder clearPw() {
        bitField0_ = (bitField0_ & ~0x00000002);
        pw_ = getDefaultInstance().getPw();
        
        return this;
      }
      void setPw(com.google.protobuf.ByteString value) {
        bitField0_ |= 0x00000002;
        pw_ = value;
        
      }
      
      // @@protoc_insertion_point(builder_scope:svmp.Authentication)
    }
    
    static {
      defaultInstance = new Authentication(true);
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:svmp.Authentication)
  }
  
  public interface VideoStreamInfoOrBuilder
      extends com.google.protobuf.MessageLiteOrBuilder {
  }
  public static final class VideoStreamInfo extends
      com.google.protobuf.GeneratedMessageLite
      implements VideoStreamInfoOrBuilder {
    // Use VideoStreamInfo.newBuilder() to construct.
    private VideoStreamInfo(Builder builder) {
      super(builder);
    }
    private VideoStreamInfo(boolean noInit) {}
    
    private static final VideoStreamInfo defaultInstance;
    public static VideoStreamInfo getDefaultInstance() {
      return defaultInstance;
    }
    
    public VideoStreamInfo getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    private void initFields() {
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;
      
      memoizedIsInitialized = 1;
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      memoizedSerializedSize = size;
      return size;
    }
    
    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }
    
    public static org.mitre.svmp.protocol.SVMPProtocol.VideoStreamInfo parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.VideoStreamInfo parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.VideoStreamInfo parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.VideoStreamInfo parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.VideoStreamInfo parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.VideoStreamInfo parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.VideoStreamInfo parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.VideoStreamInfo parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.VideoStreamInfo parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.VideoStreamInfo parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.mitre.svmp.protocol.SVMPProtocol.VideoStreamInfo prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          org.mitre.svmp.protocol.SVMPProtocol.VideoStreamInfo, Builder>
        implements org.mitre.svmp.protocol.SVMPProtocol.VideoStreamInfoOrBuilder {
      // Construct using org.mitre.svmp.protocol.SVMPProtocol.VideoStreamInfo.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }
      
      private void maybeForceBuilderInitialization() {
      }
      private static Builder create() {
        return new Builder();
      }
      
      public Builder clear() {
        super.clear();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }
      
      public org.mitre.svmp.protocol.SVMPProtocol.VideoStreamInfo getDefaultInstanceForType() {
        return org.mitre.svmp.protocol.SVMPProtocol.VideoStreamInfo.getDefaultInstance();
      }
      
      public org.mitre.svmp.protocol.SVMPProtocol.VideoStreamInfo build() {
        org.mitre.svmp.protocol.SVMPProtocol.VideoStreamInfo result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }
      
      private org.mitre.svmp.protocol.SVMPProtocol.VideoStreamInfo buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        org.mitre.svmp.protocol.SVMPProtocol.VideoStreamInfo result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return result;
      }
      
      public org.mitre.svmp.protocol.SVMPProtocol.VideoStreamInfo buildPartial() {
        org.mitre.svmp.protocol.SVMPProtocol.VideoStreamInfo result = new org.mitre.svmp.protocol.SVMPProtocol.VideoStreamInfo(this);
        return result;
      }
      
      public Builder mergeFrom(org.mitre.svmp.protocol.SVMPProtocol.VideoStreamInfo other) {
        if (other == org.mitre.svmp.protocol.SVMPProtocol.VideoStreamInfo.getDefaultInstance()) return this;
        return this;
      }
      
      public final boolean isInitialized() {
        return true;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              
              return this;
            default: {
              if (!parseUnknownField(input, extensionRegistry, tag)) {
                
                return this;
              }
              break;
            }
          }
        }
      }
      
      
      // @@protoc_insertion_point(builder_scope:svmp.VideoStreamInfo)
    }
    
    static {
      defaultInstance = new VideoStreamInfo(true);
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:svmp.VideoStreamInfo)
  }
  
  
  static {
  }
  
  // @@protoc_insertion_point(outer_class_scope)
}
