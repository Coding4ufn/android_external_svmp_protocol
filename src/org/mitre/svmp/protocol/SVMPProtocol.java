// Generated by the protocol buffer compiler.  DO NOT EDIT!

package org.mitre.svmp.protocol;

public final class SVMPProtocol {
  private SVMPProtocol() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }
  public enum IntentAction
      implements com.google.protobuf.Internal.EnumLite {
    ACTION_VIEW(0, 1),
    ACTION_DIAL(1, 2),
    ;
    
    
    public final int getNumber() { return value; }
    
    public static IntentAction valueOf(int value) {
      switch (value) {
        case 1: return ACTION_VIEW;
        case 2: return ACTION_DIAL;
        default: return null;
      }
    }
    
    public static com.google.protobuf.Internal.EnumLiteMap<IntentAction>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<IntentAction>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<IntentAction>() {
            public IntentAction findValueByNumber(int number) {
              return IntentAction.valueOf(number)
    ;        }
          };
    
    private final int index;
    private final int value;
    private IntentAction(int index, int value) {
      this.index = index;
      this.value = value;
    }
  }
  
  public enum SensorType
      implements com.google.protobuf.Internal.EnumLite {
    ACCELEROMETER(0, 1),
    MAGNETIC_FIELD(1, 2),
    ORIENTATION(2, 3),
    GYROSCOPE(3, 4),
    LIGHT(4, 5),
    PRESSURE(5, 6),
    TEMPERATURE(6, 7),
    PROXIMITY(7, 8),
    GRAVITY(8, 9),
    LINEAR_ACCELERATION(9, 10),
    ROTATION_VECTOR(10, 11),
    RELATIVE_HUMIDITY(11, 12),
    AMBIENT_TEMPERATURE(12, 13),
    ;
    
    
    public final int getNumber() { return value; }
    
    public static SensorType valueOf(int value) {
      switch (value) {
        case 1: return ACCELEROMETER;
        case 2: return MAGNETIC_FIELD;
        case 3: return ORIENTATION;
        case 4: return GYROSCOPE;
        case 5: return LIGHT;
        case 6: return PRESSURE;
        case 7: return TEMPERATURE;
        case 8: return PROXIMITY;
        case 9: return GRAVITY;
        case 10: return LINEAR_ACCELERATION;
        case 11: return ROTATION_VECTOR;
        case 12: return RELATIVE_HUMIDITY;
        case 13: return AMBIENT_TEMPERATURE;
        default: return null;
      }
    }
    
    public static com.google.protobuf.Internal.EnumLiteMap<SensorType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<SensorType>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<SensorType>() {
            public SensorType findValueByNumber(int number) {
              return SensorType.valueOf(number)
    ;        }
          };
    
    private final int index;
    private final int value;
    private SensorType(int index, int value) {
      this.index = index;
      this.value = value;
    }
  }
  
  public static final class Request extends
      com.google.protobuf.GeneratedMessageLite {
    // Use Request.newBuilder() to construct.
    private Request() {}
    
    private static final Request defaultInstance = new Request();
    public static Request getDefaultInstance() {
      return defaultInstance;
    }
    
    public Request getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public enum RequestType
        implements com.google.protobuf.Internal.EnumLite {
      USERAUTH(0, 0),
      VIDEO_PARAMS(1, 1),
      TOUCHEVENT(2, 2),
      SENSOREVENT(3, 3),
      LOCATION(4, 4),
      INTENT(5, 5),
      SCREENINFO(6, 6),
      VIDEO_START(7, 7),
      VIDEO_STOP(8, 8),
      ;
      
      
      public final int getNumber() { return value; }
      
      public static RequestType valueOf(int value) {
        switch (value) {
          case 0: return USERAUTH;
          case 1: return VIDEO_PARAMS;
          case 2: return TOUCHEVENT;
          case 3: return SENSOREVENT;
          case 4: return LOCATION;
          case 5: return INTENT;
          case 6: return SCREENINFO;
          case 7: return VIDEO_START;
          case 8: return VIDEO_STOP;
          default: return null;
        }
      }
      
      public static com.google.protobuf.Internal.EnumLiteMap<RequestType>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static com.google.protobuf.Internal.EnumLiteMap<RequestType>
          internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<RequestType>() {
              public RequestType findValueByNumber(int number) {
                return RequestType.valueOf(number)
      ;        }
            };
      
      private final int index;
      private final int value;
      private RequestType(int index, int value) {
        this.index = index;
        this.value = value;
      }
    }
    
    // required .svmp.Request.RequestType type = 1;
    public static final int TYPE_FIELD_NUMBER = 1;
    private boolean hasType;
    private org.mitre.svmp.protocol.SVMPProtocol.Request.RequestType type_ = org.mitre.svmp.protocol.SVMPProtocol.Request.RequestType.USERAUTH;
    public boolean hasType() { return hasType; }
    public org.mitre.svmp.protocol.SVMPProtocol.Request.RequestType getType() { return type_; }
    
    // optional .svmp.Authentication authentication = 2;
    public static final int AUTHENTICATION_FIELD_NUMBER = 2;
    private boolean hasAuthentication;
    private org.mitre.svmp.protocol.SVMPProtocol.Authentication authentication_ = org.mitre.svmp.protocol.SVMPProtocol.Authentication.getDefaultInstance();
    public boolean hasAuthentication() { return hasAuthentication; }
    public org.mitre.svmp.protocol.SVMPProtocol.Authentication getAuthentication() { return authentication_; }
    
    // optional .svmp.VideoRequest videoRequest = 3;
    public static final int VIDEOREQUEST_FIELD_NUMBER = 3;
    private boolean hasVideoRequest;
    private org.mitre.svmp.protocol.SVMPProtocol.VideoRequest videoRequest_ = org.mitre.svmp.protocol.SVMPProtocol.VideoRequest.getDefaultInstance();
    public boolean hasVideoRequest() { return hasVideoRequest; }
    public org.mitre.svmp.protocol.SVMPProtocol.VideoRequest getVideoRequest() { return videoRequest_; }
    
    // optional .svmp.TouchEvent touch = 4;
    public static final int TOUCH_FIELD_NUMBER = 4;
    private boolean hasTouch;
    private org.mitre.svmp.protocol.SVMPProtocol.TouchEvent touch_ = org.mitre.svmp.protocol.SVMPProtocol.TouchEvent.getDefaultInstance();
    public boolean hasTouch() { return hasTouch; }
    public org.mitre.svmp.protocol.SVMPProtocol.TouchEvent getTouch() { return touch_; }
    
    // optional .svmp.SensorEvent sensor = 5;
    public static final int SENSOR_FIELD_NUMBER = 5;
    private boolean hasSensor;
    private org.mitre.svmp.protocol.SVMPProtocol.SensorEvent sensor_ = org.mitre.svmp.protocol.SVMPProtocol.SensorEvent.getDefaultInstance();
    public boolean hasSensor() { return hasSensor; }
    public org.mitre.svmp.protocol.SVMPProtocol.SensorEvent getSensor() { return sensor_; }
    
    // optional .svmp.LocationRequest locationRequest = 6;
    public static final int LOCATIONREQUEST_FIELD_NUMBER = 6;
    private boolean hasLocationRequest;
    private org.mitre.svmp.protocol.SVMPProtocol.LocationRequest locationRequest_ = org.mitre.svmp.protocol.SVMPProtocol.LocationRequest.getDefaultInstance();
    public boolean hasLocationRequest() { return hasLocationRequest; }
    public org.mitre.svmp.protocol.SVMPProtocol.LocationRequest getLocationRequest() { return locationRequest_; }
    
    // optional .svmp.Intent intent = 7;
    public static final int INTENT_FIELD_NUMBER = 7;
    private boolean hasIntent;
    private org.mitre.svmp.protocol.SVMPProtocol.Intent intent_ = org.mitre.svmp.protocol.SVMPProtocol.Intent.getDefaultInstance();
    public boolean hasIntent() { return hasIntent; }
    public org.mitre.svmp.protocol.SVMPProtocol.Intent getIntent() { return intent_; }
    
    public final boolean isInitialized() {
      if (!hasType) return false;
      if (hasAuthentication()) {
        if (!getAuthentication().isInitialized()) return false;
      }
      if (hasTouch()) {
        if (!getTouch().isInitialized()) return false;
      }
      if (hasSensor()) {
        if (!getSensor().isInitialized()) return false;
      }
      if (hasLocationRequest()) {
        if (!getLocationRequest().isInitialized()) return false;
      }
      if (hasIntent()) {
        if (!getIntent().isInitialized()) return false;
      }
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (hasType()) {
        output.writeEnum(1, getType().getNumber());
      }
      if (hasAuthentication()) {
        output.writeMessage(2, getAuthentication());
      }
      if (hasVideoRequest()) {
        output.writeMessage(3, getVideoRequest());
      }
      if (hasTouch()) {
        output.writeMessage(4, getTouch());
      }
      if (hasSensor()) {
        output.writeMessage(5, getSensor());
      }
      if (hasLocationRequest()) {
        output.writeMessage(6, getLocationRequest());
      }
      if (hasIntent()) {
        output.writeMessage(7, getIntent());
      }
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (hasType()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(1, getType().getNumber());
      }
      if (hasAuthentication()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, getAuthentication());
      }
      if (hasVideoRequest()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, getVideoRequest());
      }
      if (hasTouch()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, getTouch());
      }
      if (hasSensor()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, getSensor());
      }
      if (hasLocationRequest()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(6, getLocationRequest());
      }
      if (hasIntent()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(7, getIntent());
      }
      memoizedSerializedSize = size;
      return size;
    }
    
    public static org.mitre.svmp.protocol.SVMPProtocol.Request parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.Request parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.Request parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.Request parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.Request parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.Request parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.Request parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeDelimitedFrom(input).buildParsed();
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.Request parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeDelimitedFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.Request parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.Request parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.mitre.svmp.protocol.SVMPProtocol.Request prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          org.mitre.svmp.protocol.SVMPProtocol.Request, Builder> {
      private org.mitre.svmp.protocol.SVMPProtocol.Request result;
      
      // Construct using org.mitre.svmp.protocol.SVMPProtocol.Request.newBuilder()
      private Builder() {}
      
      private static Builder create() {
        Builder builder = new Builder();
        builder.result = new org.mitre.svmp.protocol.SVMPProtocol.Request();
        return builder;
      }
      
      protected org.mitre.svmp.protocol.SVMPProtocol.Request internalGetResult() {
        return result;
      }
      
      public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new org.mitre.svmp.protocol.SVMPProtocol.Request();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(result);
      }
      
      public org.mitre.svmp.protocol.SVMPProtocol.Request getDefaultInstanceForType() {
        return org.mitre.svmp.protocol.SVMPProtocol.Request.getDefaultInstance();
      }
      
      public boolean isInitialized() {
        return result.isInitialized();
      }
      public org.mitre.svmp.protocol.SVMPProtocol.Request build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
      
      private org.mitre.svmp.protocol.SVMPProtocol.Request buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public org.mitre.svmp.protocol.SVMPProtocol.Request buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        org.mitre.svmp.protocol.SVMPProtocol.Request returnMe = result;
        result = null;
        return returnMe;
      }
      
      public Builder mergeFrom(org.mitre.svmp.protocol.SVMPProtocol.Request other) {
        if (other == org.mitre.svmp.protocol.SVMPProtocol.Request.getDefaultInstance()) return this;
        if (other.hasType()) {
          setType(other.getType());
        }
        if (other.hasAuthentication()) {
          mergeAuthentication(other.getAuthentication());
        }
        if (other.hasVideoRequest()) {
          mergeVideoRequest(other.getVideoRequest());
        }
        if (other.hasTouch()) {
          mergeTouch(other.getTouch());
        }
        if (other.hasSensor()) {
          mergeSensor(other.getSensor());
        }
        if (other.hasLocationRequest()) {
          mergeLocationRequest(other.getLocationRequest());
        }
        if (other.hasIntent()) {
          mergeIntent(other.getIntent());
        }
        return this;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              return this;
            default: {
              if (!parseUnknownField(input, extensionRegistry, tag)) {
                return this;
              }
              break;
            }
            case 8: {
              int rawValue = input.readEnum();
              org.mitre.svmp.protocol.SVMPProtocol.Request.RequestType value = org.mitre.svmp.protocol.SVMPProtocol.Request.RequestType.valueOf(rawValue);
              if (value != null) {
                setType(value);
              }
              break;
            }
            case 18: {
              org.mitre.svmp.protocol.SVMPProtocol.Authentication.Builder subBuilder = org.mitre.svmp.protocol.SVMPProtocol.Authentication.newBuilder();
              if (hasAuthentication()) {
                subBuilder.mergeFrom(getAuthentication());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setAuthentication(subBuilder.buildPartial());
              break;
            }
            case 26: {
              org.mitre.svmp.protocol.SVMPProtocol.VideoRequest.Builder subBuilder = org.mitre.svmp.protocol.SVMPProtocol.VideoRequest.newBuilder();
              if (hasVideoRequest()) {
                subBuilder.mergeFrom(getVideoRequest());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setVideoRequest(subBuilder.buildPartial());
              break;
            }
            case 34: {
              org.mitre.svmp.protocol.SVMPProtocol.TouchEvent.Builder subBuilder = org.mitre.svmp.protocol.SVMPProtocol.TouchEvent.newBuilder();
              if (hasTouch()) {
                subBuilder.mergeFrom(getTouch());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setTouch(subBuilder.buildPartial());
              break;
            }
            case 42: {
              org.mitre.svmp.protocol.SVMPProtocol.SensorEvent.Builder subBuilder = org.mitre.svmp.protocol.SVMPProtocol.SensorEvent.newBuilder();
              if (hasSensor()) {
                subBuilder.mergeFrom(getSensor());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setSensor(subBuilder.buildPartial());
              break;
            }
            case 50: {
              org.mitre.svmp.protocol.SVMPProtocol.LocationRequest.Builder subBuilder = org.mitre.svmp.protocol.SVMPProtocol.LocationRequest.newBuilder();
              if (hasLocationRequest()) {
                subBuilder.mergeFrom(getLocationRequest());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setLocationRequest(subBuilder.buildPartial());
              break;
            }
            case 58: {
              org.mitre.svmp.protocol.SVMPProtocol.Intent.Builder subBuilder = org.mitre.svmp.protocol.SVMPProtocol.Intent.newBuilder();
              if (hasIntent()) {
                subBuilder.mergeFrom(getIntent());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setIntent(subBuilder.buildPartial());
              break;
            }
          }
        }
      }
      
      
      // required .svmp.Request.RequestType type = 1;
      public boolean hasType() {
        return result.hasType();
      }
      public org.mitre.svmp.protocol.SVMPProtocol.Request.RequestType getType() {
        return result.getType();
      }
      public Builder setType(org.mitre.svmp.protocol.SVMPProtocol.Request.RequestType value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasType = true;
        result.type_ = value;
        return this;
      }
      public Builder clearType() {
        result.hasType = false;
        result.type_ = org.mitre.svmp.protocol.SVMPProtocol.Request.RequestType.USERAUTH;
        return this;
      }
      
      // optional .svmp.Authentication authentication = 2;
      public boolean hasAuthentication() {
        return result.hasAuthentication();
      }
      public org.mitre.svmp.protocol.SVMPProtocol.Authentication getAuthentication() {
        return result.getAuthentication();
      }
      public Builder setAuthentication(org.mitre.svmp.protocol.SVMPProtocol.Authentication value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasAuthentication = true;
        result.authentication_ = value;
        return this;
      }
      public Builder setAuthentication(org.mitre.svmp.protocol.SVMPProtocol.Authentication.Builder builderForValue) {
        result.hasAuthentication = true;
        result.authentication_ = builderForValue.build();
        return this;
      }
      public Builder mergeAuthentication(org.mitre.svmp.protocol.SVMPProtocol.Authentication value) {
        if (result.hasAuthentication() &&
            result.authentication_ != org.mitre.svmp.protocol.SVMPProtocol.Authentication.getDefaultInstance()) {
          result.authentication_ =
            org.mitre.svmp.protocol.SVMPProtocol.Authentication.newBuilder(result.authentication_).mergeFrom(value).buildPartial();
        } else {
          result.authentication_ = value;
        }
        result.hasAuthentication = true;
        return this;
      }
      public Builder clearAuthentication() {
        result.hasAuthentication = false;
        result.authentication_ = org.mitre.svmp.protocol.SVMPProtocol.Authentication.getDefaultInstance();
        return this;
      }
      
      // optional .svmp.VideoRequest videoRequest = 3;
      public boolean hasVideoRequest() {
        return result.hasVideoRequest();
      }
      public org.mitre.svmp.protocol.SVMPProtocol.VideoRequest getVideoRequest() {
        return result.getVideoRequest();
      }
      public Builder setVideoRequest(org.mitre.svmp.protocol.SVMPProtocol.VideoRequest value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasVideoRequest = true;
        result.videoRequest_ = value;
        return this;
      }
      public Builder setVideoRequest(org.mitre.svmp.protocol.SVMPProtocol.VideoRequest.Builder builderForValue) {
        result.hasVideoRequest = true;
        result.videoRequest_ = builderForValue.build();
        return this;
      }
      public Builder mergeVideoRequest(org.mitre.svmp.protocol.SVMPProtocol.VideoRequest value) {
        if (result.hasVideoRequest() &&
            result.videoRequest_ != org.mitre.svmp.protocol.SVMPProtocol.VideoRequest.getDefaultInstance()) {
          result.videoRequest_ =
            org.mitre.svmp.protocol.SVMPProtocol.VideoRequest.newBuilder(result.videoRequest_).mergeFrom(value).buildPartial();
        } else {
          result.videoRequest_ = value;
        }
        result.hasVideoRequest = true;
        return this;
      }
      public Builder clearVideoRequest() {
        result.hasVideoRequest = false;
        result.videoRequest_ = org.mitre.svmp.protocol.SVMPProtocol.VideoRequest.getDefaultInstance();
        return this;
      }
      
      // optional .svmp.TouchEvent touch = 4;
      public boolean hasTouch() {
        return result.hasTouch();
      }
      public org.mitre.svmp.protocol.SVMPProtocol.TouchEvent getTouch() {
        return result.getTouch();
      }
      public Builder setTouch(org.mitre.svmp.protocol.SVMPProtocol.TouchEvent value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasTouch = true;
        result.touch_ = value;
        return this;
      }
      public Builder setTouch(org.mitre.svmp.protocol.SVMPProtocol.TouchEvent.Builder builderForValue) {
        result.hasTouch = true;
        result.touch_ = builderForValue.build();
        return this;
      }
      public Builder mergeTouch(org.mitre.svmp.protocol.SVMPProtocol.TouchEvent value) {
        if (result.hasTouch() &&
            result.touch_ != org.mitre.svmp.protocol.SVMPProtocol.TouchEvent.getDefaultInstance()) {
          result.touch_ =
            org.mitre.svmp.protocol.SVMPProtocol.TouchEvent.newBuilder(result.touch_).mergeFrom(value).buildPartial();
        } else {
          result.touch_ = value;
        }
        result.hasTouch = true;
        return this;
      }
      public Builder clearTouch() {
        result.hasTouch = false;
        result.touch_ = org.mitre.svmp.protocol.SVMPProtocol.TouchEvent.getDefaultInstance();
        return this;
      }
      
      // optional .svmp.SensorEvent sensor = 5;
      public boolean hasSensor() {
        return result.hasSensor();
      }
      public org.mitre.svmp.protocol.SVMPProtocol.SensorEvent getSensor() {
        return result.getSensor();
      }
      public Builder setSensor(org.mitre.svmp.protocol.SVMPProtocol.SensorEvent value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasSensor = true;
        result.sensor_ = value;
        return this;
      }
      public Builder setSensor(org.mitre.svmp.protocol.SVMPProtocol.SensorEvent.Builder builderForValue) {
        result.hasSensor = true;
        result.sensor_ = builderForValue.build();
        return this;
      }
      public Builder mergeSensor(org.mitre.svmp.protocol.SVMPProtocol.SensorEvent value) {
        if (result.hasSensor() &&
            result.sensor_ != org.mitre.svmp.protocol.SVMPProtocol.SensorEvent.getDefaultInstance()) {
          result.sensor_ =
            org.mitre.svmp.protocol.SVMPProtocol.SensorEvent.newBuilder(result.sensor_).mergeFrom(value).buildPartial();
        } else {
          result.sensor_ = value;
        }
        result.hasSensor = true;
        return this;
      }
      public Builder clearSensor() {
        result.hasSensor = false;
        result.sensor_ = org.mitre.svmp.protocol.SVMPProtocol.SensorEvent.getDefaultInstance();
        return this;
      }
      
      // optional .svmp.LocationRequest locationRequest = 6;
      public boolean hasLocationRequest() {
        return result.hasLocationRequest();
      }
      public org.mitre.svmp.protocol.SVMPProtocol.LocationRequest getLocationRequest() {
        return result.getLocationRequest();
      }
      public Builder setLocationRequest(org.mitre.svmp.protocol.SVMPProtocol.LocationRequest value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasLocationRequest = true;
        result.locationRequest_ = value;
        return this;
      }
      public Builder setLocationRequest(org.mitre.svmp.protocol.SVMPProtocol.LocationRequest.Builder builderForValue) {
        result.hasLocationRequest = true;
        result.locationRequest_ = builderForValue.build();
        return this;
      }
      public Builder mergeLocationRequest(org.mitre.svmp.protocol.SVMPProtocol.LocationRequest value) {
        if (result.hasLocationRequest() &&
            result.locationRequest_ != org.mitre.svmp.protocol.SVMPProtocol.LocationRequest.getDefaultInstance()) {
          result.locationRequest_ =
            org.mitre.svmp.protocol.SVMPProtocol.LocationRequest.newBuilder(result.locationRequest_).mergeFrom(value).buildPartial();
        } else {
          result.locationRequest_ = value;
        }
        result.hasLocationRequest = true;
        return this;
      }
      public Builder clearLocationRequest() {
        result.hasLocationRequest = false;
        result.locationRequest_ = org.mitre.svmp.protocol.SVMPProtocol.LocationRequest.getDefaultInstance();
        return this;
      }
      
      // optional .svmp.Intent intent = 7;
      public boolean hasIntent() {
        return result.hasIntent();
      }
      public org.mitre.svmp.protocol.SVMPProtocol.Intent getIntent() {
        return result.getIntent();
      }
      public Builder setIntent(org.mitre.svmp.protocol.SVMPProtocol.Intent value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasIntent = true;
        result.intent_ = value;
        return this;
      }
      public Builder setIntent(org.mitre.svmp.protocol.SVMPProtocol.Intent.Builder builderForValue) {
        result.hasIntent = true;
        result.intent_ = builderForValue.build();
        return this;
      }
      public Builder mergeIntent(org.mitre.svmp.protocol.SVMPProtocol.Intent value) {
        if (result.hasIntent() &&
            result.intent_ != org.mitre.svmp.protocol.SVMPProtocol.Intent.getDefaultInstance()) {
          result.intent_ =
            org.mitre.svmp.protocol.SVMPProtocol.Intent.newBuilder(result.intent_).mergeFrom(value).buildPartial();
        } else {
          result.intent_ = value;
        }
        result.hasIntent = true;
        return this;
      }
      public Builder clearIntent() {
        result.hasIntent = false;
        result.intent_ = org.mitre.svmp.protocol.SVMPProtocol.Intent.getDefaultInstance();
        return this;
      }
    }
    
    static {
      org.mitre.svmp.protocol.SVMPProtocol.internalForceInit();
    }
  }
  
  public static final class Response extends
      com.google.protobuf.GeneratedMessageLite {
    // Use Response.newBuilder() to construct.
    private Response() {}
    
    private static final Response defaultInstance = new Response();
    public static Response getDefaultInstance() {
      return defaultInstance;
    }
    
    public Response getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public enum ResponseType
        implements com.google.protobuf.Internal.EnumLite {
      ERROR(0, 0),
      AUTHOK(1, 1),
      VMREADY(2, 2),
      SCREENINFO(3, 3),
      VIDSTREAMINFO(4, 4),
      INTENT(5, 5),
      NOTIFICATION(6, 6),
      LOCATION(7, 7),
      ;
      
      
      public final int getNumber() { return value; }
      
      public static ResponseType valueOf(int value) {
        switch (value) {
          case 0: return ERROR;
          case 1: return AUTHOK;
          case 2: return VMREADY;
          case 3: return SCREENINFO;
          case 4: return VIDSTREAMINFO;
          case 5: return INTENT;
          case 6: return NOTIFICATION;
          case 7: return LOCATION;
          default: return null;
        }
      }
      
      public static com.google.protobuf.Internal.EnumLiteMap<ResponseType>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static com.google.protobuf.Internal.EnumLiteMap<ResponseType>
          internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<ResponseType>() {
              public ResponseType findValueByNumber(int number) {
                return ResponseType.valueOf(number)
      ;        }
            };
      
      private final int index;
      private final int value;
      private ResponseType(int index, int value) {
        this.index = index;
        this.value = value;
      }
    }
    
    // required .svmp.Response.ResponseType type = 1;
    public static final int TYPE_FIELD_NUMBER = 1;
    private boolean hasType;
    private org.mitre.svmp.protocol.SVMPProtocol.Response.ResponseType type_ = org.mitre.svmp.protocol.SVMPProtocol.Response.ResponseType.ERROR;
    public boolean hasType() { return hasType; }
    public org.mitre.svmp.protocol.SVMPProtocol.Response.ResponseType getType() { return type_; }
    
    // optional string message = 2;
    public static final int MESSAGE_FIELD_NUMBER = 2;
    private boolean hasMessage;
    private java.lang.String message_ = "";
    public boolean hasMessage() { return hasMessage; }
    public java.lang.String getMessage() { return message_; }
    
    // optional .svmp.Intent intent = 4;
    public static final int INTENT_FIELD_NUMBER = 4;
    private boolean hasIntent;
    private org.mitre.svmp.protocol.SVMPProtocol.Intent intent_ = org.mitre.svmp.protocol.SVMPProtocol.Intent.getDefaultInstance();
    public boolean hasIntent() { return hasIntent; }
    public org.mitre.svmp.protocol.SVMPProtocol.Intent getIntent() { return intent_; }
    
    // optional .svmp.Notification notification = 5;
    public static final int NOTIFICATION_FIELD_NUMBER = 5;
    private boolean hasNotification;
    private org.mitre.svmp.protocol.SVMPProtocol.Notification notification_ = org.mitre.svmp.protocol.SVMPProtocol.Notification.getDefaultInstance();
    public boolean hasNotification() { return hasNotification; }
    public org.mitre.svmp.protocol.SVMPProtocol.Notification getNotification() { return notification_; }
    
    // optional .svmp.LocationResponse locationResponse = 6;
    public static final int LOCATIONRESPONSE_FIELD_NUMBER = 6;
    private boolean hasLocationResponse;
    private org.mitre.svmp.protocol.SVMPProtocol.LocationResponse locationResponse_ = org.mitre.svmp.protocol.SVMPProtocol.LocationResponse.getDefaultInstance();
    public boolean hasLocationResponse() { return hasLocationResponse; }
    public org.mitre.svmp.protocol.SVMPProtocol.LocationResponse getLocationResponse() { return locationResponse_; }
    
    // optional .svmp.ScreenInfo screen_info = 16;
    public static final int SCREEN_INFO_FIELD_NUMBER = 16;
    private boolean hasScreenInfo;
    private org.mitre.svmp.protocol.SVMPProtocol.ScreenInfo screenInfo_ = org.mitre.svmp.protocol.SVMPProtocol.ScreenInfo.getDefaultInstance();
    public boolean hasScreenInfo() { return hasScreenInfo; }
    public org.mitre.svmp.protocol.SVMPProtocol.ScreenInfo getScreenInfo() { return screenInfo_; }
    
    // optional .svmp.VideoStreamInfo video_info = 17;
    public static final int VIDEO_INFO_FIELD_NUMBER = 17;
    private boolean hasVideoInfo;
    private org.mitre.svmp.protocol.SVMPProtocol.VideoStreamInfo videoInfo_ = org.mitre.svmp.protocol.SVMPProtocol.VideoStreamInfo.getDefaultInstance();
    public boolean hasVideoInfo() { return hasVideoInfo; }
    public org.mitre.svmp.protocol.SVMPProtocol.VideoStreamInfo getVideoInfo() { return videoInfo_; }
    
    public final boolean isInitialized() {
      if (!hasType) return false;
      if (hasIntent()) {
        if (!getIntent().isInitialized()) return false;
      }
      if (hasNotification()) {
        if (!getNotification().isInitialized()) return false;
      }
      if (hasLocationResponse()) {
        if (!getLocationResponse().isInitialized()) return false;
      }
      if (hasScreenInfo()) {
        if (!getScreenInfo().isInitialized()) return false;
      }
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (hasType()) {
        output.writeEnum(1, getType().getNumber());
      }
      if (hasMessage()) {
        output.writeString(2, getMessage());
      }
      if (hasIntent()) {
        output.writeMessage(4, getIntent());
      }
      if (hasNotification()) {
        output.writeMessage(5, getNotification());
      }
      if (hasLocationResponse()) {
        output.writeMessage(6, getLocationResponse());
      }
      if (hasScreenInfo()) {
        output.writeMessage(16, getScreenInfo());
      }
      if (hasVideoInfo()) {
        output.writeMessage(17, getVideoInfo());
      }
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (hasType()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(1, getType().getNumber());
      }
      if (hasMessage()) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(2, getMessage());
      }
      if (hasIntent()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, getIntent());
      }
      if (hasNotification()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, getNotification());
      }
      if (hasLocationResponse()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(6, getLocationResponse());
      }
      if (hasScreenInfo()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(16, getScreenInfo());
      }
      if (hasVideoInfo()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(17, getVideoInfo());
      }
      memoizedSerializedSize = size;
      return size;
    }
    
    public static org.mitre.svmp.protocol.SVMPProtocol.Response parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.Response parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.Response parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.Response parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.Response parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.Response parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.Response parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeDelimitedFrom(input).buildParsed();
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.Response parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeDelimitedFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.Response parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.Response parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.mitre.svmp.protocol.SVMPProtocol.Response prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          org.mitre.svmp.protocol.SVMPProtocol.Response, Builder> {
      private org.mitre.svmp.protocol.SVMPProtocol.Response result;
      
      // Construct using org.mitre.svmp.protocol.SVMPProtocol.Response.newBuilder()
      private Builder() {}
      
      private static Builder create() {
        Builder builder = new Builder();
        builder.result = new org.mitre.svmp.protocol.SVMPProtocol.Response();
        return builder;
      }
      
      protected org.mitre.svmp.protocol.SVMPProtocol.Response internalGetResult() {
        return result;
      }
      
      public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new org.mitre.svmp.protocol.SVMPProtocol.Response();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(result);
      }
      
      public org.mitre.svmp.protocol.SVMPProtocol.Response getDefaultInstanceForType() {
        return org.mitre.svmp.protocol.SVMPProtocol.Response.getDefaultInstance();
      }
      
      public boolean isInitialized() {
        return result.isInitialized();
      }
      public org.mitre.svmp.protocol.SVMPProtocol.Response build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
      
      private org.mitre.svmp.protocol.SVMPProtocol.Response buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public org.mitre.svmp.protocol.SVMPProtocol.Response buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        org.mitre.svmp.protocol.SVMPProtocol.Response returnMe = result;
        result = null;
        return returnMe;
      }
      
      public Builder mergeFrom(org.mitre.svmp.protocol.SVMPProtocol.Response other) {
        if (other == org.mitre.svmp.protocol.SVMPProtocol.Response.getDefaultInstance()) return this;
        if (other.hasType()) {
          setType(other.getType());
        }
        if (other.hasMessage()) {
          setMessage(other.getMessage());
        }
        if (other.hasIntent()) {
          mergeIntent(other.getIntent());
        }
        if (other.hasNotification()) {
          mergeNotification(other.getNotification());
        }
        if (other.hasLocationResponse()) {
          mergeLocationResponse(other.getLocationResponse());
        }
        if (other.hasScreenInfo()) {
          mergeScreenInfo(other.getScreenInfo());
        }
        if (other.hasVideoInfo()) {
          mergeVideoInfo(other.getVideoInfo());
        }
        return this;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              return this;
            default: {
              if (!parseUnknownField(input, extensionRegistry, tag)) {
                return this;
              }
              break;
            }
            case 8: {
              int rawValue = input.readEnum();
              org.mitre.svmp.protocol.SVMPProtocol.Response.ResponseType value = org.mitre.svmp.protocol.SVMPProtocol.Response.ResponseType.valueOf(rawValue);
              if (value != null) {
                setType(value);
              }
              break;
            }
            case 18: {
              setMessage(input.readString());
              break;
            }
            case 34: {
              org.mitre.svmp.protocol.SVMPProtocol.Intent.Builder subBuilder = org.mitre.svmp.protocol.SVMPProtocol.Intent.newBuilder();
              if (hasIntent()) {
                subBuilder.mergeFrom(getIntent());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setIntent(subBuilder.buildPartial());
              break;
            }
            case 42: {
              org.mitre.svmp.protocol.SVMPProtocol.Notification.Builder subBuilder = org.mitre.svmp.protocol.SVMPProtocol.Notification.newBuilder();
              if (hasNotification()) {
                subBuilder.mergeFrom(getNotification());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setNotification(subBuilder.buildPartial());
              break;
            }
            case 50: {
              org.mitre.svmp.protocol.SVMPProtocol.LocationResponse.Builder subBuilder = org.mitre.svmp.protocol.SVMPProtocol.LocationResponse.newBuilder();
              if (hasLocationResponse()) {
                subBuilder.mergeFrom(getLocationResponse());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setLocationResponse(subBuilder.buildPartial());
              break;
            }
            case 130: {
              org.mitre.svmp.protocol.SVMPProtocol.ScreenInfo.Builder subBuilder = org.mitre.svmp.protocol.SVMPProtocol.ScreenInfo.newBuilder();
              if (hasScreenInfo()) {
                subBuilder.mergeFrom(getScreenInfo());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setScreenInfo(subBuilder.buildPartial());
              break;
            }
            case 138: {
              org.mitre.svmp.protocol.SVMPProtocol.VideoStreamInfo.Builder subBuilder = org.mitre.svmp.protocol.SVMPProtocol.VideoStreamInfo.newBuilder();
              if (hasVideoInfo()) {
                subBuilder.mergeFrom(getVideoInfo());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setVideoInfo(subBuilder.buildPartial());
              break;
            }
          }
        }
      }
      
      
      // required .svmp.Response.ResponseType type = 1;
      public boolean hasType() {
        return result.hasType();
      }
      public org.mitre.svmp.protocol.SVMPProtocol.Response.ResponseType getType() {
        return result.getType();
      }
      public Builder setType(org.mitre.svmp.protocol.SVMPProtocol.Response.ResponseType value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasType = true;
        result.type_ = value;
        return this;
      }
      public Builder clearType() {
        result.hasType = false;
        result.type_ = org.mitre.svmp.protocol.SVMPProtocol.Response.ResponseType.ERROR;
        return this;
      }
      
      // optional string message = 2;
      public boolean hasMessage() {
        return result.hasMessage();
      }
      public java.lang.String getMessage() {
        return result.getMessage();
      }
      public Builder setMessage(java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  result.hasMessage = true;
        result.message_ = value;
        return this;
      }
      public Builder clearMessage() {
        result.hasMessage = false;
        result.message_ = getDefaultInstance().getMessage();
        return this;
      }
      
      // optional .svmp.Intent intent = 4;
      public boolean hasIntent() {
        return result.hasIntent();
      }
      public org.mitre.svmp.protocol.SVMPProtocol.Intent getIntent() {
        return result.getIntent();
      }
      public Builder setIntent(org.mitre.svmp.protocol.SVMPProtocol.Intent value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasIntent = true;
        result.intent_ = value;
        return this;
      }
      public Builder setIntent(org.mitre.svmp.protocol.SVMPProtocol.Intent.Builder builderForValue) {
        result.hasIntent = true;
        result.intent_ = builderForValue.build();
        return this;
      }
      public Builder mergeIntent(org.mitre.svmp.protocol.SVMPProtocol.Intent value) {
        if (result.hasIntent() &&
            result.intent_ != org.mitre.svmp.protocol.SVMPProtocol.Intent.getDefaultInstance()) {
          result.intent_ =
            org.mitre.svmp.protocol.SVMPProtocol.Intent.newBuilder(result.intent_).mergeFrom(value).buildPartial();
        } else {
          result.intent_ = value;
        }
        result.hasIntent = true;
        return this;
      }
      public Builder clearIntent() {
        result.hasIntent = false;
        result.intent_ = org.mitre.svmp.protocol.SVMPProtocol.Intent.getDefaultInstance();
        return this;
      }
      
      // optional .svmp.Notification notification = 5;
      public boolean hasNotification() {
        return result.hasNotification();
      }
      public org.mitre.svmp.protocol.SVMPProtocol.Notification getNotification() {
        return result.getNotification();
      }
      public Builder setNotification(org.mitre.svmp.protocol.SVMPProtocol.Notification value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasNotification = true;
        result.notification_ = value;
        return this;
      }
      public Builder setNotification(org.mitre.svmp.protocol.SVMPProtocol.Notification.Builder builderForValue) {
        result.hasNotification = true;
        result.notification_ = builderForValue.build();
        return this;
      }
      public Builder mergeNotification(org.mitre.svmp.protocol.SVMPProtocol.Notification value) {
        if (result.hasNotification() &&
            result.notification_ != org.mitre.svmp.protocol.SVMPProtocol.Notification.getDefaultInstance()) {
          result.notification_ =
            org.mitre.svmp.protocol.SVMPProtocol.Notification.newBuilder(result.notification_).mergeFrom(value).buildPartial();
        } else {
          result.notification_ = value;
        }
        result.hasNotification = true;
        return this;
      }
      public Builder clearNotification() {
        result.hasNotification = false;
        result.notification_ = org.mitre.svmp.protocol.SVMPProtocol.Notification.getDefaultInstance();
        return this;
      }
      
      // optional .svmp.LocationResponse locationResponse = 6;
      public boolean hasLocationResponse() {
        return result.hasLocationResponse();
      }
      public org.mitre.svmp.protocol.SVMPProtocol.LocationResponse getLocationResponse() {
        return result.getLocationResponse();
      }
      public Builder setLocationResponse(org.mitre.svmp.protocol.SVMPProtocol.LocationResponse value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasLocationResponse = true;
        result.locationResponse_ = value;
        return this;
      }
      public Builder setLocationResponse(org.mitre.svmp.protocol.SVMPProtocol.LocationResponse.Builder builderForValue) {
        result.hasLocationResponse = true;
        result.locationResponse_ = builderForValue.build();
        return this;
      }
      public Builder mergeLocationResponse(org.mitre.svmp.protocol.SVMPProtocol.LocationResponse value) {
        if (result.hasLocationResponse() &&
            result.locationResponse_ != org.mitre.svmp.protocol.SVMPProtocol.LocationResponse.getDefaultInstance()) {
          result.locationResponse_ =
            org.mitre.svmp.protocol.SVMPProtocol.LocationResponse.newBuilder(result.locationResponse_).mergeFrom(value).buildPartial();
        } else {
          result.locationResponse_ = value;
        }
        result.hasLocationResponse = true;
        return this;
      }
      public Builder clearLocationResponse() {
        result.hasLocationResponse = false;
        result.locationResponse_ = org.mitre.svmp.protocol.SVMPProtocol.LocationResponse.getDefaultInstance();
        return this;
      }
      
      // optional .svmp.ScreenInfo screen_info = 16;
      public boolean hasScreenInfo() {
        return result.hasScreenInfo();
      }
      public org.mitre.svmp.protocol.SVMPProtocol.ScreenInfo getScreenInfo() {
        return result.getScreenInfo();
      }
      public Builder setScreenInfo(org.mitre.svmp.protocol.SVMPProtocol.ScreenInfo value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasScreenInfo = true;
        result.screenInfo_ = value;
        return this;
      }
      public Builder setScreenInfo(org.mitre.svmp.protocol.SVMPProtocol.ScreenInfo.Builder builderForValue) {
        result.hasScreenInfo = true;
        result.screenInfo_ = builderForValue.build();
        return this;
      }
      public Builder mergeScreenInfo(org.mitre.svmp.protocol.SVMPProtocol.ScreenInfo value) {
        if (result.hasScreenInfo() &&
            result.screenInfo_ != org.mitre.svmp.protocol.SVMPProtocol.ScreenInfo.getDefaultInstance()) {
          result.screenInfo_ =
            org.mitre.svmp.protocol.SVMPProtocol.ScreenInfo.newBuilder(result.screenInfo_).mergeFrom(value).buildPartial();
        } else {
          result.screenInfo_ = value;
        }
        result.hasScreenInfo = true;
        return this;
      }
      public Builder clearScreenInfo() {
        result.hasScreenInfo = false;
        result.screenInfo_ = org.mitre.svmp.protocol.SVMPProtocol.ScreenInfo.getDefaultInstance();
        return this;
      }
      
      // optional .svmp.VideoStreamInfo video_info = 17;
      public boolean hasVideoInfo() {
        return result.hasVideoInfo();
      }
      public org.mitre.svmp.protocol.SVMPProtocol.VideoStreamInfo getVideoInfo() {
        return result.getVideoInfo();
      }
      public Builder setVideoInfo(org.mitre.svmp.protocol.SVMPProtocol.VideoStreamInfo value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasVideoInfo = true;
        result.videoInfo_ = value;
        return this;
      }
      public Builder setVideoInfo(org.mitre.svmp.protocol.SVMPProtocol.VideoStreamInfo.Builder builderForValue) {
        result.hasVideoInfo = true;
        result.videoInfo_ = builderForValue.build();
        return this;
      }
      public Builder mergeVideoInfo(org.mitre.svmp.protocol.SVMPProtocol.VideoStreamInfo value) {
        if (result.hasVideoInfo() &&
            result.videoInfo_ != org.mitre.svmp.protocol.SVMPProtocol.VideoStreamInfo.getDefaultInstance()) {
          result.videoInfo_ =
            org.mitre.svmp.protocol.SVMPProtocol.VideoStreamInfo.newBuilder(result.videoInfo_).mergeFrom(value).buildPartial();
        } else {
          result.videoInfo_ = value;
        }
        result.hasVideoInfo = true;
        return this;
      }
      public Builder clearVideoInfo() {
        result.hasVideoInfo = false;
        result.videoInfo_ = org.mitre.svmp.protocol.SVMPProtocol.VideoStreamInfo.getDefaultInstance();
        return this;
      }
    }
    
    static {
      org.mitre.svmp.protocol.SVMPProtocol.internalForceInit();
    }
  }
  
  public static final class Intent extends
      com.google.protobuf.GeneratedMessageLite {
    // Use Intent.newBuilder() to construct.
    private Intent() {}
    
    private static final Intent defaultInstance = new Intent();
    public static Intent getDefaultInstance() {
      return defaultInstance;
    }
    
    public Intent getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final class Tuple extends
        com.google.protobuf.GeneratedMessageLite {
      // Use Tuple.newBuilder() to construct.
      private Tuple() {}
      
      private static final Tuple defaultInstance = new Tuple();
      public static Tuple getDefaultInstance() {
        return defaultInstance;
      }
      
      public Tuple getDefaultInstanceForType() {
        return defaultInstance;
      }
      
      // required string key = 1;
      public static final int KEY_FIELD_NUMBER = 1;
      private boolean hasKey;
      private java.lang.String key_ = "";
      public boolean hasKey() { return hasKey; }
      public java.lang.String getKey() { return key_; }
      
      // required string value = 2;
      public static final int VALUE_FIELD_NUMBER = 2;
      private boolean hasValue;
      private java.lang.String value_ = "";
      public boolean hasValue() { return hasValue; }
      public java.lang.String getValue() { return value_; }
      
      public final boolean isInitialized() {
        if (!hasKey) return false;
        if (!hasValue) return false;
        return true;
      }
      
      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        if (hasKey()) {
          output.writeString(1, getKey());
        }
        if (hasValue()) {
          output.writeString(2, getValue());
        }
      }
      
      private int memoizedSerializedSize = -1;
      public int getSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
      
        size = 0;
        if (hasKey()) {
          size += com.google.protobuf.CodedOutputStream
            .computeStringSize(1, getKey());
        }
        if (hasValue()) {
          size += com.google.protobuf.CodedOutputStream
            .computeStringSize(2, getValue());
        }
        memoizedSerializedSize = size;
        return size;
      }
      
      public static org.mitre.svmp.protocol.SVMPProtocol.Intent.Tuple parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return newBuilder().mergeFrom(data).buildParsed();
      }
      public static org.mitre.svmp.protocol.SVMPProtocol.Intent.Tuple parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return newBuilder().mergeFrom(data, extensionRegistry)
                 .buildParsed();
      }
      public static org.mitre.svmp.protocol.SVMPProtocol.Intent.Tuple parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return newBuilder().mergeFrom(data).buildParsed();
      }
      public static org.mitre.svmp.protocol.SVMPProtocol.Intent.Tuple parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return newBuilder().mergeFrom(data, extensionRegistry)
                 .buildParsed();
      }
      public static org.mitre.svmp.protocol.SVMPProtocol.Intent.Tuple parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return newBuilder().mergeFrom(input).buildParsed();
      }
      public static org.mitre.svmp.protocol.SVMPProtocol.Intent.Tuple parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return newBuilder().mergeFrom(input, extensionRegistry)
                 .buildParsed();
      }
      public static org.mitre.svmp.protocol.SVMPProtocol.Intent.Tuple parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return newBuilder().mergeDelimitedFrom(input).buildParsed();
      }
      public static org.mitre.svmp.protocol.SVMPProtocol.Intent.Tuple parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return newBuilder().mergeDelimitedFrom(input, extensionRegistry)
                 .buildParsed();
      }
      public static org.mitre.svmp.protocol.SVMPProtocol.Intent.Tuple parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return newBuilder().mergeFrom(input).buildParsed();
      }
      public static org.mitre.svmp.protocol.SVMPProtocol.Intent.Tuple parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return newBuilder().mergeFrom(input, extensionRegistry)
                 .buildParsed();
      }
      
      public static Builder newBuilder() { return Builder.create(); }
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder(org.mitre.svmp.protocol.SVMPProtocol.Intent.Tuple prototype) {
        return newBuilder().mergeFrom(prototype);
      }
      public Builder toBuilder() { return newBuilder(this); }
      
      public static final class Builder extends
          com.google.protobuf.GeneratedMessageLite.Builder<
            org.mitre.svmp.protocol.SVMPProtocol.Intent.Tuple, Builder> {
        private org.mitre.svmp.protocol.SVMPProtocol.Intent.Tuple result;
        
        // Construct using org.mitre.svmp.protocol.SVMPProtocol.Intent.Tuple.newBuilder()
        private Builder() {}
        
        private static Builder create() {
          Builder builder = new Builder();
          builder.result = new org.mitre.svmp.protocol.SVMPProtocol.Intent.Tuple();
          return builder;
        }
        
        protected org.mitre.svmp.protocol.SVMPProtocol.Intent.Tuple internalGetResult() {
          return result;
        }
        
        public Builder clear() {
          if (result == null) {
            throw new IllegalStateException(
              "Cannot call clear() after build().");
          }
          result = new org.mitre.svmp.protocol.SVMPProtocol.Intent.Tuple();
          return this;
        }
        
        public Builder clone() {
          return create().mergeFrom(result);
        }
        
        public org.mitre.svmp.protocol.SVMPProtocol.Intent.Tuple getDefaultInstanceForType() {
          return org.mitre.svmp.protocol.SVMPProtocol.Intent.Tuple.getDefaultInstance();
        }
        
        public boolean isInitialized() {
          return result.isInitialized();
        }
        public org.mitre.svmp.protocol.SVMPProtocol.Intent.Tuple build() {
          if (result != null && !isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return buildPartial();
        }
        
        private org.mitre.svmp.protocol.SVMPProtocol.Intent.Tuple buildParsed()
            throws com.google.protobuf.InvalidProtocolBufferException {
          if (!isInitialized()) {
            throw newUninitializedMessageException(
              result).asInvalidProtocolBufferException();
          }
          return buildPartial();
        }
        
        public org.mitre.svmp.protocol.SVMPProtocol.Intent.Tuple buildPartial() {
          if (result == null) {
            throw new IllegalStateException(
              "build() has already been called on this Builder.");
          }
          org.mitre.svmp.protocol.SVMPProtocol.Intent.Tuple returnMe = result;
          result = null;
          return returnMe;
        }
        
        public Builder mergeFrom(org.mitre.svmp.protocol.SVMPProtocol.Intent.Tuple other) {
          if (other == org.mitre.svmp.protocol.SVMPProtocol.Intent.Tuple.getDefaultInstance()) return this;
          if (other.hasKey()) {
            setKey(other.getKey());
          }
          if (other.hasValue()) {
            setValue(other.getValue());
          }
          return this;
        }
        
        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          while (true) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                return this;
              default: {
                if (!parseUnknownField(input, extensionRegistry, tag)) {
                  return this;
                }
                break;
              }
              case 10: {
                setKey(input.readString());
                break;
              }
              case 18: {
                setValue(input.readString());
                break;
              }
            }
          }
        }
        
        
        // required string key = 1;
        public boolean hasKey() {
          return result.hasKey();
        }
        public java.lang.String getKey() {
          return result.getKey();
        }
        public Builder setKey(java.lang.String value) {
          if (value == null) {
    throw new NullPointerException();
  }
  result.hasKey = true;
          result.key_ = value;
          return this;
        }
        public Builder clearKey() {
          result.hasKey = false;
          result.key_ = getDefaultInstance().getKey();
          return this;
        }
        
        // required string value = 2;
        public boolean hasValue() {
          return result.hasValue();
        }
        public java.lang.String getValue() {
          return result.getValue();
        }
        public Builder setValue(java.lang.String value) {
          if (value == null) {
    throw new NullPointerException();
  }
  result.hasValue = true;
          result.value_ = value;
          return this;
        }
        public Builder clearValue() {
          result.hasValue = false;
          result.value_ = getDefaultInstance().getValue();
          return this;
        }
      }
      
      static {
        org.mitre.svmp.protocol.SVMPProtocol.internalForceInit();
      }
    }
    
    // required .svmp.IntentAction action = 1;
    public static final int ACTION_FIELD_NUMBER = 1;
    private boolean hasAction;
    private org.mitre.svmp.protocol.SVMPProtocol.IntentAction action_ = org.mitre.svmp.protocol.SVMPProtocol.IntentAction.ACTION_VIEW;
    public boolean hasAction() { return hasAction; }
    public org.mitre.svmp.protocol.SVMPProtocol.IntentAction getAction() { return action_; }
    
    // repeated .svmp.Intent.Tuple extras = 2;
    public static final int EXTRAS_FIELD_NUMBER = 2;
    private java.util.List<org.mitre.svmp.protocol.SVMPProtocol.Intent.Tuple> extras_ =
      java.util.Collections.emptyList();
    public java.util.List<org.mitre.svmp.protocol.SVMPProtocol.Intent.Tuple> getExtrasList() {
      return extras_;
    }
    public int getExtrasCount() { return extras_.size(); }
    public org.mitre.svmp.protocol.SVMPProtocol.Intent.Tuple getExtras(int index) {
      return extras_.get(index);
    }
    
    // optional string data = 3;
    public static final int DATA_FIELD_NUMBER = 3;
    private boolean hasData;
    private java.lang.String data_ = "";
    public boolean hasData() { return hasData; }
    public java.lang.String getData() { return data_; }
    
    // repeated int32 flags = 4;
    public static final int FLAGS_FIELD_NUMBER = 4;
    private java.util.List<java.lang.Integer> flags_ =
      java.util.Collections.emptyList();
    public java.util.List<java.lang.Integer> getFlagsList() {
      return flags_;
    }
    public int getFlagsCount() { return flags_.size(); }
    public int getFlags(int index) {
      return flags_.get(index);
    }
    
    // repeated string categories = 5;
    public static final int CATEGORIES_FIELD_NUMBER = 5;
    private java.util.List<java.lang.String> categories_ =
      java.util.Collections.emptyList();
    public java.util.List<java.lang.String> getCategoriesList() {
      return categories_;
    }
    public int getCategoriesCount() { return categories_.size(); }
    public java.lang.String getCategories(int index) {
      return categories_.get(index);
    }
    
    public final boolean isInitialized() {
      if (!hasAction) return false;
      for (org.mitre.svmp.protocol.SVMPProtocol.Intent.Tuple element : getExtrasList()) {
        if (!element.isInitialized()) return false;
      }
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (hasAction()) {
        output.writeEnum(1, getAction().getNumber());
      }
      for (org.mitre.svmp.protocol.SVMPProtocol.Intent.Tuple element : getExtrasList()) {
        output.writeMessage(2, element);
      }
      if (hasData()) {
        output.writeString(3, getData());
      }
      for (int element : getFlagsList()) {
        output.writeInt32(4, element);
      }
      for (java.lang.String element : getCategoriesList()) {
        output.writeString(5, element);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (hasAction()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(1, getAction().getNumber());
      }
      for (org.mitre.svmp.protocol.SVMPProtocol.Intent.Tuple element : getExtrasList()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, element);
      }
      if (hasData()) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(3, getData());
      }
      {
        int dataSize = 0;
        for (int element : getFlagsList()) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(element);
        }
        size += dataSize;
        size += 1 * getFlagsList().size();
      }
      {
        int dataSize = 0;
        for (java.lang.String element : getCategoriesList()) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeStringSizeNoTag(element);
        }
        size += dataSize;
        size += 1 * getCategoriesList().size();
      }
      memoizedSerializedSize = size;
      return size;
    }
    
    public static org.mitre.svmp.protocol.SVMPProtocol.Intent parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.Intent parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.Intent parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.Intent parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.Intent parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.Intent parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.Intent parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeDelimitedFrom(input).buildParsed();
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.Intent parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeDelimitedFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.Intent parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.Intent parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.mitre.svmp.protocol.SVMPProtocol.Intent prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          org.mitre.svmp.protocol.SVMPProtocol.Intent, Builder> {
      private org.mitre.svmp.protocol.SVMPProtocol.Intent result;
      
      // Construct using org.mitre.svmp.protocol.SVMPProtocol.Intent.newBuilder()
      private Builder() {}
      
      private static Builder create() {
        Builder builder = new Builder();
        builder.result = new org.mitre.svmp.protocol.SVMPProtocol.Intent();
        return builder;
      }
      
      protected org.mitre.svmp.protocol.SVMPProtocol.Intent internalGetResult() {
        return result;
      }
      
      public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new org.mitre.svmp.protocol.SVMPProtocol.Intent();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(result);
      }
      
      public org.mitre.svmp.protocol.SVMPProtocol.Intent getDefaultInstanceForType() {
        return org.mitre.svmp.protocol.SVMPProtocol.Intent.getDefaultInstance();
      }
      
      public boolean isInitialized() {
        return result.isInitialized();
      }
      public org.mitre.svmp.protocol.SVMPProtocol.Intent build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
      
      private org.mitre.svmp.protocol.SVMPProtocol.Intent buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public org.mitre.svmp.protocol.SVMPProtocol.Intent buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        if (result.extras_ != java.util.Collections.EMPTY_LIST) {
          result.extras_ =
            java.util.Collections.unmodifiableList(result.extras_);
        }
        if (result.flags_ != java.util.Collections.EMPTY_LIST) {
          result.flags_ =
            java.util.Collections.unmodifiableList(result.flags_);
        }
        if (result.categories_ != java.util.Collections.EMPTY_LIST) {
          result.categories_ =
            java.util.Collections.unmodifiableList(result.categories_);
        }
        org.mitre.svmp.protocol.SVMPProtocol.Intent returnMe = result;
        result = null;
        return returnMe;
      }
      
      public Builder mergeFrom(org.mitre.svmp.protocol.SVMPProtocol.Intent other) {
        if (other == org.mitre.svmp.protocol.SVMPProtocol.Intent.getDefaultInstance()) return this;
        if (other.hasAction()) {
          setAction(other.getAction());
        }
        if (!other.extras_.isEmpty()) {
          if (result.extras_.isEmpty()) {
            result.extras_ = new java.util.ArrayList<org.mitre.svmp.protocol.SVMPProtocol.Intent.Tuple>();
          }
          result.extras_.addAll(other.extras_);
        }
        if (other.hasData()) {
          setData(other.getData());
        }
        if (!other.flags_.isEmpty()) {
          if (result.flags_.isEmpty()) {
            result.flags_ = new java.util.ArrayList<java.lang.Integer>();
          }
          result.flags_.addAll(other.flags_);
        }
        if (!other.categories_.isEmpty()) {
          if (result.categories_.isEmpty()) {
            result.categories_ = new java.util.ArrayList<java.lang.String>();
          }
          result.categories_.addAll(other.categories_);
        }
        return this;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              return this;
            default: {
              if (!parseUnknownField(input, extensionRegistry, tag)) {
                return this;
              }
              break;
            }
            case 8: {
              int rawValue = input.readEnum();
              org.mitre.svmp.protocol.SVMPProtocol.IntentAction value = org.mitre.svmp.protocol.SVMPProtocol.IntentAction.valueOf(rawValue);
              if (value != null) {
                setAction(value);
              }
              break;
            }
            case 18: {
              org.mitre.svmp.protocol.SVMPProtocol.Intent.Tuple.Builder subBuilder = org.mitre.svmp.protocol.SVMPProtocol.Intent.Tuple.newBuilder();
              input.readMessage(subBuilder, extensionRegistry);
              addExtras(subBuilder.buildPartial());
              break;
            }
            case 26: {
              setData(input.readString());
              break;
            }
            case 32: {
              addFlags(input.readInt32());
              break;
            }
            case 42: {
              addCategories(input.readString());
              break;
            }
          }
        }
      }
      
      
      // required .svmp.IntentAction action = 1;
      public boolean hasAction() {
        return result.hasAction();
      }
      public org.mitre.svmp.protocol.SVMPProtocol.IntentAction getAction() {
        return result.getAction();
      }
      public Builder setAction(org.mitre.svmp.protocol.SVMPProtocol.IntentAction value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasAction = true;
        result.action_ = value;
        return this;
      }
      public Builder clearAction() {
        result.hasAction = false;
        result.action_ = org.mitre.svmp.protocol.SVMPProtocol.IntentAction.ACTION_VIEW;
        return this;
      }
      
      // repeated .svmp.Intent.Tuple extras = 2;
      public java.util.List<org.mitre.svmp.protocol.SVMPProtocol.Intent.Tuple> getExtrasList() {
        return java.util.Collections.unmodifiableList(result.extras_);
      }
      public int getExtrasCount() {
        return result.getExtrasCount();
      }
      public org.mitre.svmp.protocol.SVMPProtocol.Intent.Tuple getExtras(int index) {
        return result.getExtras(index);
      }
      public Builder setExtras(int index, org.mitre.svmp.protocol.SVMPProtocol.Intent.Tuple value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.extras_.set(index, value);
        return this;
      }
      public Builder setExtras(int index, org.mitre.svmp.protocol.SVMPProtocol.Intent.Tuple.Builder builderForValue) {
        result.extras_.set(index, builderForValue.build());
        return this;
      }
      public Builder addExtras(org.mitre.svmp.protocol.SVMPProtocol.Intent.Tuple value) {
        if (value == null) {
          throw new NullPointerException();
        }
        if (result.extras_.isEmpty()) {
          result.extras_ = new java.util.ArrayList<org.mitre.svmp.protocol.SVMPProtocol.Intent.Tuple>();
        }
        result.extras_.add(value);
        return this;
      }
      public Builder addExtras(org.mitre.svmp.protocol.SVMPProtocol.Intent.Tuple.Builder builderForValue) {
        if (result.extras_.isEmpty()) {
          result.extras_ = new java.util.ArrayList<org.mitre.svmp.protocol.SVMPProtocol.Intent.Tuple>();
        }
        result.extras_.add(builderForValue.build());
        return this;
      }
      public Builder addAllExtras(
          java.lang.Iterable<? extends org.mitre.svmp.protocol.SVMPProtocol.Intent.Tuple> values) {
        if (result.extras_.isEmpty()) {
          result.extras_ = new java.util.ArrayList<org.mitre.svmp.protocol.SVMPProtocol.Intent.Tuple>();
        }
        super.addAll(values, result.extras_);
        return this;
      }
      public Builder clearExtras() {
        result.extras_ = java.util.Collections.emptyList();
        return this;
      }
      
      // optional string data = 3;
      public boolean hasData() {
        return result.hasData();
      }
      public java.lang.String getData() {
        return result.getData();
      }
      public Builder setData(java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  result.hasData = true;
        result.data_ = value;
        return this;
      }
      public Builder clearData() {
        result.hasData = false;
        result.data_ = getDefaultInstance().getData();
        return this;
      }
      
      // repeated int32 flags = 4;
      public java.util.List<java.lang.Integer> getFlagsList() {
        return java.util.Collections.unmodifiableList(result.flags_);
      }
      public int getFlagsCount() {
        return result.getFlagsCount();
      }
      public int getFlags(int index) {
        return result.getFlags(index);
      }
      public Builder setFlags(int index, int value) {
        result.flags_.set(index, value);
        return this;
      }
      public Builder addFlags(int value) {
        if (result.flags_.isEmpty()) {
          result.flags_ = new java.util.ArrayList<java.lang.Integer>();
        }
        result.flags_.add(value);
        return this;
      }
      public Builder addAllFlags(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        if (result.flags_.isEmpty()) {
          result.flags_ = new java.util.ArrayList<java.lang.Integer>();
        }
        super.addAll(values, result.flags_);
        return this;
      }
      public Builder clearFlags() {
        result.flags_ = java.util.Collections.emptyList();
        return this;
      }
      
      // repeated string categories = 5;
      public java.util.List<java.lang.String> getCategoriesList() {
        return java.util.Collections.unmodifiableList(result.categories_);
      }
      public int getCategoriesCount() {
        return result.getCategoriesCount();
      }
      public java.lang.String getCategories(int index) {
        return result.getCategories(index);
      }
      public Builder setCategories(int index, java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  result.categories_.set(index, value);
        return this;
      }
      public Builder addCategories(java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  if (result.categories_.isEmpty()) {
          result.categories_ = new java.util.ArrayList<java.lang.String>();
        }
        result.categories_.add(value);
        return this;
      }
      public Builder addAllCategories(
          java.lang.Iterable<? extends java.lang.String> values) {
        if (result.categories_.isEmpty()) {
          result.categories_ = new java.util.ArrayList<java.lang.String>();
        }
        super.addAll(values, result.categories_);
        return this;
      }
      public Builder clearCategories() {
        result.categories_ = java.util.Collections.emptyList();
        return this;
      }
    }
    
    static {
      org.mitre.svmp.protocol.SVMPProtocol.internalForceInit();
    }
  }
  
  public static final class Notification extends
      com.google.protobuf.GeneratedMessageLite {
    // Use Notification.newBuilder() to construct.
    private Notification() {}
    
    private static final Notification defaultInstance = new Notification();
    public static Notification getDefaultInstance() {
      return defaultInstance;
    }
    
    public Notification getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    // required string contentTitle = 1;
    public static final int CONTENTTITLE_FIELD_NUMBER = 1;
    private boolean hasContentTitle;
    private java.lang.String contentTitle_ = "";
    public boolean hasContentTitle() { return hasContentTitle; }
    public java.lang.String getContentTitle() { return contentTitle_; }
    
    // required string contentText = 2;
    public static final int CONTENTTEXT_FIELD_NUMBER = 2;
    private boolean hasContentText;
    private java.lang.String contentText_ = "";
    public boolean hasContentText() { return hasContentText; }
    public java.lang.String getContentText() { return contentText_; }
    
    // required bytes smallIcon = 3;
    public static final int SMALLICON_FIELD_NUMBER = 3;
    private boolean hasSmallIcon;
    private com.google.protobuf.ByteString smallIcon_ = com.google.protobuf.ByteString.EMPTY;
    public boolean hasSmallIcon() { return hasSmallIcon; }
    public com.google.protobuf.ByteString getSmallIcon() { return smallIcon_; }
    
    // optional bytes largeIcon = 4;
    public static final int LARGEICON_FIELD_NUMBER = 4;
    private boolean hasLargeIcon;
    private com.google.protobuf.ByteString largeIcon_ = com.google.protobuf.ByteString.EMPTY;
    public boolean hasLargeIcon() { return hasLargeIcon; }
    public com.google.protobuf.ByteString getLargeIcon() { return largeIcon_; }
    
    public final boolean isInitialized() {
      if (!hasContentTitle) return false;
      if (!hasContentText) return false;
      if (!hasSmallIcon) return false;
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (hasContentTitle()) {
        output.writeString(1, getContentTitle());
      }
      if (hasContentText()) {
        output.writeString(2, getContentText());
      }
      if (hasSmallIcon()) {
        output.writeBytes(3, getSmallIcon());
      }
      if (hasLargeIcon()) {
        output.writeBytes(4, getLargeIcon());
      }
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (hasContentTitle()) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(1, getContentTitle());
      }
      if (hasContentText()) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(2, getContentText());
      }
      if (hasSmallIcon()) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(3, getSmallIcon());
      }
      if (hasLargeIcon()) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(4, getLargeIcon());
      }
      memoizedSerializedSize = size;
      return size;
    }
    
    public static org.mitre.svmp.protocol.SVMPProtocol.Notification parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.Notification parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.Notification parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.Notification parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.Notification parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.Notification parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.Notification parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeDelimitedFrom(input).buildParsed();
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.Notification parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeDelimitedFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.Notification parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.Notification parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.mitre.svmp.protocol.SVMPProtocol.Notification prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          org.mitre.svmp.protocol.SVMPProtocol.Notification, Builder> {
      private org.mitre.svmp.protocol.SVMPProtocol.Notification result;
      
      // Construct using org.mitre.svmp.protocol.SVMPProtocol.Notification.newBuilder()
      private Builder() {}
      
      private static Builder create() {
        Builder builder = new Builder();
        builder.result = new org.mitre.svmp.protocol.SVMPProtocol.Notification();
        return builder;
      }
      
      protected org.mitre.svmp.protocol.SVMPProtocol.Notification internalGetResult() {
        return result;
      }
      
      public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new org.mitre.svmp.protocol.SVMPProtocol.Notification();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(result);
      }
      
      public org.mitre.svmp.protocol.SVMPProtocol.Notification getDefaultInstanceForType() {
        return org.mitre.svmp.protocol.SVMPProtocol.Notification.getDefaultInstance();
      }
      
      public boolean isInitialized() {
        return result.isInitialized();
      }
      public org.mitre.svmp.protocol.SVMPProtocol.Notification build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
      
      private org.mitre.svmp.protocol.SVMPProtocol.Notification buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public org.mitre.svmp.protocol.SVMPProtocol.Notification buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        org.mitre.svmp.protocol.SVMPProtocol.Notification returnMe = result;
        result = null;
        return returnMe;
      }
      
      public Builder mergeFrom(org.mitre.svmp.protocol.SVMPProtocol.Notification other) {
        if (other == org.mitre.svmp.protocol.SVMPProtocol.Notification.getDefaultInstance()) return this;
        if (other.hasContentTitle()) {
          setContentTitle(other.getContentTitle());
        }
        if (other.hasContentText()) {
          setContentText(other.getContentText());
        }
        if (other.hasSmallIcon()) {
          setSmallIcon(other.getSmallIcon());
        }
        if (other.hasLargeIcon()) {
          setLargeIcon(other.getLargeIcon());
        }
        return this;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              return this;
            default: {
              if (!parseUnknownField(input, extensionRegistry, tag)) {
                return this;
              }
              break;
            }
            case 10: {
              setContentTitle(input.readString());
              break;
            }
            case 18: {
              setContentText(input.readString());
              break;
            }
            case 26: {
              setSmallIcon(input.readBytes());
              break;
            }
            case 34: {
              setLargeIcon(input.readBytes());
              break;
            }
          }
        }
      }
      
      
      // required string contentTitle = 1;
      public boolean hasContentTitle() {
        return result.hasContentTitle();
      }
      public java.lang.String getContentTitle() {
        return result.getContentTitle();
      }
      public Builder setContentTitle(java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  result.hasContentTitle = true;
        result.contentTitle_ = value;
        return this;
      }
      public Builder clearContentTitle() {
        result.hasContentTitle = false;
        result.contentTitle_ = getDefaultInstance().getContentTitle();
        return this;
      }
      
      // required string contentText = 2;
      public boolean hasContentText() {
        return result.hasContentText();
      }
      public java.lang.String getContentText() {
        return result.getContentText();
      }
      public Builder setContentText(java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  result.hasContentText = true;
        result.contentText_ = value;
        return this;
      }
      public Builder clearContentText() {
        result.hasContentText = false;
        result.contentText_ = getDefaultInstance().getContentText();
        return this;
      }
      
      // required bytes smallIcon = 3;
      public boolean hasSmallIcon() {
        return result.hasSmallIcon();
      }
      public com.google.protobuf.ByteString getSmallIcon() {
        return result.getSmallIcon();
      }
      public Builder setSmallIcon(com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  result.hasSmallIcon = true;
        result.smallIcon_ = value;
        return this;
      }
      public Builder clearSmallIcon() {
        result.hasSmallIcon = false;
        result.smallIcon_ = getDefaultInstance().getSmallIcon();
        return this;
      }
      
      // optional bytes largeIcon = 4;
      public boolean hasLargeIcon() {
        return result.hasLargeIcon();
      }
      public com.google.protobuf.ByteString getLargeIcon() {
        return result.getLargeIcon();
      }
      public Builder setLargeIcon(com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  result.hasLargeIcon = true;
        result.largeIcon_ = value;
        return this;
      }
      public Builder clearLargeIcon() {
        result.hasLargeIcon = false;
        result.largeIcon_ = getDefaultInstance().getLargeIcon();
        return this;
      }
    }
    
    static {
      org.mitre.svmp.protocol.SVMPProtocol.internalForceInit();
    }
  }
  
  public static final class TouchEvent extends
      com.google.protobuf.GeneratedMessageLite {
    // Use TouchEvent.newBuilder() to construct.
    private TouchEvent() {}
    
    private static final TouchEvent defaultInstance = new TouchEvent();
    public static TouchEvent getDefaultInstance() {
      return defaultInstance;
    }
    
    public TouchEvent getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final class PointerCoords extends
        com.google.protobuf.GeneratedMessageLite {
      // Use PointerCoords.newBuilder() to construct.
      private PointerCoords() {}
      
      private static final PointerCoords defaultInstance = new PointerCoords();
      public static PointerCoords getDefaultInstance() {
        return defaultInstance;
      }
      
      public PointerCoords getDefaultInstanceForType() {
        return defaultInstance;
      }
      
      // required int32 id = 1;
      public static final int ID_FIELD_NUMBER = 1;
      private boolean hasId;
      private int id_ = 0;
      public boolean hasId() { return hasId; }
      public int getId() { return id_; }
      
      // required float x = 2;
      public static final int X_FIELD_NUMBER = 2;
      private boolean hasX;
      private float x_ = 0F;
      public boolean hasX() { return hasX; }
      public float getX() { return x_; }
      
      // required float y = 3;
      public static final int Y_FIELD_NUMBER = 3;
      private boolean hasY;
      private float y_ = 0F;
      public boolean hasY() { return hasY; }
      public float getY() { return y_; }
      
      public final boolean isInitialized() {
        if (!hasId) return false;
        if (!hasX) return false;
        if (!hasY) return false;
        return true;
      }
      
      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        if (hasId()) {
          output.writeInt32(1, getId());
        }
        if (hasX()) {
          output.writeFloat(2, getX());
        }
        if (hasY()) {
          output.writeFloat(3, getY());
        }
      }
      
      private int memoizedSerializedSize = -1;
      public int getSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
      
        size = 0;
        if (hasId()) {
          size += com.google.protobuf.CodedOutputStream
            .computeInt32Size(1, getId());
        }
        if (hasX()) {
          size += com.google.protobuf.CodedOutputStream
            .computeFloatSize(2, getX());
        }
        if (hasY()) {
          size += com.google.protobuf.CodedOutputStream
            .computeFloatSize(3, getY());
        }
        memoizedSerializedSize = size;
        return size;
      }
      
      public static org.mitre.svmp.protocol.SVMPProtocol.TouchEvent.PointerCoords parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return newBuilder().mergeFrom(data).buildParsed();
      }
      public static org.mitre.svmp.protocol.SVMPProtocol.TouchEvent.PointerCoords parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return newBuilder().mergeFrom(data, extensionRegistry)
                 .buildParsed();
      }
      public static org.mitre.svmp.protocol.SVMPProtocol.TouchEvent.PointerCoords parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return newBuilder().mergeFrom(data).buildParsed();
      }
      public static org.mitre.svmp.protocol.SVMPProtocol.TouchEvent.PointerCoords parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return newBuilder().mergeFrom(data, extensionRegistry)
                 .buildParsed();
      }
      public static org.mitre.svmp.protocol.SVMPProtocol.TouchEvent.PointerCoords parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return newBuilder().mergeFrom(input).buildParsed();
      }
      public static org.mitre.svmp.protocol.SVMPProtocol.TouchEvent.PointerCoords parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return newBuilder().mergeFrom(input, extensionRegistry)
                 .buildParsed();
      }
      public static org.mitre.svmp.protocol.SVMPProtocol.TouchEvent.PointerCoords parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return newBuilder().mergeDelimitedFrom(input).buildParsed();
      }
      public static org.mitre.svmp.protocol.SVMPProtocol.TouchEvent.PointerCoords parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return newBuilder().mergeDelimitedFrom(input, extensionRegistry)
                 .buildParsed();
      }
      public static org.mitre.svmp.protocol.SVMPProtocol.TouchEvent.PointerCoords parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return newBuilder().mergeFrom(input).buildParsed();
      }
      public static org.mitre.svmp.protocol.SVMPProtocol.TouchEvent.PointerCoords parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return newBuilder().mergeFrom(input, extensionRegistry)
                 .buildParsed();
      }
      
      public static Builder newBuilder() { return Builder.create(); }
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder(org.mitre.svmp.protocol.SVMPProtocol.TouchEvent.PointerCoords prototype) {
        return newBuilder().mergeFrom(prototype);
      }
      public Builder toBuilder() { return newBuilder(this); }
      
      public static final class Builder extends
          com.google.protobuf.GeneratedMessageLite.Builder<
            org.mitre.svmp.protocol.SVMPProtocol.TouchEvent.PointerCoords, Builder> {
        private org.mitre.svmp.protocol.SVMPProtocol.TouchEvent.PointerCoords result;
        
        // Construct using org.mitre.svmp.protocol.SVMPProtocol.TouchEvent.PointerCoords.newBuilder()
        private Builder() {}
        
        private static Builder create() {
          Builder builder = new Builder();
          builder.result = new org.mitre.svmp.protocol.SVMPProtocol.TouchEvent.PointerCoords();
          return builder;
        }
        
        protected org.mitre.svmp.protocol.SVMPProtocol.TouchEvent.PointerCoords internalGetResult() {
          return result;
        }
        
        public Builder clear() {
          if (result == null) {
            throw new IllegalStateException(
              "Cannot call clear() after build().");
          }
          result = new org.mitre.svmp.protocol.SVMPProtocol.TouchEvent.PointerCoords();
          return this;
        }
        
        public Builder clone() {
          return create().mergeFrom(result);
        }
        
        public org.mitre.svmp.protocol.SVMPProtocol.TouchEvent.PointerCoords getDefaultInstanceForType() {
          return org.mitre.svmp.protocol.SVMPProtocol.TouchEvent.PointerCoords.getDefaultInstance();
        }
        
        public boolean isInitialized() {
          return result.isInitialized();
        }
        public org.mitre.svmp.protocol.SVMPProtocol.TouchEvent.PointerCoords build() {
          if (result != null && !isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return buildPartial();
        }
        
        private org.mitre.svmp.protocol.SVMPProtocol.TouchEvent.PointerCoords buildParsed()
            throws com.google.protobuf.InvalidProtocolBufferException {
          if (!isInitialized()) {
            throw newUninitializedMessageException(
              result).asInvalidProtocolBufferException();
          }
          return buildPartial();
        }
        
        public org.mitre.svmp.protocol.SVMPProtocol.TouchEvent.PointerCoords buildPartial() {
          if (result == null) {
            throw new IllegalStateException(
              "build() has already been called on this Builder.");
          }
          org.mitre.svmp.protocol.SVMPProtocol.TouchEvent.PointerCoords returnMe = result;
          result = null;
          return returnMe;
        }
        
        public Builder mergeFrom(org.mitre.svmp.protocol.SVMPProtocol.TouchEvent.PointerCoords other) {
          if (other == org.mitre.svmp.protocol.SVMPProtocol.TouchEvent.PointerCoords.getDefaultInstance()) return this;
          if (other.hasId()) {
            setId(other.getId());
          }
          if (other.hasX()) {
            setX(other.getX());
          }
          if (other.hasY()) {
            setY(other.getY());
          }
          return this;
        }
        
        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          while (true) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                return this;
              default: {
                if (!parseUnknownField(input, extensionRegistry, tag)) {
                  return this;
                }
                break;
              }
              case 8: {
                setId(input.readInt32());
                break;
              }
              case 21: {
                setX(input.readFloat());
                break;
              }
              case 29: {
                setY(input.readFloat());
                break;
              }
            }
          }
        }
        
        
        // required int32 id = 1;
        public boolean hasId() {
          return result.hasId();
        }
        public int getId() {
          return result.getId();
        }
        public Builder setId(int value) {
          result.hasId = true;
          result.id_ = value;
          return this;
        }
        public Builder clearId() {
          result.hasId = false;
          result.id_ = 0;
          return this;
        }
        
        // required float x = 2;
        public boolean hasX() {
          return result.hasX();
        }
        public float getX() {
          return result.getX();
        }
        public Builder setX(float value) {
          result.hasX = true;
          result.x_ = value;
          return this;
        }
        public Builder clearX() {
          result.hasX = false;
          result.x_ = 0F;
          return this;
        }
        
        // required float y = 3;
        public boolean hasY() {
          return result.hasY();
        }
        public float getY() {
          return result.getY();
        }
        public Builder setY(float value) {
          result.hasY = true;
          result.y_ = value;
          return this;
        }
        public Builder clearY() {
          result.hasY = false;
          result.y_ = 0F;
          return this;
        }
      }
      
      static {
        org.mitre.svmp.protocol.SVMPProtocol.internalForceInit();
      }
    }
    
    // required int32 action = 1;
    public static final int ACTION_FIELD_NUMBER = 1;
    private boolean hasAction;
    private int action_ = 0;
    public boolean hasAction() { return hasAction; }
    public int getAction() { return action_; }
    
    // repeated .svmp.TouchEvent.PointerCoords items = 2;
    public static final int ITEMS_FIELD_NUMBER = 2;
    private java.util.List<org.mitre.svmp.protocol.SVMPProtocol.TouchEvent.PointerCoords> items_ =
      java.util.Collections.emptyList();
    public java.util.List<org.mitre.svmp.protocol.SVMPProtocol.TouchEvent.PointerCoords> getItemsList() {
      return items_;
    }
    public int getItemsCount() { return items_.size(); }
    public org.mitre.svmp.protocol.SVMPProtocol.TouchEvent.PointerCoords getItems(int index) {
      return items_.get(index);
    }
    
    public final boolean isInitialized() {
      if (!hasAction) return false;
      for (org.mitre.svmp.protocol.SVMPProtocol.TouchEvent.PointerCoords element : getItemsList()) {
        if (!element.isInitialized()) return false;
      }
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (hasAction()) {
        output.writeInt32(1, getAction());
      }
      for (org.mitre.svmp.protocol.SVMPProtocol.TouchEvent.PointerCoords element : getItemsList()) {
        output.writeMessage(2, element);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (hasAction()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, getAction());
      }
      for (org.mitre.svmp.protocol.SVMPProtocol.TouchEvent.PointerCoords element : getItemsList()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, element);
      }
      memoizedSerializedSize = size;
      return size;
    }
    
    public static org.mitre.svmp.protocol.SVMPProtocol.TouchEvent parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.TouchEvent parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.TouchEvent parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.TouchEvent parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.TouchEvent parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.TouchEvent parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.TouchEvent parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeDelimitedFrom(input).buildParsed();
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.TouchEvent parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeDelimitedFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.TouchEvent parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.TouchEvent parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.mitre.svmp.protocol.SVMPProtocol.TouchEvent prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          org.mitre.svmp.protocol.SVMPProtocol.TouchEvent, Builder> {
      private org.mitre.svmp.protocol.SVMPProtocol.TouchEvent result;
      
      // Construct using org.mitre.svmp.protocol.SVMPProtocol.TouchEvent.newBuilder()
      private Builder() {}
      
      private static Builder create() {
        Builder builder = new Builder();
        builder.result = new org.mitre.svmp.protocol.SVMPProtocol.TouchEvent();
        return builder;
      }
      
      protected org.mitre.svmp.protocol.SVMPProtocol.TouchEvent internalGetResult() {
        return result;
      }
      
      public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new org.mitre.svmp.protocol.SVMPProtocol.TouchEvent();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(result);
      }
      
      public org.mitre.svmp.protocol.SVMPProtocol.TouchEvent getDefaultInstanceForType() {
        return org.mitre.svmp.protocol.SVMPProtocol.TouchEvent.getDefaultInstance();
      }
      
      public boolean isInitialized() {
        return result.isInitialized();
      }
      public org.mitre.svmp.protocol.SVMPProtocol.TouchEvent build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
      
      private org.mitre.svmp.protocol.SVMPProtocol.TouchEvent buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public org.mitre.svmp.protocol.SVMPProtocol.TouchEvent buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        if (result.items_ != java.util.Collections.EMPTY_LIST) {
          result.items_ =
            java.util.Collections.unmodifiableList(result.items_);
        }
        org.mitre.svmp.protocol.SVMPProtocol.TouchEvent returnMe = result;
        result = null;
        return returnMe;
      }
      
      public Builder mergeFrom(org.mitre.svmp.protocol.SVMPProtocol.TouchEvent other) {
        if (other == org.mitre.svmp.protocol.SVMPProtocol.TouchEvent.getDefaultInstance()) return this;
        if (other.hasAction()) {
          setAction(other.getAction());
        }
        if (!other.items_.isEmpty()) {
          if (result.items_.isEmpty()) {
            result.items_ = new java.util.ArrayList<org.mitre.svmp.protocol.SVMPProtocol.TouchEvent.PointerCoords>();
          }
          result.items_.addAll(other.items_);
        }
        return this;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              return this;
            default: {
              if (!parseUnknownField(input, extensionRegistry, tag)) {
                return this;
              }
              break;
            }
            case 8: {
              setAction(input.readInt32());
              break;
            }
            case 18: {
              org.mitre.svmp.protocol.SVMPProtocol.TouchEvent.PointerCoords.Builder subBuilder = org.mitre.svmp.protocol.SVMPProtocol.TouchEvent.PointerCoords.newBuilder();
              input.readMessage(subBuilder, extensionRegistry);
              addItems(subBuilder.buildPartial());
              break;
            }
          }
        }
      }
      
      
      // required int32 action = 1;
      public boolean hasAction() {
        return result.hasAction();
      }
      public int getAction() {
        return result.getAction();
      }
      public Builder setAction(int value) {
        result.hasAction = true;
        result.action_ = value;
        return this;
      }
      public Builder clearAction() {
        result.hasAction = false;
        result.action_ = 0;
        return this;
      }
      
      // repeated .svmp.TouchEvent.PointerCoords items = 2;
      public java.util.List<org.mitre.svmp.protocol.SVMPProtocol.TouchEvent.PointerCoords> getItemsList() {
        return java.util.Collections.unmodifiableList(result.items_);
      }
      public int getItemsCount() {
        return result.getItemsCount();
      }
      public org.mitre.svmp.protocol.SVMPProtocol.TouchEvent.PointerCoords getItems(int index) {
        return result.getItems(index);
      }
      public Builder setItems(int index, org.mitre.svmp.protocol.SVMPProtocol.TouchEvent.PointerCoords value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.items_.set(index, value);
        return this;
      }
      public Builder setItems(int index, org.mitre.svmp.protocol.SVMPProtocol.TouchEvent.PointerCoords.Builder builderForValue) {
        result.items_.set(index, builderForValue.build());
        return this;
      }
      public Builder addItems(org.mitre.svmp.protocol.SVMPProtocol.TouchEvent.PointerCoords value) {
        if (value == null) {
          throw new NullPointerException();
        }
        if (result.items_.isEmpty()) {
          result.items_ = new java.util.ArrayList<org.mitre.svmp.protocol.SVMPProtocol.TouchEvent.PointerCoords>();
        }
        result.items_.add(value);
        return this;
      }
      public Builder addItems(org.mitre.svmp.protocol.SVMPProtocol.TouchEvent.PointerCoords.Builder builderForValue) {
        if (result.items_.isEmpty()) {
          result.items_ = new java.util.ArrayList<org.mitre.svmp.protocol.SVMPProtocol.TouchEvent.PointerCoords>();
        }
        result.items_.add(builderForValue.build());
        return this;
      }
      public Builder addAllItems(
          java.lang.Iterable<? extends org.mitre.svmp.protocol.SVMPProtocol.TouchEvent.PointerCoords> values) {
        if (result.items_.isEmpty()) {
          result.items_ = new java.util.ArrayList<org.mitre.svmp.protocol.SVMPProtocol.TouchEvent.PointerCoords>();
        }
        super.addAll(values, result.items_);
        return this;
      }
      public Builder clearItems() {
        result.items_ = java.util.Collections.emptyList();
        return this;
      }
    }
    
    static {
      org.mitre.svmp.protocol.SVMPProtocol.internalForceInit();
    }
  }
  
  public static final class ScreenInfo extends
      com.google.protobuf.GeneratedMessageLite {
    // Use ScreenInfo.newBuilder() to construct.
    private ScreenInfo() {}
    
    private static final ScreenInfo defaultInstance = new ScreenInfo();
    public static ScreenInfo getDefaultInstance() {
      return defaultInstance;
    }
    
    public ScreenInfo getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    // required int32 x = 1;
    public static final int X_FIELD_NUMBER = 1;
    private boolean hasX;
    private int x_ = 0;
    public boolean hasX() { return hasX; }
    public int getX() { return x_; }
    
    // required int32 y = 2;
    public static final int Y_FIELD_NUMBER = 2;
    private boolean hasY;
    private int y_ = 0;
    public boolean hasY() { return hasY; }
    public int getY() { return y_; }
    
    public final boolean isInitialized() {
      if (!hasX) return false;
      if (!hasY) return false;
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (hasX()) {
        output.writeInt32(1, getX());
      }
      if (hasY()) {
        output.writeInt32(2, getY());
      }
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (hasX()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, getX());
      }
      if (hasY()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, getY());
      }
      memoizedSerializedSize = size;
      return size;
    }
    
    public static org.mitre.svmp.protocol.SVMPProtocol.ScreenInfo parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.ScreenInfo parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.ScreenInfo parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.ScreenInfo parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.ScreenInfo parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.ScreenInfo parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.ScreenInfo parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeDelimitedFrom(input).buildParsed();
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.ScreenInfo parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeDelimitedFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.ScreenInfo parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.ScreenInfo parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.mitre.svmp.protocol.SVMPProtocol.ScreenInfo prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          org.mitre.svmp.protocol.SVMPProtocol.ScreenInfo, Builder> {
      private org.mitre.svmp.protocol.SVMPProtocol.ScreenInfo result;
      
      // Construct using org.mitre.svmp.protocol.SVMPProtocol.ScreenInfo.newBuilder()
      private Builder() {}
      
      private static Builder create() {
        Builder builder = new Builder();
        builder.result = new org.mitre.svmp.protocol.SVMPProtocol.ScreenInfo();
        return builder;
      }
      
      protected org.mitre.svmp.protocol.SVMPProtocol.ScreenInfo internalGetResult() {
        return result;
      }
      
      public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new org.mitre.svmp.protocol.SVMPProtocol.ScreenInfo();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(result);
      }
      
      public org.mitre.svmp.protocol.SVMPProtocol.ScreenInfo getDefaultInstanceForType() {
        return org.mitre.svmp.protocol.SVMPProtocol.ScreenInfo.getDefaultInstance();
      }
      
      public boolean isInitialized() {
        return result.isInitialized();
      }
      public org.mitre.svmp.protocol.SVMPProtocol.ScreenInfo build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
      
      private org.mitre.svmp.protocol.SVMPProtocol.ScreenInfo buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public org.mitre.svmp.protocol.SVMPProtocol.ScreenInfo buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        org.mitre.svmp.protocol.SVMPProtocol.ScreenInfo returnMe = result;
        result = null;
        return returnMe;
      }
      
      public Builder mergeFrom(org.mitre.svmp.protocol.SVMPProtocol.ScreenInfo other) {
        if (other == org.mitre.svmp.protocol.SVMPProtocol.ScreenInfo.getDefaultInstance()) return this;
        if (other.hasX()) {
          setX(other.getX());
        }
        if (other.hasY()) {
          setY(other.getY());
        }
        return this;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              return this;
            default: {
              if (!parseUnknownField(input, extensionRegistry, tag)) {
                return this;
              }
              break;
            }
            case 8: {
              setX(input.readInt32());
              break;
            }
            case 16: {
              setY(input.readInt32());
              break;
            }
          }
        }
      }
      
      
      // required int32 x = 1;
      public boolean hasX() {
        return result.hasX();
      }
      public int getX() {
        return result.getX();
      }
      public Builder setX(int value) {
        result.hasX = true;
        result.x_ = value;
        return this;
      }
      public Builder clearX() {
        result.hasX = false;
        result.x_ = 0;
        return this;
      }
      
      // required int32 y = 2;
      public boolean hasY() {
        return result.hasY();
      }
      public int getY() {
        return result.getY();
      }
      public Builder setY(int value) {
        result.hasY = true;
        result.y_ = value;
        return this;
      }
      public Builder clearY() {
        result.hasY = false;
        result.y_ = 0;
        return this;
      }
    }
    
    static {
      org.mitre.svmp.protocol.SVMPProtocol.internalForceInit();
    }
  }
  
  public static final class SensorEvent extends
      com.google.protobuf.GeneratedMessageLite {
    // Use SensorEvent.newBuilder() to construct.
    private SensorEvent() {}
    
    private static final SensorEvent defaultInstance = new SensorEvent();
    public static SensorEvent getDefaultInstance() {
      return defaultInstance;
    }
    
    public SensorEvent getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    // required .svmp.SensorType type = 1;
    public static final int TYPE_FIELD_NUMBER = 1;
    private boolean hasType;
    private org.mitre.svmp.protocol.SVMPProtocol.SensorType type_ = org.mitre.svmp.protocol.SVMPProtocol.SensorType.ACCELEROMETER;
    public boolean hasType() { return hasType; }
    public org.mitre.svmp.protocol.SVMPProtocol.SensorType getType() { return type_; }
    
    // required int32 accuracy = 2;
    public static final int ACCURACY_FIELD_NUMBER = 2;
    private boolean hasAccuracy;
    private int accuracy_ = 0;
    public boolean hasAccuracy() { return hasAccuracy; }
    public int getAccuracy() { return accuracy_; }
    
    // required int64 timestamp = 3;
    public static final int TIMESTAMP_FIELD_NUMBER = 3;
    private boolean hasTimestamp;
    private long timestamp_ = 0L;
    public boolean hasTimestamp() { return hasTimestamp; }
    public long getTimestamp() { return timestamp_; }
    
    // repeated float values = 4;
    public static final int VALUES_FIELD_NUMBER = 4;
    private java.util.List<java.lang.Float> values_ =
      java.util.Collections.emptyList();
    public java.util.List<java.lang.Float> getValuesList() {
      return values_;
    }
    public int getValuesCount() { return values_.size(); }
    public float getValues(int index) {
      return values_.get(index);
    }
    
    public final boolean isInitialized() {
      if (!hasType) return false;
      if (!hasAccuracy) return false;
      if (!hasTimestamp) return false;
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (hasType()) {
        output.writeEnum(1, getType().getNumber());
      }
      if (hasAccuracy()) {
        output.writeInt32(2, getAccuracy());
      }
      if (hasTimestamp()) {
        output.writeInt64(3, getTimestamp());
      }
      for (float element : getValuesList()) {
        output.writeFloat(4, element);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (hasType()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(1, getType().getNumber());
      }
      if (hasAccuracy()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, getAccuracy());
      }
      if (hasTimestamp()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(3, getTimestamp());
      }
      {
        int dataSize = 0;
        dataSize = 4 * getValuesList().size();
        size += dataSize;
        size += 1 * getValuesList().size();
      }
      memoizedSerializedSize = size;
      return size;
    }
    
    public static org.mitre.svmp.protocol.SVMPProtocol.SensorEvent parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.SensorEvent parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.SensorEvent parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.SensorEvent parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.SensorEvent parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.SensorEvent parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.SensorEvent parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeDelimitedFrom(input).buildParsed();
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.SensorEvent parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeDelimitedFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.SensorEvent parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.SensorEvent parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.mitre.svmp.protocol.SVMPProtocol.SensorEvent prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          org.mitre.svmp.protocol.SVMPProtocol.SensorEvent, Builder> {
      private org.mitre.svmp.protocol.SVMPProtocol.SensorEvent result;
      
      // Construct using org.mitre.svmp.protocol.SVMPProtocol.SensorEvent.newBuilder()
      private Builder() {}
      
      private static Builder create() {
        Builder builder = new Builder();
        builder.result = new org.mitre.svmp.protocol.SVMPProtocol.SensorEvent();
        return builder;
      }
      
      protected org.mitre.svmp.protocol.SVMPProtocol.SensorEvent internalGetResult() {
        return result;
      }
      
      public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new org.mitre.svmp.protocol.SVMPProtocol.SensorEvent();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(result);
      }
      
      public org.mitre.svmp.protocol.SVMPProtocol.SensorEvent getDefaultInstanceForType() {
        return org.mitre.svmp.protocol.SVMPProtocol.SensorEvent.getDefaultInstance();
      }
      
      public boolean isInitialized() {
        return result.isInitialized();
      }
      public org.mitre.svmp.protocol.SVMPProtocol.SensorEvent build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
      
      private org.mitre.svmp.protocol.SVMPProtocol.SensorEvent buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public org.mitre.svmp.protocol.SVMPProtocol.SensorEvent buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        if (result.values_ != java.util.Collections.EMPTY_LIST) {
          result.values_ =
            java.util.Collections.unmodifiableList(result.values_);
        }
        org.mitre.svmp.protocol.SVMPProtocol.SensorEvent returnMe = result;
        result = null;
        return returnMe;
      }
      
      public Builder mergeFrom(org.mitre.svmp.protocol.SVMPProtocol.SensorEvent other) {
        if (other == org.mitre.svmp.protocol.SVMPProtocol.SensorEvent.getDefaultInstance()) return this;
        if (other.hasType()) {
          setType(other.getType());
        }
        if (other.hasAccuracy()) {
          setAccuracy(other.getAccuracy());
        }
        if (other.hasTimestamp()) {
          setTimestamp(other.getTimestamp());
        }
        if (!other.values_.isEmpty()) {
          if (result.values_.isEmpty()) {
            result.values_ = new java.util.ArrayList<java.lang.Float>();
          }
          result.values_.addAll(other.values_);
        }
        return this;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              return this;
            default: {
              if (!parseUnknownField(input, extensionRegistry, tag)) {
                return this;
              }
              break;
            }
            case 8: {
              int rawValue = input.readEnum();
              org.mitre.svmp.protocol.SVMPProtocol.SensorType value = org.mitre.svmp.protocol.SVMPProtocol.SensorType.valueOf(rawValue);
              if (value != null) {
                setType(value);
              }
              break;
            }
            case 16: {
              setAccuracy(input.readInt32());
              break;
            }
            case 24: {
              setTimestamp(input.readInt64());
              break;
            }
            case 37: {
              addValues(input.readFloat());
              break;
            }
          }
        }
      }
      
      
      // required .svmp.SensorType type = 1;
      public boolean hasType() {
        return result.hasType();
      }
      public org.mitre.svmp.protocol.SVMPProtocol.SensorType getType() {
        return result.getType();
      }
      public Builder setType(org.mitre.svmp.protocol.SVMPProtocol.SensorType value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasType = true;
        result.type_ = value;
        return this;
      }
      public Builder clearType() {
        result.hasType = false;
        result.type_ = org.mitre.svmp.protocol.SVMPProtocol.SensorType.ACCELEROMETER;
        return this;
      }
      
      // required int32 accuracy = 2;
      public boolean hasAccuracy() {
        return result.hasAccuracy();
      }
      public int getAccuracy() {
        return result.getAccuracy();
      }
      public Builder setAccuracy(int value) {
        result.hasAccuracy = true;
        result.accuracy_ = value;
        return this;
      }
      public Builder clearAccuracy() {
        result.hasAccuracy = false;
        result.accuracy_ = 0;
        return this;
      }
      
      // required int64 timestamp = 3;
      public boolean hasTimestamp() {
        return result.hasTimestamp();
      }
      public long getTimestamp() {
        return result.getTimestamp();
      }
      public Builder setTimestamp(long value) {
        result.hasTimestamp = true;
        result.timestamp_ = value;
        return this;
      }
      public Builder clearTimestamp() {
        result.hasTimestamp = false;
        result.timestamp_ = 0L;
        return this;
      }
      
      // repeated float values = 4;
      public java.util.List<java.lang.Float> getValuesList() {
        return java.util.Collections.unmodifiableList(result.values_);
      }
      public int getValuesCount() {
        return result.getValuesCount();
      }
      public float getValues(int index) {
        return result.getValues(index);
      }
      public Builder setValues(int index, float value) {
        result.values_.set(index, value);
        return this;
      }
      public Builder addValues(float value) {
        if (result.values_.isEmpty()) {
          result.values_ = new java.util.ArrayList<java.lang.Float>();
        }
        result.values_.add(value);
        return this;
      }
      public Builder addAllValues(
          java.lang.Iterable<? extends java.lang.Float> values) {
        if (result.values_.isEmpty()) {
          result.values_ = new java.util.ArrayList<java.lang.Float>();
        }
        super.addAll(values, result.values_);
        return this;
      }
      public Builder clearValues() {
        result.values_ = java.util.Collections.emptyList();
        return this;
      }
    }
    
    static {
      org.mitre.svmp.protocol.SVMPProtocol.internalForceInit();
    }
  }
  
  public static final class SensorSubscribe extends
      com.google.protobuf.GeneratedMessageLite {
    // Use SensorSubscribe.newBuilder() to construct.
    private SensorSubscribe() {}
    
    private static final SensorSubscribe defaultInstance = new SensorSubscribe();
    public static SensorSubscribe getDefaultInstance() {
      return defaultInstance;
    }
    
    public SensorSubscribe getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    // required .svmp.SensorType type = 1;
    public static final int TYPE_FIELD_NUMBER = 1;
    private boolean hasType;
    private org.mitre.svmp.protocol.SVMPProtocol.SensorType type_ = org.mitre.svmp.protocol.SVMPProtocol.SensorType.ACCELEROMETER;
    public boolean hasType() { return hasType; }
    public org.mitre.svmp.protocol.SVMPProtocol.SensorType getType() { return type_; }
    
    // optional int32 frequency = 2;
    public static final int FREQUENCY_FIELD_NUMBER = 2;
    private boolean hasFrequency;
    private int frequency_ = 0;
    public boolean hasFrequency() { return hasFrequency; }
    public int getFrequency() { return frequency_; }
    
    public final boolean isInitialized() {
      if (!hasType) return false;
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (hasType()) {
        output.writeEnum(1, getType().getNumber());
      }
      if (hasFrequency()) {
        output.writeInt32(2, getFrequency());
      }
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (hasType()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(1, getType().getNumber());
      }
      if (hasFrequency()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, getFrequency());
      }
      memoizedSerializedSize = size;
      return size;
    }
    
    public static org.mitre.svmp.protocol.SVMPProtocol.SensorSubscribe parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.SensorSubscribe parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.SensorSubscribe parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.SensorSubscribe parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.SensorSubscribe parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.SensorSubscribe parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.SensorSubscribe parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeDelimitedFrom(input).buildParsed();
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.SensorSubscribe parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeDelimitedFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.SensorSubscribe parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.SensorSubscribe parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.mitre.svmp.protocol.SVMPProtocol.SensorSubscribe prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          org.mitre.svmp.protocol.SVMPProtocol.SensorSubscribe, Builder> {
      private org.mitre.svmp.protocol.SVMPProtocol.SensorSubscribe result;
      
      // Construct using org.mitre.svmp.protocol.SVMPProtocol.SensorSubscribe.newBuilder()
      private Builder() {}
      
      private static Builder create() {
        Builder builder = new Builder();
        builder.result = new org.mitre.svmp.protocol.SVMPProtocol.SensorSubscribe();
        return builder;
      }
      
      protected org.mitre.svmp.protocol.SVMPProtocol.SensorSubscribe internalGetResult() {
        return result;
      }
      
      public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new org.mitre.svmp.protocol.SVMPProtocol.SensorSubscribe();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(result);
      }
      
      public org.mitre.svmp.protocol.SVMPProtocol.SensorSubscribe getDefaultInstanceForType() {
        return org.mitre.svmp.protocol.SVMPProtocol.SensorSubscribe.getDefaultInstance();
      }
      
      public boolean isInitialized() {
        return result.isInitialized();
      }
      public org.mitre.svmp.protocol.SVMPProtocol.SensorSubscribe build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
      
      private org.mitre.svmp.protocol.SVMPProtocol.SensorSubscribe buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public org.mitre.svmp.protocol.SVMPProtocol.SensorSubscribe buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        org.mitre.svmp.protocol.SVMPProtocol.SensorSubscribe returnMe = result;
        result = null;
        return returnMe;
      }
      
      public Builder mergeFrom(org.mitre.svmp.protocol.SVMPProtocol.SensorSubscribe other) {
        if (other == org.mitre.svmp.protocol.SVMPProtocol.SensorSubscribe.getDefaultInstance()) return this;
        if (other.hasType()) {
          setType(other.getType());
        }
        if (other.hasFrequency()) {
          setFrequency(other.getFrequency());
        }
        return this;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              return this;
            default: {
              if (!parseUnknownField(input, extensionRegistry, tag)) {
                return this;
              }
              break;
            }
            case 8: {
              int rawValue = input.readEnum();
              org.mitre.svmp.protocol.SVMPProtocol.SensorType value = org.mitre.svmp.protocol.SVMPProtocol.SensorType.valueOf(rawValue);
              if (value != null) {
                setType(value);
              }
              break;
            }
            case 16: {
              setFrequency(input.readInt32());
              break;
            }
          }
        }
      }
      
      
      // required .svmp.SensorType type = 1;
      public boolean hasType() {
        return result.hasType();
      }
      public org.mitre.svmp.protocol.SVMPProtocol.SensorType getType() {
        return result.getType();
      }
      public Builder setType(org.mitre.svmp.protocol.SVMPProtocol.SensorType value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasType = true;
        result.type_ = value;
        return this;
      }
      public Builder clearType() {
        result.hasType = false;
        result.type_ = org.mitre.svmp.protocol.SVMPProtocol.SensorType.ACCELEROMETER;
        return this;
      }
      
      // optional int32 frequency = 2;
      public boolean hasFrequency() {
        return result.hasFrequency();
      }
      public int getFrequency() {
        return result.getFrequency();
      }
      public Builder setFrequency(int value) {
        result.hasFrequency = true;
        result.frequency_ = value;
        return this;
      }
      public Builder clearFrequency() {
        result.hasFrequency = false;
        result.frequency_ = 0;
        return this;
      }
    }
    
    static {
      org.mitre.svmp.protocol.SVMPProtocol.internalForceInit();
    }
  }
  
  public static final class SensorUnsubscribe extends
      com.google.protobuf.GeneratedMessageLite {
    // Use SensorUnsubscribe.newBuilder() to construct.
    private SensorUnsubscribe() {}
    
    private static final SensorUnsubscribe defaultInstance = new SensorUnsubscribe();
    public static SensorUnsubscribe getDefaultInstance() {
      return defaultInstance;
    }
    
    public SensorUnsubscribe getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    // required .svmp.SensorType type = 1;
    public static final int TYPE_FIELD_NUMBER = 1;
    private boolean hasType;
    private org.mitre.svmp.protocol.SVMPProtocol.SensorType type_ = org.mitre.svmp.protocol.SVMPProtocol.SensorType.ACCELEROMETER;
    public boolean hasType() { return hasType; }
    public org.mitre.svmp.protocol.SVMPProtocol.SensorType getType() { return type_; }
    
    public final boolean isInitialized() {
      if (!hasType) return false;
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (hasType()) {
        output.writeEnum(1, getType().getNumber());
      }
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (hasType()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(1, getType().getNumber());
      }
      memoizedSerializedSize = size;
      return size;
    }
    
    public static org.mitre.svmp.protocol.SVMPProtocol.SensorUnsubscribe parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.SensorUnsubscribe parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.SensorUnsubscribe parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.SensorUnsubscribe parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.SensorUnsubscribe parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.SensorUnsubscribe parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.SensorUnsubscribe parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeDelimitedFrom(input).buildParsed();
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.SensorUnsubscribe parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeDelimitedFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.SensorUnsubscribe parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.SensorUnsubscribe parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.mitre.svmp.protocol.SVMPProtocol.SensorUnsubscribe prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          org.mitre.svmp.protocol.SVMPProtocol.SensorUnsubscribe, Builder> {
      private org.mitre.svmp.protocol.SVMPProtocol.SensorUnsubscribe result;
      
      // Construct using org.mitre.svmp.protocol.SVMPProtocol.SensorUnsubscribe.newBuilder()
      private Builder() {}
      
      private static Builder create() {
        Builder builder = new Builder();
        builder.result = new org.mitre.svmp.protocol.SVMPProtocol.SensorUnsubscribe();
        return builder;
      }
      
      protected org.mitre.svmp.protocol.SVMPProtocol.SensorUnsubscribe internalGetResult() {
        return result;
      }
      
      public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new org.mitre.svmp.protocol.SVMPProtocol.SensorUnsubscribe();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(result);
      }
      
      public org.mitre.svmp.protocol.SVMPProtocol.SensorUnsubscribe getDefaultInstanceForType() {
        return org.mitre.svmp.protocol.SVMPProtocol.SensorUnsubscribe.getDefaultInstance();
      }
      
      public boolean isInitialized() {
        return result.isInitialized();
      }
      public org.mitre.svmp.protocol.SVMPProtocol.SensorUnsubscribe build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
      
      private org.mitre.svmp.protocol.SVMPProtocol.SensorUnsubscribe buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public org.mitre.svmp.protocol.SVMPProtocol.SensorUnsubscribe buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        org.mitre.svmp.protocol.SVMPProtocol.SensorUnsubscribe returnMe = result;
        result = null;
        return returnMe;
      }
      
      public Builder mergeFrom(org.mitre.svmp.protocol.SVMPProtocol.SensorUnsubscribe other) {
        if (other == org.mitre.svmp.protocol.SVMPProtocol.SensorUnsubscribe.getDefaultInstance()) return this;
        if (other.hasType()) {
          setType(other.getType());
        }
        return this;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              return this;
            default: {
              if (!parseUnknownField(input, extensionRegistry, tag)) {
                return this;
              }
              break;
            }
            case 8: {
              int rawValue = input.readEnum();
              org.mitre.svmp.protocol.SVMPProtocol.SensorType value = org.mitre.svmp.protocol.SVMPProtocol.SensorType.valueOf(rawValue);
              if (value != null) {
                setType(value);
              }
              break;
            }
          }
        }
      }
      
      
      // required .svmp.SensorType type = 1;
      public boolean hasType() {
        return result.hasType();
      }
      public org.mitre.svmp.protocol.SVMPProtocol.SensorType getType() {
        return result.getType();
      }
      public Builder setType(org.mitre.svmp.protocol.SVMPProtocol.SensorType value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasType = true;
        result.type_ = value;
        return this;
      }
      public Builder clearType() {
        result.hasType = false;
        result.type_ = org.mitre.svmp.protocol.SVMPProtocol.SensorType.ACCELEROMETER;
        return this;
      }
    }
    
    static {
      org.mitre.svmp.protocol.SVMPProtocol.internalForceInit();
    }
  }
  
  public static final class LocationProviderInfo extends
      com.google.protobuf.GeneratedMessageLite {
    // Use LocationProviderInfo.newBuilder() to construct.
    private LocationProviderInfo() {}
    
    private static final LocationProviderInfo defaultInstance = new LocationProviderInfo();
    public static LocationProviderInfo getDefaultInstance() {
      return defaultInstance;
    }
    
    public LocationProviderInfo getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    // required string provider = 1;
    public static final int PROVIDER_FIELD_NUMBER = 1;
    private boolean hasProvider;
    private java.lang.String provider_ = "";
    public boolean hasProvider() { return hasProvider; }
    public java.lang.String getProvider() { return provider_; }
    
    // required bool requiresNetwork = 2;
    public static final int REQUIRESNETWORK_FIELD_NUMBER = 2;
    private boolean hasRequiresNetwork;
    private boolean requiresNetwork_ = false;
    public boolean hasRequiresNetwork() { return hasRequiresNetwork; }
    public boolean getRequiresNetwork() { return requiresNetwork_; }
    
    // required bool requiresSatellite = 3;
    public static final int REQUIRESSATELLITE_FIELD_NUMBER = 3;
    private boolean hasRequiresSatellite;
    private boolean requiresSatellite_ = false;
    public boolean hasRequiresSatellite() { return hasRequiresSatellite; }
    public boolean getRequiresSatellite() { return requiresSatellite_; }
    
    // required bool requiresCell = 4;
    public static final int REQUIRESCELL_FIELD_NUMBER = 4;
    private boolean hasRequiresCell;
    private boolean requiresCell_ = false;
    public boolean hasRequiresCell() { return hasRequiresCell; }
    public boolean getRequiresCell() { return requiresCell_; }
    
    // required bool hasMonetaryCost = 5;
    public static final int HASMONETARYCOST_FIELD_NUMBER = 5;
    private boolean hasHasMonetaryCost;
    private boolean hasMonetaryCost_ = false;
    public boolean hasHasMonetaryCost() { return hasHasMonetaryCost; }
    public boolean getHasMonetaryCost() { return hasMonetaryCost_; }
    
    // required bool supportsAltitude = 6;
    public static final int SUPPORTSALTITUDE_FIELD_NUMBER = 6;
    private boolean hasSupportsAltitude;
    private boolean supportsAltitude_ = false;
    public boolean hasSupportsAltitude() { return hasSupportsAltitude; }
    public boolean getSupportsAltitude() { return supportsAltitude_; }
    
    // required bool supportsSpeed = 7;
    public static final int SUPPORTSSPEED_FIELD_NUMBER = 7;
    private boolean hasSupportsSpeed;
    private boolean supportsSpeed_ = false;
    public boolean hasSupportsSpeed() { return hasSupportsSpeed; }
    public boolean getSupportsSpeed() { return supportsSpeed_; }
    
    // required bool supportsBearing = 8;
    public static final int SUPPORTSBEARING_FIELD_NUMBER = 8;
    private boolean hasSupportsBearing;
    private boolean supportsBearing_ = false;
    public boolean hasSupportsBearing() { return hasSupportsBearing; }
    public boolean getSupportsBearing() { return supportsBearing_; }
    
    // required int32 powerRequirement = 9;
    public static final int POWERREQUIREMENT_FIELD_NUMBER = 9;
    private boolean hasPowerRequirement;
    private int powerRequirement_ = 0;
    public boolean hasPowerRequirement() { return hasPowerRequirement; }
    public int getPowerRequirement() { return powerRequirement_; }
    
    // required int32 accuracy = 10;
    public static final int ACCURACY_FIELD_NUMBER = 10;
    private boolean hasAccuracy;
    private int accuracy_ = 0;
    public boolean hasAccuracy() { return hasAccuracy; }
    public int getAccuracy() { return accuracy_; }
    
    public final boolean isInitialized() {
      if (!hasProvider) return false;
      if (!hasRequiresNetwork) return false;
      if (!hasRequiresSatellite) return false;
      if (!hasRequiresCell) return false;
      if (!hasHasMonetaryCost) return false;
      if (!hasSupportsAltitude) return false;
      if (!hasSupportsSpeed) return false;
      if (!hasSupportsBearing) return false;
      if (!hasPowerRequirement) return false;
      if (!hasAccuracy) return false;
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (hasProvider()) {
        output.writeString(1, getProvider());
      }
      if (hasRequiresNetwork()) {
        output.writeBool(2, getRequiresNetwork());
      }
      if (hasRequiresSatellite()) {
        output.writeBool(3, getRequiresSatellite());
      }
      if (hasRequiresCell()) {
        output.writeBool(4, getRequiresCell());
      }
      if (hasHasMonetaryCost()) {
        output.writeBool(5, getHasMonetaryCost());
      }
      if (hasSupportsAltitude()) {
        output.writeBool(6, getSupportsAltitude());
      }
      if (hasSupportsSpeed()) {
        output.writeBool(7, getSupportsSpeed());
      }
      if (hasSupportsBearing()) {
        output.writeBool(8, getSupportsBearing());
      }
      if (hasPowerRequirement()) {
        output.writeInt32(9, getPowerRequirement());
      }
      if (hasAccuracy()) {
        output.writeInt32(10, getAccuracy());
      }
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (hasProvider()) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(1, getProvider());
      }
      if (hasRequiresNetwork()) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(2, getRequiresNetwork());
      }
      if (hasRequiresSatellite()) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(3, getRequiresSatellite());
      }
      if (hasRequiresCell()) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(4, getRequiresCell());
      }
      if (hasHasMonetaryCost()) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(5, getHasMonetaryCost());
      }
      if (hasSupportsAltitude()) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(6, getSupportsAltitude());
      }
      if (hasSupportsSpeed()) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(7, getSupportsSpeed());
      }
      if (hasSupportsBearing()) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(8, getSupportsBearing());
      }
      if (hasPowerRequirement()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(9, getPowerRequirement());
      }
      if (hasAccuracy()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(10, getAccuracy());
      }
      memoizedSerializedSize = size;
      return size;
    }
    
    public static org.mitre.svmp.protocol.SVMPProtocol.LocationProviderInfo parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.LocationProviderInfo parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.LocationProviderInfo parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.LocationProviderInfo parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.LocationProviderInfo parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.LocationProviderInfo parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.LocationProviderInfo parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeDelimitedFrom(input).buildParsed();
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.LocationProviderInfo parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeDelimitedFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.LocationProviderInfo parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.LocationProviderInfo parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.mitre.svmp.protocol.SVMPProtocol.LocationProviderInfo prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          org.mitre.svmp.protocol.SVMPProtocol.LocationProviderInfo, Builder> {
      private org.mitre.svmp.protocol.SVMPProtocol.LocationProviderInfo result;
      
      // Construct using org.mitre.svmp.protocol.SVMPProtocol.LocationProviderInfo.newBuilder()
      private Builder() {}
      
      private static Builder create() {
        Builder builder = new Builder();
        builder.result = new org.mitre.svmp.protocol.SVMPProtocol.LocationProviderInfo();
        return builder;
      }
      
      protected org.mitre.svmp.protocol.SVMPProtocol.LocationProviderInfo internalGetResult() {
        return result;
      }
      
      public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new org.mitre.svmp.protocol.SVMPProtocol.LocationProviderInfo();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(result);
      }
      
      public org.mitre.svmp.protocol.SVMPProtocol.LocationProviderInfo getDefaultInstanceForType() {
        return org.mitre.svmp.protocol.SVMPProtocol.LocationProviderInfo.getDefaultInstance();
      }
      
      public boolean isInitialized() {
        return result.isInitialized();
      }
      public org.mitre.svmp.protocol.SVMPProtocol.LocationProviderInfo build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
      
      private org.mitre.svmp.protocol.SVMPProtocol.LocationProviderInfo buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public org.mitre.svmp.protocol.SVMPProtocol.LocationProviderInfo buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        org.mitre.svmp.protocol.SVMPProtocol.LocationProviderInfo returnMe = result;
        result = null;
        return returnMe;
      }
      
      public Builder mergeFrom(org.mitre.svmp.protocol.SVMPProtocol.LocationProviderInfo other) {
        if (other == org.mitre.svmp.protocol.SVMPProtocol.LocationProviderInfo.getDefaultInstance()) return this;
        if (other.hasProvider()) {
          setProvider(other.getProvider());
        }
        if (other.hasRequiresNetwork()) {
          setRequiresNetwork(other.getRequiresNetwork());
        }
        if (other.hasRequiresSatellite()) {
          setRequiresSatellite(other.getRequiresSatellite());
        }
        if (other.hasRequiresCell()) {
          setRequiresCell(other.getRequiresCell());
        }
        if (other.hasHasMonetaryCost()) {
          setHasMonetaryCost(other.getHasMonetaryCost());
        }
        if (other.hasSupportsAltitude()) {
          setSupportsAltitude(other.getSupportsAltitude());
        }
        if (other.hasSupportsSpeed()) {
          setSupportsSpeed(other.getSupportsSpeed());
        }
        if (other.hasSupportsBearing()) {
          setSupportsBearing(other.getSupportsBearing());
        }
        if (other.hasPowerRequirement()) {
          setPowerRequirement(other.getPowerRequirement());
        }
        if (other.hasAccuracy()) {
          setAccuracy(other.getAccuracy());
        }
        return this;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              return this;
            default: {
              if (!parseUnknownField(input, extensionRegistry, tag)) {
                return this;
              }
              break;
            }
            case 10: {
              setProvider(input.readString());
              break;
            }
            case 16: {
              setRequiresNetwork(input.readBool());
              break;
            }
            case 24: {
              setRequiresSatellite(input.readBool());
              break;
            }
            case 32: {
              setRequiresCell(input.readBool());
              break;
            }
            case 40: {
              setHasMonetaryCost(input.readBool());
              break;
            }
            case 48: {
              setSupportsAltitude(input.readBool());
              break;
            }
            case 56: {
              setSupportsSpeed(input.readBool());
              break;
            }
            case 64: {
              setSupportsBearing(input.readBool());
              break;
            }
            case 72: {
              setPowerRequirement(input.readInt32());
              break;
            }
            case 80: {
              setAccuracy(input.readInt32());
              break;
            }
          }
        }
      }
      
      
      // required string provider = 1;
      public boolean hasProvider() {
        return result.hasProvider();
      }
      public java.lang.String getProvider() {
        return result.getProvider();
      }
      public Builder setProvider(java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  result.hasProvider = true;
        result.provider_ = value;
        return this;
      }
      public Builder clearProvider() {
        result.hasProvider = false;
        result.provider_ = getDefaultInstance().getProvider();
        return this;
      }
      
      // required bool requiresNetwork = 2;
      public boolean hasRequiresNetwork() {
        return result.hasRequiresNetwork();
      }
      public boolean getRequiresNetwork() {
        return result.getRequiresNetwork();
      }
      public Builder setRequiresNetwork(boolean value) {
        result.hasRequiresNetwork = true;
        result.requiresNetwork_ = value;
        return this;
      }
      public Builder clearRequiresNetwork() {
        result.hasRequiresNetwork = false;
        result.requiresNetwork_ = false;
        return this;
      }
      
      // required bool requiresSatellite = 3;
      public boolean hasRequiresSatellite() {
        return result.hasRequiresSatellite();
      }
      public boolean getRequiresSatellite() {
        return result.getRequiresSatellite();
      }
      public Builder setRequiresSatellite(boolean value) {
        result.hasRequiresSatellite = true;
        result.requiresSatellite_ = value;
        return this;
      }
      public Builder clearRequiresSatellite() {
        result.hasRequiresSatellite = false;
        result.requiresSatellite_ = false;
        return this;
      }
      
      // required bool requiresCell = 4;
      public boolean hasRequiresCell() {
        return result.hasRequiresCell();
      }
      public boolean getRequiresCell() {
        return result.getRequiresCell();
      }
      public Builder setRequiresCell(boolean value) {
        result.hasRequiresCell = true;
        result.requiresCell_ = value;
        return this;
      }
      public Builder clearRequiresCell() {
        result.hasRequiresCell = false;
        result.requiresCell_ = false;
        return this;
      }
      
      // required bool hasMonetaryCost = 5;
      public boolean hasHasMonetaryCost() {
        return result.hasHasMonetaryCost();
      }
      public boolean getHasMonetaryCost() {
        return result.getHasMonetaryCost();
      }
      public Builder setHasMonetaryCost(boolean value) {
        result.hasHasMonetaryCost = true;
        result.hasMonetaryCost_ = value;
        return this;
      }
      public Builder clearHasMonetaryCost() {
        result.hasHasMonetaryCost = false;
        result.hasMonetaryCost_ = false;
        return this;
      }
      
      // required bool supportsAltitude = 6;
      public boolean hasSupportsAltitude() {
        return result.hasSupportsAltitude();
      }
      public boolean getSupportsAltitude() {
        return result.getSupportsAltitude();
      }
      public Builder setSupportsAltitude(boolean value) {
        result.hasSupportsAltitude = true;
        result.supportsAltitude_ = value;
        return this;
      }
      public Builder clearSupportsAltitude() {
        result.hasSupportsAltitude = false;
        result.supportsAltitude_ = false;
        return this;
      }
      
      // required bool supportsSpeed = 7;
      public boolean hasSupportsSpeed() {
        return result.hasSupportsSpeed();
      }
      public boolean getSupportsSpeed() {
        return result.getSupportsSpeed();
      }
      public Builder setSupportsSpeed(boolean value) {
        result.hasSupportsSpeed = true;
        result.supportsSpeed_ = value;
        return this;
      }
      public Builder clearSupportsSpeed() {
        result.hasSupportsSpeed = false;
        result.supportsSpeed_ = false;
        return this;
      }
      
      // required bool supportsBearing = 8;
      public boolean hasSupportsBearing() {
        return result.hasSupportsBearing();
      }
      public boolean getSupportsBearing() {
        return result.getSupportsBearing();
      }
      public Builder setSupportsBearing(boolean value) {
        result.hasSupportsBearing = true;
        result.supportsBearing_ = value;
        return this;
      }
      public Builder clearSupportsBearing() {
        result.hasSupportsBearing = false;
        result.supportsBearing_ = false;
        return this;
      }
      
      // required int32 powerRequirement = 9;
      public boolean hasPowerRequirement() {
        return result.hasPowerRequirement();
      }
      public int getPowerRequirement() {
        return result.getPowerRequirement();
      }
      public Builder setPowerRequirement(int value) {
        result.hasPowerRequirement = true;
        result.powerRequirement_ = value;
        return this;
      }
      public Builder clearPowerRequirement() {
        result.hasPowerRequirement = false;
        result.powerRequirement_ = 0;
        return this;
      }
      
      // required int32 accuracy = 10;
      public boolean hasAccuracy() {
        return result.hasAccuracy();
      }
      public int getAccuracy() {
        return result.getAccuracy();
      }
      public Builder setAccuracy(int value) {
        result.hasAccuracy = true;
        result.accuracy_ = value;
        return this;
      }
      public Builder clearAccuracy() {
        result.hasAccuracy = false;
        result.accuracy_ = 0;
        return this;
      }
    }
    
    static {
      org.mitre.svmp.protocol.SVMPProtocol.internalForceInit();
    }
  }
  
  public static final class LocationProviderStatus extends
      com.google.protobuf.GeneratedMessageLite {
    // Use LocationProviderStatus.newBuilder() to construct.
    private LocationProviderStatus() {}
    
    private static final LocationProviderStatus defaultInstance = new LocationProviderStatus();
    public static LocationProviderStatus getDefaultInstance() {
      return defaultInstance;
    }
    
    public LocationProviderStatus getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final class Tuple extends
        com.google.protobuf.GeneratedMessageLite {
      // Use Tuple.newBuilder() to construct.
      private Tuple() {}
      
      private static final Tuple defaultInstance = new Tuple();
      public static Tuple getDefaultInstance() {
        return defaultInstance;
      }
      
      public Tuple getDefaultInstanceForType() {
        return defaultInstance;
      }
      
      // required string key = 1;
      public static final int KEY_FIELD_NUMBER = 1;
      private boolean hasKey;
      private java.lang.String key_ = "";
      public boolean hasKey() { return hasKey; }
      public java.lang.String getKey() { return key_; }
      
      // required string value = 2;
      public static final int VALUE_FIELD_NUMBER = 2;
      private boolean hasValue;
      private java.lang.String value_ = "";
      public boolean hasValue() { return hasValue; }
      public java.lang.String getValue() { return value_; }
      
      public final boolean isInitialized() {
        if (!hasKey) return false;
        if (!hasValue) return false;
        return true;
      }
      
      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        if (hasKey()) {
          output.writeString(1, getKey());
        }
        if (hasValue()) {
          output.writeString(2, getValue());
        }
      }
      
      private int memoizedSerializedSize = -1;
      public int getSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
      
        size = 0;
        if (hasKey()) {
          size += com.google.protobuf.CodedOutputStream
            .computeStringSize(1, getKey());
        }
        if (hasValue()) {
          size += com.google.protobuf.CodedOutputStream
            .computeStringSize(2, getValue());
        }
        memoizedSerializedSize = size;
        return size;
      }
      
      public static org.mitre.svmp.protocol.SVMPProtocol.LocationProviderStatus.Tuple parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return newBuilder().mergeFrom(data).buildParsed();
      }
      public static org.mitre.svmp.protocol.SVMPProtocol.LocationProviderStatus.Tuple parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return newBuilder().mergeFrom(data, extensionRegistry)
                 .buildParsed();
      }
      public static org.mitre.svmp.protocol.SVMPProtocol.LocationProviderStatus.Tuple parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return newBuilder().mergeFrom(data).buildParsed();
      }
      public static org.mitre.svmp.protocol.SVMPProtocol.LocationProviderStatus.Tuple parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return newBuilder().mergeFrom(data, extensionRegistry)
                 .buildParsed();
      }
      public static org.mitre.svmp.protocol.SVMPProtocol.LocationProviderStatus.Tuple parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return newBuilder().mergeFrom(input).buildParsed();
      }
      public static org.mitre.svmp.protocol.SVMPProtocol.LocationProviderStatus.Tuple parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return newBuilder().mergeFrom(input, extensionRegistry)
                 .buildParsed();
      }
      public static org.mitre.svmp.protocol.SVMPProtocol.LocationProviderStatus.Tuple parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return newBuilder().mergeDelimitedFrom(input).buildParsed();
      }
      public static org.mitre.svmp.protocol.SVMPProtocol.LocationProviderStatus.Tuple parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return newBuilder().mergeDelimitedFrom(input, extensionRegistry)
                 .buildParsed();
      }
      public static org.mitre.svmp.protocol.SVMPProtocol.LocationProviderStatus.Tuple parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return newBuilder().mergeFrom(input).buildParsed();
      }
      public static org.mitre.svmp.protocol.SVMPProtocol.LocationProviderStatus.Tuple parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return newBuilder().mergeFrom(input, extensionRegistry)
                 .buildParsed();
      }
      
      public static Builder newBuilder() { return Builder.create(); }
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder(org.mitre.svmp.protocol.SVMPProtocol.LocationProviderStatus.Tuple prototype) {
        return newBuilder().mergeFrom(prototype);
      }
      public Builder toBuilder() { return newBuilder(this); }
      
      public static final class Builder extends
          com.google.protobuf.GeneratedMessageLite.Builder<
            org.mitre.svmp.protocol.SVMPProtocol.LocationProviderStatus.Tuple, Builder> {
        private org.mitre.svmp.protocol.SVMPProtocol.LocationProviderStatus.Tuple result;
        
        // Construct using org.mitre.svmp.protocol.SVMPProtocol.LocationProviderStatus.Tuple.newBuilder()
        private Builder() {}
        
        private static Builder create() {
          Builder builder = new Builder();
          builder.result = new org.mitre.svmp.protocol.SVMPProtocol.LocationProviderStatus.Tuple();
          return builder;
        }
        
        protected org.mitre.svmp.protocol.SVMPProtocol.LocationProviderStatus.Tuple internalGetResult() {
          return result;
        }
        
        public Builder clear() {
          if (result == null) {
            throw new IllegalStateException(
              "Cannot call clear() after build().");
          }
          result = new org.mitre.svmp.protocol.SVMPProtocol.LocationProviderStatus.Tuple();
          return this;
        }
        
        public Builder clone() {
          return create().mergeFrom(result);
        }
        
        public org.mitre.svmp.protocol.SVMPProtocol.LocationProviderStatus.Tuple getDefaultInstanceForType() {
          return org.mitre.svmp.protocol.SVMPProtocol.LocationProviderStatus.Tuple.getDefaultInstance();
        }
        
        public boolean isInitialized() {
          return result.isInitialized();
        }
        public org.mitre.svmp.protocol.SVMPProtocol.LocationProviderStatus.Tuple build() {
          if (result != null && !isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return buildPartial();
        }
        
        private org.mitre.svmp.protocol.SVMPProtocol.LocationProviderStatus.Tuple buildParsed()
            throws com.google.protobuf.InvalidProtocolBufferException {
          if (!isInitialized()) {
            throw newUninitializedMessageException(
              result).asInvalidProtocolBufferException();
          }
          return buildPartial();
        }
        
        public org.mitre.svmp.protocol.SVMPProtocol.LocationProviderStatus.Tuple buildPartial() {
          if (result == null) {
            throw new IllegalStateException(
              "build() has already been called on this Builder.");
          }
          org.mitre.svmp.protocol.SVMPProtocol.LocationProviderStatus.Tuple returnMe = result;
          result = null;
          return returnMe;
        }
        
        public Builder mergeFrom(org.mitre.svmp.protocol.SVMPProtocol.LocationProviderStatus.Tuple other) {
          if (other == org.mitre.svmp.protocol.SVMPProtocol.LocationProviderStatus.Tuple.getDefaultInstance()) return this;
          if (other.hasKey()) {
            setKey(other.getKey());
          }
          if (other.hasValue()) {
            setValue(other.getValue());
          }
          return this;
        }
        
        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          while (true) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                return this;
              default: {
                if (!parseUnknownField(input, extensionRegistry, tag)) {
                  return this;
                }
                break;
              }
              case 10: {
                setKey(input.readString());
                break;
              }
              case 18: {
                setValue(input.readString());
                break;
              }
            }
          }
        }
        
        
        // required string key = 1;
        public boolean hasKey() {
          return result.hasKey();
        }
        public java.lang.String getKey() {
          return result.getKey();
        }
        public Builder setKey(java.lang.String value) {
          if (value == null) {
    throw new NullPointerException();
  }
  result.hasKey = true;
          result.key_ = value;
          return this;
        }
        public Builder clearKey() {
          result.hasKey = false;
          result.key_ = getDefaultInstance().getKey();
          return this;
        }
        
        // required string value = 2;
        public boolean hasValue() {
          return result.hasValue();
        }
        public java.lang.String getValue() {
          return result.getValue();
        }
        public Builder setValue(java.lang.String value) {
          if (value == null) {
    throw new NullPointerException();
  }
  result.hasValue = true;
          result.value_ = value;
          return this;
        }
        public Builder clearValue() {
          result.hasValue = false;
          result.value_ = getDefaultInstance().getValue();
          return this;
        }
      }
      
      static {
        org.mitre.svmp.protocol.SVMPProtocol.internalForceInit();
      }
    }
    
    // required string provider = 1;
    public static final int PROVIDER_FIELD_NUMBER = 1;
    private boolean hasProvider;
    private java.lang.String provider_ = "";
    public boolean hasProvider() { return hasProvider; }
    public java.lang.String getProvider() { return provider_; }
    
    // required int32 status = 2;
    public static final int STATUS_FIELD_NUMBER = 2;
    private boolean hasStatus;
    private int status_ = 0;
    public boolean hasStatus() { return hasStatus; }
    public int getStatus() { return status_; }
    
    // repeated .svmp.LocationProviderStatus.Tuple extras = 3;
    public static final int EXTRAS_FIELD_NUMBER = 3;
    private java.util.List<org.mitre.svmp.protocol.SVMPProtocol.LocationProviderStatus.Tuple> extras_ =
      java.util.Collections.emptyList();
    public java.util.List<org.mitre.svmp.protocol.SVMPProtocol.LocationProviderStatus.Tuple> getExtrasList() {
      return extras_;
    }
    public int getExtrasCount() { return extras_.size(); }
    public org.mitre.svmp.protocol.SVMPProtocol.LocationProviderStatus.Tuple getExtras(int index) {
      return extras_.get(index);
    }
    
    public final boolean isInitialized() {
      if (!hasProvider) return false;
      if (!hasStatus) return false;
      for (org.mitre.svmp.protocol.SVMPProtocol.LocationProviderStatus.Tuple element : getExtrasList()) {
        if (!element.isInitialized()) return false;
      }
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (hasProvider()) {
        output.writeString(1, getProvider());
      }
      if (hasStatus()) {
        output.writeInt32(2, getStatus());
      }
      for (org.mitre.svmp.protocol.SVMPProtocol.LocationProviderStatus.Tuple element : getExtrasList()) {
        output.writeMessage(3, element);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (hasProvider()) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(1, getProvider());
      }
      if (hasStatus()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, getStatus());
      }
      for (org.mitre.svmp.protocol.SVMPProtocol.LocationProviderStatus.Tuple element : getExtrasList()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, element);
      }
      memoizedSerializedSize = size;
      return size;
    }
    
    public static org.mitre.svmp.protocol.SVMPProtocol.LocationProviderStatus parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.LocationProviderStatus parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.LocationProviderStatus parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.LocationProviderStatus parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.LocationProviderStatus parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.LocationProviderStatus parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.LocationProviderStatus parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeDelimitedFrom(input).buildParsed();
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.LocationProviderStatus parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeDelimitedFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.LocationProviderStatus parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.LocationProviderStatus parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.mitre.svmp.protocol.SVMPProtocol.LocationProviderStatus prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          org.mitre.svmp.protocol.SVMPProtocol.LocationProviderStatus, Builder> {
      private org.mitre.svmp.protocol.SVMPProtocol.LocationProviderStatus result;
      
      // Construct using org.mitre.svmp.protocol.SVMPProtocol.LocationProviderStatus.newBuilder()
      private Builder() {}
      
      private static Builder create() {
        Builder builder = new Builder();
        builder.result = new org.mitre.svmp.protocol.SVMPProtocol.LocationProviderStatus();
        return builder;
      }
      
      protected org.mitre.svmp.protocol.SVMPProtocol.LocationProviderStatus internalGetResult() {
        return result;
      }
      
      public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new org.mitre.svmp.protocol.SVMPProtocol.LocationProviderStatus();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(result);
      }
      
      public org.mitre.svmp.protocol.SVMPProtocol.LocationProviderStatus getDefaultInstanceForType() {
        return org.mitre.svmp.protocol.SVMPProtocol.LocationProviderStatus.getDefaultInstance();
      }
      
      public boolean isInitialized() {
        return result.isInitialized();
      }
      public org.mitre.svmp.protocol.SVMPProtocol.LocationProviderStatus build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
      
      private org.mitre.svmp.protocol.SVMPProtocol.LocationProviderStatus buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public org.mitre.svmp.protocol.SVMPProtocol.LocationProviderStatus buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        if (result.extras_ != java.util.Collections.EMPTY_LIST) {
          result.extras_ =
            java.util.Collections.unmodifiableList(result.extras_);
        }
        org.mitre.svmp.protocol.SVMPProtocol.LocationProviderStatus returnMe = result;
        result = null;
        return returnMe;
      }
      
      public Builder mergeFrom(org.mitre.svmp.protocol.SVMPProtocol.LocationProviderStatus other) {
        if (other == org.mitre.svmp.protocol.SVMPProtocol.LocationProviderStatus.getDefaultInstance()) return this;
        if (other.hasProvider()) {
          setProvider(other.getProvider());
        }
        if (other.hasStatus()) {
          setStatus(other.getStatus());
        }
        if (!other.extras_.isEmpty()) {
          if (result.extras_.isEmpty()) {
            result.extras_ = new java.util.ArrayList<org.mitre.svmp.protocol.SVMPProtocol.LocationProviderStatus.Tuple>();
          }
          result.extras_.addAll(other.extras_);
        }
        return this;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              return this;
            default: {
              if (!parseUnknownField(input, extensionRegistry, tag)) {
                return this;
              }
              break;
            }
            case 10: {
              setProvider(input.readString());
              break;
            }
            case 16: {
              setStatus(input.readInt32());
              break;
            }
            case 26: {
              org.mitre.svmp.protocol.SVMPProtocol.LocationProviderStatus.Tuple.Builder subBuilder = org.mitre.svmp.protocol.SVMPProtocol.LocationProviderStatus.Tuple.newBuilder();
              input.readMessage(subBuilder, extensionRegistry);
              addExtras(subBuilder.buildPartial());
              break;
            }
          }
        }
      }
      
      
      // required string provider = 1;
      public boolean hasProvider() {
        return result.hasProvider();
      }
      public java.lang.String getProvider() {
        return result.getProvider();
      }
      public Builder setProvider(java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  result.hasProvider = true;
        result.provider_ = value;
        return this;
      }
      public Builder clearProvider() {
        result.hasProvider = false;
        result.provider_ = getDefaultInstance().getProvider();
        return this;
      }
      
      // required int32 status = 2;
      public boolean hasStatus() {
        return result.hasStatus();
      }
      public int getStatus() {
        return result.getStatus();
      }
      public Builder setStatus(int value) {
        result.hasStatus = true;
        result.status_ = value;
        return this;
      }
      public Builder clearStatus() {
        result.hasStatus = false;
        result.status_ = 0;
        return this;
      }
      
      // repeated .svmp.LocationProviderStatus.Tuple extras = 3;
      public java.util.List<org.mitre.svmp.protocol.SVMPProtocol.LocationProviderStatus.Tuple> getExtrasList() {
        return java.util.Collections.unmodifiableList(result.extras_);
      }
      public int getExtrasCount() {
        return result.getExtrasCount();
      }
      public org.mitre.svmp.protocol.SVMPProtocol.LocationProviderStatus.Tuple getExtras(int index) {
        return result.getExtras(index);
      }
      public Builder setExtras(int index, org.mitre.svmp.protocol.SVMPProtocol.LocationProviderStatus.Tuple value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.extras_.set(index, value);
        return this;
      }
      public Builder setExtras(int index, org.mitre.svmp.protocol.SVMPProtocol.LocationProviderStatus.Tuple.Builder builderForValue) {
        result.extras_.set(index, builderForValue.build());
        return this;
      }
      public Builder addExtras(org.mitre.svmp.protocol.SVMPProtocol.LocationProviderStatus.Tuple value) {
        if (value == null) {
          throw new NullPointerException();
        }
        if (result.extras_.isEmpty()) {
          result.extras_ = new java.util.ArrayList<org.mitre.svmp.protocol.SVMPProtocol.LocationProviderStatus.Tuple>();
        }
        result.extras_.add(value);
        return this;
      }
      public Builder addExtras(org.mitre.svmp.protocol.SVMPProtocol.LocationProviderStatus.Tuple.Builder builderForValue) {
        if (result.extras_.isEmpty()) {
          result.extras_ = new java.util.ArrayList<org.mitre.svmp.protocol.SVMPProtocol.LocationProviderStatus.Tuple>();
        }
        result.extras_.add(builderForValue.build());
        return this;
      }
      public Builder addAllExtras(
          java.lang.Iterable<? extends org.mitre.svmp.protocol.SVMPProtocol.LocationProviderStatus.Tuple> values) {
        if (result.extras_.isEmpty()) {
          result.extras_ = new java.util.ArrayList<org.mitre.svmp.protocol.SVMPProtocol.LocationProviderStatus.Tuple>();
        }
        super.addAll(values, result.extras_);
        return this;
      }
      public Builder clearExtras() {
        result.extras_ = java.util.Collections.emptyList();
        return this;
      }
    }
    
    static {
      org.mitre.svmp.protocol.SVMPProtocol.internalForceInit();
    }
  }
  
  public static final class LocationProviderEnabled extends
      com.google.protobuf.GeneratedMessageLite {
    // Use LocationProviderEnabled.newBuilder() to construct.
    private LocationProviderEnabled() {}
    
    private static final LocationProviderEnabled defaultInstance = new LocationProviderEnabled();
    public static LocationProviderEnabled getDefaultInstance() {
      return defaultInstance;
    }
    
    public LocationProviderEnabled getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    // required string provider = 1;
    public static final int PROVIDER_FIELD_NUMBER = 1;
    private boolean hasProvider;
    private java.lang.String provider_ = "";
    public boolean hasProvider() { return hasProvider; }
    public java.lang.String getProvider() { return provider_; }
    
    // required bool enabled = 2;
    public static final int ENABLED_FIELD_NUMBER = 2;
    private boolean hasEnabled;
    private boolean enabled_ = false;
    public boolean hasEnabled() { return hasEnabled; }
    public boolean getEnabled() { return enabled_; }
    
    public final boolean isInitialized() {
      if (!hasProvider) return false;
      if (!hasEnabled) return false;
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (hasProvider()) {
        output.writeString(1, getProvider());
      }
      if (hasEnabled()) {
        output.writeBool(2, getEnabled());
      }
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (hasProvider()) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(1, getProvider());
      }
      if (hasEnabled()) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(2, getEnabled());
      }
      memoizedSerializedSize = size;
      return size;
    }
    
    public static org.mitre.svmp.protocol.SVMPProtocol.LocationProviderEnabled parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.LocationProviderEnabled parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.LocationProviderEnabled parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.LocationProviderEnabled parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.LocationProviderEnabled parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.LocationProviderEnabled parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.LocationProviderEnabled parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeDelimitedFrom(input).buildParsed();
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.LocationProviderEnabled parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeDelimitedFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.LocationProviderEnabled parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.LocationProviderEnabled parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.mitre.svmp.protocol.SVMPProtocol.LocationProviderEnabled prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          org.mitre.svmp.protocol.SVMPProtocol.LocationProviderEnabled, Builder> {
      private org.mitre.svmp.protocol.SVMPProtocol.LocationProviderEnabled result;
      
      // Construct using org.mitre.svmp.protocol.SVMPProtocol.LocationProviderEnabled.newBuilder()
      private Builder() {}
      
      private static Builder create() {
        Builder builder = new Builder();
        builder.result = new org.mitre.svmp.protocol.SVMPProtocol.LocationProviderEnabled();
        return builder;
      }
      
      protected org.mitre.svmp.protocol.SVMPProtocol.LocationProviderEnabled internalGetResult() {
        return result;
      }
      
      public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new org.mitre.svmp.protocol.SVMPProtocol.LocationProviderEnabled();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(result);
      }
      
      public org.mitre.svmp.protocol.SVMPProtocol.LocationProviderEnabled getDefaultInstanceForType() {
        return org.mitre.svmp.protocol.SVMPProtocol.LocationProviderEnabled.getDefaultInstance();
      }
      
      public boolean isInitialized() {
        return result.isInitialized();
      }
      public org.mitre.svmp.protocol.SVMPProtocol.LocationProviderEnabled build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
      
      private org.mitre.svmp.protocol.SVMPProtocol.LocationProviderEnabled buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public org.mitre.svmp.protocol.SVMPProtocol.LocationProviderEnabled buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        org.mitre.svmp.protocol.SVMPProtocol.LocationProviderEnabled returnMe = result;
        result = null;
        return returnMe;
      }
      
      public Builder mergeFrom(org.mitre.svmp.protocol.SVMPProtocol.LocationProviderEnabled other) {
        if (other == org.mitre.svmp.protocol.SVMPProtocol.LocationProviderEnabled.getDefaultInstance()) return this;
        if (other.hasProvider()) {
          setProvider(other.getProvider());
        }
        if (other.hasEnabled()) {
          setEnabled(other.getEnabled());
        }
        return this;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              return this;
            default: {
              if (!parseUnknownField(input, extensionRegistry, tag)) {
                return this;
              }
              break;
            }
            case 10: {
              setProvider(input.readString());
              break;
            }
            case 16: {
              setEnabled(input.readBool());
              break;
            }
          }
        }
      }
      
      
      // required string provider = 1;
      public boolean hasProvider() {
        return result.hasProvider();
      }
      public java.lang.String getProvider() {
        return result.getProvider();
      }
      public Builder setProvider(java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  result.hasProvider = true;
        result.provider_ = value;
        return this;
      }
      public Builder clearProvider() {
        result.hasProvider = false;
        result.provider_ = getDefaultInstance().getProvider();
        return this;
      }
      
      // required bool enabled = 2;
      public boolean hasEnabled() {
        return result.hasEnabled();
      }
      public boolean getEnabled() {
        return result.getEnabled();
      }
      public Builder setEnabled(boolean value) {
        result.hasEnabled = true;
        result.enabled_ = value;
        return this;
      }
      public Builder clearEnabled() {
        result.hasEnabled = false;
        result.enabled_ = false;
        return this;
      }
    }
    
    static {
      org.mitre.svmp.protocol.SVMPProtocol.internalForceInit();
    }
  }
  
  public static final class LocationUpdate extends
      com.google.protobuf.GeneratedMessageLite {
    // Use LocationUpdate.newBuilder() to construct.
    private LocationUpdate() {}
    
    private static final LocationUpdate defaultInstance = new LocationUpdate();
    public static LocationUpdate getDefaultInstance() {
      return defaultInstance;
    }
    
    public LocationUpdate getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    // required double latitude = 1;
    public static final int LATITUDE_FIELD_NUMBER = 1;
    private boolean hasLatitude;
    private double latitude_ = 0D;
    public boolean hasLatitude() { return hasLatitude; }
    public double getLatitude() { return latitude_; }
    
    // required double longitude = 2;
    public static final int LONGITUDE_FIELD_NUMBER = 2;
    private boolean hasLongitude;
    private double longitude_ = 0D;
    public boolean hasLongitude() { return hasLongitude; }
    public double getLongitude() { return longitude_; }
    
    // required int64 time = 3;
    public static final int TIME_FIELD_NUMBER = 3;
    private boolean hasTime;
    private long time_ = 0L;
    public boolean hasTime() { return hasTime; }
    public long getTime() { return time_; }
    
    // optional string provider = 4;
    public static final int PROVIDER_FIELD_NUMBER = 4;
    private boolean hasProvider;
    private java.lang.String provider_ = "";
    public boolean hasProvider() { return hasProvider; }
    public java.lang.String getProvider() { return provider_; }
    
    // optional float accuracy = 5;
    public static final int ACCURACY_FIELD_NUMBER = 5;
    private boolean hasAccuracy;
    private float accuracy_ = 0F;
    public boolean hasAccuracy() { return hasAccuracy; }
    public float getAccuracy() { return accuracy_; }
    
    // optional double altitude = 6;
    public static final int ALTITUDE_FIELD_NUMBER = 6;
    private boolean hasAltitude;
    private double altitude_ = 0D;
    public boolean hasAltitude() { return hasAltitude; }
    public double getAltitude() { return altitude_; }
    
    // optional float bearing = 7;
    public static final int BEARING_FIELD_NUMBER = 7;
    private boolean hasBearing;
    private float bearing_ = 0F;
    public boolean hasBearing() { return hasBearing; }
    public float getBearing() { return bearing_; }
    
    // optional float speed = 8;
    public static final int SPEED_FIELD_NUMBER = 8;
    private boolean hasSpeed;
    private float speed_ = 0F;
    public boolean hasSpeed() { return hasSpeed; }
    public float getSpeed() { return speed_; }
    
    public final boolean isInitialized() {
      if (!hasLatitude) return false;
      if (!hasLongitude) return false;
      if (!hasTime) return false;
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (hasLatitude()) {
        output.writeDouble(1, getLatitude());
      }
      if (hasLongitude()) {
        output.writeDouble(2, getLongitude());
      }
      if (hasTime()) {
        output.writeInt64(3, getTime());
      }
      if (hasProvider()) {
        output.writeString(4, getProvider());
      }
      if (hasAccuracy()) {
        output.writeFloat(5, getAccuracy());
      }
      if (hasAltitude()) {
        output.writeDouble(6, getAltitude());
      }
      if (hasBearing()) {
        output.writeFloat(7, getBearing());
      }
      if (hasSpeed()) {
        output.writeFloat(8, getSpeed());
      }
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (hasLatitude()) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(1, getLatitude());
      }
      if (hasLongitude()) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(2, getLongitude());
      }
      if (hasTime()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(3, getTime());
      }
      if (hasProvider()) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(4, getProvider());
      }
      if (hasAccuracy()) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(5, getAccuracy());
      }
      if (hasAltitude()) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(6, getAltitude());
      }
      if (hasBearing()) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(7, getBearing());
      }
      if (hasSpeed()) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(8, getSpeed());
      }
      memoizedSerializedSize = size;
      return size;
    }
    
    public static org.mitre.svmp.protocol.SVMPProtocol.LocationUpdate parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.LocationUpdate parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.LocationUpdate parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.LocationUpdate parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.LocationUpdate parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.LocationUpdate parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.LocationUpdate parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeDelimitedFrom(input).buildParsed();
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.LocationUpdate parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeDelimitedFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.LocationUpdate parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.LocationUpdate parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.mitre.svmp.protocol.SVMPProtocol.LocationUpdate prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          org.mitre.svmp.protocol.SVMPProtocol.LocationUpdate, Builder> {
      private org.mitre.svmp.protocol.SVMPProtocol.LocationUpdate result;
      
      // Construct using org.mitre.svmp.protocol.SVMPProtocol.LocationUpdate.newBuilder()
      private Builder() {}
      
      private static Builder create() {
        Builder builder = new Builder();
        builder.result = new org.mitre.svmp.protocol.SVMPProtocol.LocationUpdate();
        return builder;
      }
      
      protected org.mitre.svmp.protocol.SVMPProtocol.LocationUpdate internalGetResult() {
        return result;
      }
      
      public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new org.mitre.svmp.protocol.SVMPProtocol.LocationUpdate();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(result);
      }
      
      public org.mitre.svmp.protocol.SVMPProtocol.LocationUpdate getDefaultInstanceForType() {
        return org.mitre.svmp.protocol.SVMPProtocol.LocationUpdate.getDefaultInstance();
      }
      
      public boolean isInitialized() {
        return result.isInitialized();
      }
      public org.mitre.svmp.protocol.SVMPProtocol.LocationUpdate build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
      
      private org.mitre.svmp.protocol.SVMPProtocol.LocationUpdate buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public org.mitre.svmp.protocol.SVMPProtocol.LocationUpdate buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        org.mitre.svmp.protocol.SVMPProtocol.LocationUpdate returnMe = result;
        result = null;
        return returnMe;
      }
      
      public Builder mergeFrom(org.mitre.svmp.protocol.SVMPProtocol.LocationUpdate other) {
        if (other == org.mitre.svmp.protocol.SVMPProtocol.LocationUpdate.getDefaultInstance()) return this;
        if (other.hasLatitude()) {
          setLatitude(other.getLatitude());
        }
        if (other.hasLongitude()) {
          setLongitude(other.getLongitude());
        }
        if (other.hasTime()) {
          setTime(other.getTime());
        }
        if (other.hasProvider()) {
          setProvider(other.getProvider());
        }
        if (other.hasAccuracy()) {
          setAccuracy(other.getAccuracy());
        }
        if (other.hasAltitude()) {
          setAltitude(other.getAltitude());
        }
        if (other.hasBearing()) {
          setBearing(other.getBearing());
        }
        if (other.hasSpeed()) {
          setSpeed(other.getSpeed());
        }
        return this;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              return this;
            default: {
              if (!parseUnknownField(input, extensionRegistry, tag)) {
                return this;
              }
              break;
            }
            case 9: {
              setLatitude(input.readDouble());
              break;
            }
            case 17: {
              setLongitude(input.readDouble());
              break;
            }
            case 24: {
              setTime(input.readInt64());
              break;
            }
            case 34: {
              setProvider(input.readString());
              break;
            }
            case 45: {
              setAccuracy(input.readFloat());
              break;
            }
            case 49: {
              setAltitude(input.readDouble());
              break;
            }
            case 61: {
              setBearing(input.readFloat());
              break;
            }
            case 69: {
              setSpeed(input.readFloat());
              break;
            }
          }
        }
      }
      
      
      // required double latitude = 1;
      public boolean hasLatitude() {
        return result.hasLatitude();
      }
      public double getLatitude() {
        return result.getLatitude();
      }
      public Builder setLatitude(double value) {
        result.hasLatitude = true;
        result.latitude_ = value;
        return this;
      }
      public Builder clearLatitude() {
        result.hasLatitude = false;
        result.latitude_ = 0D;
        return this;
      }
      
      // required double longitude = 2;
      public boolean hasLongitude() {
        return result.hasLongitude();
      }
      public double getLongitude() {
        return result.getLongitude();
      }
      public Builder setLongitude(double value) {
        result.hasLongitude = true;
        result.longitude_ = value;
        return this;
      }
      public Builder clearLongitude() {
        result.hasLongitude = false;
        result.longitude_ = 0D;
        return this;
      }
      
      // required int64 time = 3;
      public boolean hasTime() {
        return result.hasTime();
      }
      public long getTime() {
        return result.getTime();
      }
      public Builder setTime(long value) {
        result.hasTime = true;
        result.time_ = value;
        return this;
      }
      public Builder clearTime() {
        result.hasTime = false;
        result.time_ = 0L;
        return this;
      }
      
      // optional string provider = 4;
      public boolean hasProvider() {
        return result.hasProvider();
      }
      public java.lang.String getProvider() {
        return result.getProvider();
      }
      public Builder setProvider(java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  result.hasProvider = true;
        result.provider_ = value;
        return this;
      }
      public Builder clearProvider() {
        result.hasProvider = false;
        result.provider_ = getDefaultInstance().getProvider();
        return this;
      }
      
      // optional float accuracy = 5;
      public boolean hasAccuracy() {
        return result.hasAccuracy();
      }
      public float getAccuracy() {
        return result.getAccuracy();
      }
      public Builder setAccuracy(float value) {
        result.hasAccuracy = true;
        result.accuracy_ = value;
        return this;
      }
      public Builder clearAccuracy() {
        result.hasAccuracy = false;
        result.accuracy_ = 0F;
        return this;
      }
      
      // optional double altitude = 6;
      public boolean hasAltitude() {
        return result.hasAltitude();
      }
      public double getAltitude() {
        return result.getAltitude();
      }
      public Builder setAltitude(double value) {
        result.hasAltitude = true;
        result.altitude_ = value;
        return this;
      }
      public Builder clearAltitude() {
        result.hasAltitude = false;
        result.altitude_ = 0D;
        return this;
      }
      
      // optional float bearing = 7;
      public boolean hasBearing() {
        return result.hasBearing();
      }
      public float getBearing() {
        return result.getBearing();
      }
      public Builder setBearing(float value) {
        result.hasBearing = true;
        result.bearing_ = value;
        return this;
      }
      public Builder clearBearing() {
        result.hasBearing = false;
        result.bearing_ = 0F;
        return this;
      }
      
      // optional float speed = 8;
      public boolean hasSpeed() {
        return result.hasSpeed();
      }
      public float getSpeed() {
        return result.getSpeed();
      }
      public Builder setSpeed(float value) {
        result.hasSpeed = true;
        result.speed_ = value;
        return this;
      }
      public Builder clearSpeed() {
        result.hasSpeed = false;
        result.speed_ = 0F;
        return this;
      }
    }
    
    static {
      org.mitre.svmp.protocol.SVMPProtocol.internalForceInit();
    }
  }
  
  public static final class LocationRequest extends
      com.google.protobuf.GeneratedMessageLite {
    // Use LocationRequest.newBuilder() to construct.
    private LocationRequest() {}
    
    private static final LocationRequest defaultInstance = new LocationRequest();
    public static LocationRequest getDefaultInstance() {
      return defaultInstance;
    }
    
    public LocationRequest getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public enum LocationRequestType
        implements com.google.protobuf.Internal.EnumLite {
      PROVIDERINFO(0, 1),
      PROVIDERSTATUS(1, 2),
      PROVIDERENABLED(2, 3),
      LOCATIONUPDATE(3, 4),
      ;
      
      
      public final int getNumber() { return value; }
      
      public static LocationRequestType valueOf(int value) {
        switch (value) {
          case 1: return PROVIDERINFO;
          case 2: return PROVIDERSTATUS;
          case 3: return PROVIDERENABLED;
          case 4: return LOCATIONUPDATE;
          default: return null;
        }
      }
      
      public static com.google.protobuf.Internal.EnumLiteMap<LocationRequestType>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static com.google.protobuf.Internal.EnumLiteMap<LocationRequestType>
          internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<LocationRequestType>() {
              public LocationRequestType findValueByNumber(int number) {
                return LocationRequestType.valueOf(number)
      ;        }
            };
      
      private final int index;
      private final int value;
      private LocationRequestType(int index, int value) {
        this.index = index;
        this.value = value;
      }
    }
    
    // required .svmp.LocationRequest.LocationRequestType type = 1;
    public static final int TYPE_FIELD_NUMBER = 1;
    private boolean hasType;
    private org.mitre.svmp.protocol.SVMPProtocol.LocationRequest.LocationRequestType type_ = org.mitre.svmp.protocol.SVMPProtocol.LocationRequest.LocationRequestType.PROVIDERINFO;
    public boolean hasType() { return hasType; }
    public org.mitre.svmp.protocol.SVMPProtocol.LocationRequest.LocationRequestType getType() { return type_; }
    
    // optional .svmp.LocationProviderInfo providerInfo = 2;
    public static final int PROVIDERINFO_FIELD_NUMBER = 2;
    private boolean hasProviderInfo;
    private org.mitre.svmp.protocol.SVMPProtocol.LocationProviderInfo providerInfo_ = org.mitre.svmp.protocol.SVMPProtocol.LocationProviderInfo.getDefaultInstance();
    public boolean hasProviderInfo() { return hasProviderInfo; }
    public org.mitre.svmp.protocol.SVMPProtocol.LocationProviderInfo getProviderInfo() { return providerInfo_; }
    
    // optional .svmp.LocationProviderStatus providerStatus = 3;
    public static final int PROVIDERSTATUS_FIELD_NUMBER = 3;
    private boolean hasProviderStatus;
    private org.mitre.svmp.protocol.SVMPProtocol.LocationProviderStatus providerStatus_ = org.mitre.svmp.protocol.SVMPProtocol.LocationProviderStatus.getDefaultInstance();
    public boolean hasProviderStatus() { return hasProviderStatus; }
    public org.mitre.svmp.protocol.SVMPProtocol.LocationProviderStatus getProviderStatus() { return providerStatus_; }
    
    // optional .svmp.LocationProviderEnabled providerEnabled = 4;
    public static final int PROVIDERENABLED_FIELD_NUMBER = 4;
    private boolean hasProviderEnabled;
    private org.mitre.svmp.protocol.SVMPProtocol.LocationProviderEnabled providerEnabled_ = org.mitre.svmp.protocol.SVMPProtocol.LocationProviderEnabled.getDefaultInstance();
    public boolean hasProviderEnabled() { return hasProviderEnabled; }
    public org.mitre.svmp.protocol.SVMPProtocol.LocationProviderEnabled getProviderEnabled() { return providerEnabled_; }
    
    // optional .svmp.LocationUpdate update = 5;
    public static final int UPDATE_FIELD_NUMBER = 5;
    private boolean hasUpdate;
    private org.mitre.svmp.protocol.SVMPProtocol.LocationUpdate update_ = org.mitre.svmp.protocol.SVMPProtocol.LocationUpdate.getDefaultInstance();
    public boolean hasUpdate() { return hasUpdate; }
    public org.mitre.svmp.protocol.SVMPProtocol.LocationUpdate getUpdate() { return update_; }
    
    public final boolean isInitialized() {
      if (!hasType) return false;
      if (hasProviderInfo()) {
        if (!getProviderInfo().isInitialized()) return false;
      }
      if (hasProviderStatus()) {
        if (!getProviderStatus().isInitialized()) return false;
      }
      if (hasProviderEnabled()) {
        if (!getProviderEnabled().isInitialized()) return false;
      }
      if (hasUpdate()) {
        if (!getUpdate().isInitialized()) return false;
      }
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (hasType()) {
        output.writeEnum(1, getType().getNumber());
      }
      if (hasProviderInfo()) {
        output.writeMessage(2, getProviderInfo());
      }
      if (hasProviderStatus()) {
        output.writeMessage(3, getProviderStatus());
      }
      if (hasProviderEnabled()) {
        output.writeMessage(4, getProviderEnabled());
      }
      if (hasUpdate()) {
        output.writeMessage(5, getUpdate());
      }
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (hasType()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(1, getType().getNumber());
      }
      if (hasProviderInfo()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, getProviderInfo());
      }
      if (hasProviderStatus()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, getProviderStatus());
      }
      if (hasProviderEnabled()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, getProviderEnabled());
      }
      if (hasUpdate()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, getUpdate());
      }
      memoizedSerializedSize = size;
      return size;
    }
    
    public static org.mitre.svmp.protocol.SVMPProtocol.LocationRequest parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.LocationRequest parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.LocationRequest parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.LocationRequest parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.LocationRequest parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.LocationRequest parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.LocationRequest parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeDelimitedFrom(input).buildParsed();
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.LocationRequest parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeDelimitedFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.LocationRequest parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.LocationRequest parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.mitre.svmp.protocol.SVMPProtocol.LocationRequest prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          org.mitre.svmp.protocol.SVMPProtocol.LocationRequest, Builder> {
      private org.mitre.svmp.protocol.SVMPProtocol.LocationRequest result;
      
      // Construct using org.mitre.svmp.protocol.SVMPProtocol.LocationRequest.newBuilder()
      private Builder() {}
      
      private static Builder create() {
        Builder builder = new Builder();
        builder.result = new org.mitre.svmp.protocol.SVMPProtocol.LocationRequest();
        return builder;
      }
      
      protected org.mitre.svmp.protocol.SVMPProtocol.LocationRequest internalGetResult() {
        return result;
      }
      
      public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new org.mitre.svmp.protocol.SVMPProtocol.LocationRequest();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(result);
      }
      
      public org.mitre.svmp.protocol.SVMPProtocol.LocationRequest getDefaultInstanceForType() {
        return org.mitre.svmp.protocol.SVMPProtocol.LocationRequest.getDefaultInstance();
      }
      
      public boolean isInitialized() {
        return result.isInitialized();
      }
      public org.mitre.svmp.protocol.SVMPProtocol.LocationRequest build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
      
      private org.mitre.svmp.protocol.SVMPProtocol.LocationRequest buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public org.mitre.svmp.protocol.SVMPProtocol.LocationRequest buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        org.mitre.svmp.protocol.SVMPProtocol.LocationRequest returnMe = result;
        result = null;
        return returnMe;
      }
      
      public Builder mergeFrom(org.mitre.svmp.protocol.SVMPProtocol.LocationRequest other) {
        if (other == org.mitre.svmp.protocol.SVMPProtocol.LocationRequest.getDefaultInstance()) return this;
        if (other.hasType()) {
          setType(other.getType());
        }
        if (other.hasProviderInfo()) {
          mergeProviderInfo(other.getProviderInfo());
        }
        if (other.hasProviderStatus()) {
          mergeProviderStatus(other.getProviderStatus());
        }
        if (other.hasProviderEnabled()) {
          mergeProviderEnabled(other.getProviderEnabled());
        }
        if (other.hasUpdate()) {
          mergeUpdate(other.getUpdate());
        }
        return this;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              return this;
            default: {
              if (!parseUnknownField(input, extensionRegistry, tag)) {
                return this;
              }
              break;
            }
            case 8: {
              int rawValue = input.readEnum();
              org.mitre.svmp.protocol.SVMPProtocol.LocationRequest.LocationRequestType value = org.mitre.svmp.protocol.SVMPProtocol.LocationRequest.LocationRequestType.valueOf(rawValue);
              if (value != null) {
                setType(value);
              }
              break;
            }
            case 18: {
              org.mitre.svmp.protocol.SVMPProtocol.LocationProviderInfo.Builder subBuilder = org.mitre.svmp.protocol.SVMPProtocol.LocationProviderInfo.newBuilder();
              if (hasProviderInfo()) {
                subBuilder.mergeFrom(getProviderInfo());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setProviderInfo(subBuilder.buildPartial());
              break;
            }
            case 26: {
              org.mitre.svmp.protocol.SVMPProtocol.LocationProviderStatus.Builder subBuilder = org.mitre.svmp.protocol.SVMPProtocol.LocationProviderStatus.newBuilder();
              if (hasProviderStatus()) {
                subBuilder.mergeFrom(getProviderStatus());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setProviderStatus(subBuilder.buildPartial());
              break;
            }
            case 34: {
              org.mitre.svmp.protocol.SVMPProtocol.LocationProviderEnabled.Builder subBuilder = org.mitre.svmp.protocol.SVMPProtocol.LocationProviderEnabled.newBuilder();
              if (hasProviderEnabled()) {
                subBuilder.mergeFrom(getProviderEnabled());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setProviderEnabled(subBuilder.buildPartial());
              break;
            }
            case 42: {
              org.mitre.svmp.protocol.SVMPProtocol.LocationUpdate.Builder subBuilder = org.mitre.svmp.protocol.SVMPProtocol.LocationUpdate.newBuilder();
              if (hasUpdate()) {
                subBuilder.mergeFrom(getUpdate());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setUpdate(subBuilder.buildPartial());
              break;
            }
          }
        }
      }
      
      
      // required .svmp.LocationRequest.LocationRequestType type = 1;
      public boolean hasType() {
        return result.hasType();
      }
      public org.mitre.svmp.protocol.SVMPProtocol.LocationRequest.LocationRequestType getType() {
        return result.getType();
      }
      public Builder setType(org.mitre.svmp.protocol.SVMPProtocol.LocationRequest.LocationRequestType value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasType = true;
        result.type_ = value;
        return this;
      }
      public Builder clearType() {
        result.hasType = false;
        result.type_ = org.mitre.svmp.protocol.SVMPProtocol.LocationRequest.LocationRequestType.PROVIDERINFO;
        return this;
      }
      
      // optional .svmp.LocationProviderInfo providerInfo = 2;
      public boolean hasProviderInfo() {
        return result.hasProviderInfo();
      }
      public org.mitre.svmp.protocol.SVMPProtocol.LocationProviderInfo getProviderInfo() {
        return result.getProviderInfo();
      }
      public Builder setProviderInfo(org.mitre.svmp.protocol.SVMPProtocol.LocationProviderInfo value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasProviderInfo = true;
        result.providerInfo_ = value;
        return this;
      }
      public Builder setProviderInfo(org.mitre.svmp.protocol.SVMPProtocol.LocationProviderInfo.Builder builderForValue) {
        result.hasProviderInfo = true;
        result.providerInfo_ = builderForValue.build();
        return this;
      }
      public Builder mergeProviderInfo(org.mitre.svmp.protocol.SVMPProtocol.LocationProviderInfo value) {
        if (result.hasProviderInfo() &&
            result.providerInfo_ != org.mitre.svmp.protocol.SVMPProtocol.LocationProviderInfo.getDefaultInstance()) {
          result.providerInfo_ =
            org.mitre.svmp.protocol.SVMPProtocol.LocationProviderInfo.newBuilder(result.providerInfo_).mergeFrom(value).buildPartial();
        } else {
          result.providerInfo_ = value;
        }
        result.hasProviderInfo = true;
        return this;
      }
      public Builder clearProviderInfo() {
        result.hasProviderInfo = false;
        result.providerInfo_ = org.mitre.svmp.protocol.SVMPProtocol.LocationProviderInfo.getDefaultInstance();
        return this;
      }
      
      // optional .svmp.LocationProviderStatus providerStatus = 3;
      public boolean hasProviderStatus() {
        return result.hasProviderStatus();
      }
      public org.mitre.svmp.protocol.SVMPProtocol.LocationProviderStatus getProviderStatus() {
        return result.getProviderStatus();
      }
      public Builder setProviderStatus(org.mitre.svmp.protocol.SVMPProtocol.LocationProviderStatus value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasProviderStatus = true;
        result.providerStatus_ = value;
        return this;
      }
      public Builder setProviderStatus(org.mitre.svmp.protocol.SVMPProtocol.LocationProviderStatus.Builder builderForValue) {
        result.hasProviderStatus = true;
        result.providerStatus_ = builderForValue.build();
        return this;
      }
      public Builder mergeProviderStatus(org.mitre.svmp.protocol.SVMPProtocol.LocationProviderStatus value) {
        if (result.hasProviderStatus() &&
            result.providerStatus_ != org.mitre.svmp.protocol.SVMPProtocol.LocationProviderStatus.getDefaultInstance()) {
          result.providerStatus_ =
            org.mitre.svmp.protocol.SVMPProtocol.LocationProviderStatus.newBuilder(result.providerStatus_).mergeFrom(value).buildPartial();
        } else {
          result.providerStatus_ = value;
        }
        result.hasProviderStatus = true;
        return this;
      }
      public Builder clearProviderStatus() {
        result.hasProviderStatus = false;
        result.providerStatus_ = org.mitre.svmp.protocol.SVMPProtocol.LocationProviderStatus.getDefaultInstance();
        return this;
      }
      
      // optional .svmp.LocationProviderEnabled providerEnabled = 4;
      public boolean hasProviderEnabled() {
        return result.hasProviderEnabled();
      }
      public org.mitre.svmp.protocol.SVMPProtocol.LocationProviderEnabled getProviderEnabled() {
        return result.getProviderEnabled();
      }
      public Builder setProviderEnabled(org.mitre.svmp.protocol.SVMPProtocol.LocationProviderEnabled value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasProviderEnabled = true;
        result.providerEnabled_ = value;
        return this;
      }
      public Builder setProviderEnabled(org.mitre.svmp.protocol.SVMPProtocol.LocationProviderEnabled.Builder builderForValue) {
        result.hasProviderEnabled = true;
        result.providerEnabled_ = builderForValue.build();
        return this;
      }
      public Builder mergeProviderEnabled(org.mitre.svmp.protocol.SVMPProtocol.LocationProviderEnabled value) {
        if (result.hasProviderEnabled() &&
            result.providerEnabled_ != org.mitre.svmp.protocol.SVMPProtocol.LocationProviderEnabled.getDefaultInstance()) {
          result.providerEnabled_ =
            org.mitre.svmp.protocol.SVMPProtocol.LocationProviderEnabled.newBuilder(result.providerEnabled_).mergeFrom(value).buildPartial();
        } else {
          result.providerEnabled_ = value;
        }
        result.hasProviderEnabled = true;
        return this;
      }
      public Builder clearProviderEnabled() {
        result.hasProviderEnabled = false;
        result.providerEnabled_ = org.mitre.svmp.protocol.SVMPProtocol.LocationProviderEnabled.getDefaultInstance();
        return this;
      }
      
      // optional .svmp.LocationUpdate update = 5;
      public boolean hasUpdate() {
        return result.hasUpdate();
      }
      public org.mitre.svmp.protocol.SVMPProtocol.LocationUpdate getUpdate() {
        return result.getUpdate();
      }
      public Builder setUpdate(org.mitre.svmp.protocol.SVMPProtocol.LocationUpdate value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasUpdate = true;
        result.update_ = value;
        return this;
      }
      public Builder setUpdate(org.mitre.svmp.protocol.SVMPProtocol.LocationUpdate.Builder builderForValue) {
        result.hasUpdate = true;
        result.update_ = builderForValue.build();
        return this;
      }
      public Builder mergeUpdate(org.mitre.svmp.protocol.SVMPProtocol.LocationUpdate value) {
        if (result.hasUpdate() &&
            result.update_ != org.mitre.svmp.protocol.SVMPProtocol.LocationUpdate.getDefaultInstance()) {
          result.update_ =
            org.mitre.svmp.protocol.SVMPProtocol.LocationUpdate.newBuilder(result.update_).mergeFrom(value).buildPartial();
        } else {
          result.update_ = value;
        }
        result.hasUpdate = true;
        return this;
      }
      public Builder clearUpdate() {
        result.hasUpdate = false;
        result.update_ = org.mitre.svmp.protocol.SVMPProtocol.LocationUpdate.getDefaultInstance();
        return this;
      }
    }
    
    static {
      org.mitre.svmp.protocol.SVMPProtocol.internalForceInit();
    }
  }
  
  public static final class LocationSubscribe extends
      com.google.protobuf.GeneratedMessageLite {
    // Use LocationSubscribe.newBuilder() to construct.
    private LocationSubscribe() {}
    
    private static final LocationSubscribe defaultInstance = new LocationSubscribe();
    public static LocationSubscribe getDefaultInstance() {
      return defaultInstance;
    }
    
    public LocationSubscribe getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public enum LocationSubscribeType
        implements com.google.protobuf.Internal.EnumLite {
      SINGLE_UPDATE(0, 1),
      MULTIPLE_UPDATES(1, 2),
      ;
      
      
      public final int getNumber() { return value; }
      
      public static LocationSubscribeType valueOf(int value) {
        switch (value) {
          case 1: return SINGLE_UPDATE;
          case 2: return MULTIPLE_UPDATES;
          default: return null;
        }
      }
      
      public static com.google.protobuf.Internal.EnumLiteMap<LocationSubscribeType>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static com.google.protobuf.Internal.EnumLiteMap<LocationSubscribeType>
          internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<LocationSubscribeType>() {
              public LocationSubscribeType findValueByNumber(int number) {
                return LocationSubscribeType.valueOf(number)
      ;        }
            };
      
      private final int index;
      private final int value;
      private LocationSubscribeType(int index, int value) {
        this.index = index;
        this.value = value;
      }
    }
    
    // required .svmp.LocationSubscribe.LocationSubscribeType type = 1;
    public static final int TYPE_FIELD_NUMBER = 1;
    private boolean hasType;
    private org.mitre.svmp.protocol.SVMPProtocol.LocationSubscribe.LocationSubscribeType type_ = org.mitre.svmp.protocol.SVMPProtocol.LocationSubscribe.LocationSubscribeType.SINGLE_UPDATE;
    public boolean hasType() { return hasType; }
    public org.mitre.svmp.protocol.SVMPProtocol.LocationSubscribe.LocationSubscribeType getType() { return type_; }
    
    // required string provider = 2;
    public static final int PROVIDER_FIELD_NUMBER = 2;
    private boolean hasProvider;
    private java.lang.String provider_ = "";
    public boolean hasProvider() { return hasProvider; }
    public java.lang.String getProvider() { return provider_; }
    
    // optional int64 minTime = 3;
    public static final int MINTIME_FIELD_NUMBER = 3;
    private boolean hasMinTime;
    private long minTime_ = 0L;
    public boolean hasMinTime() { return hasMinTime; }
    public long getMinTime() { return minTime_; }
    
    // optional float minDistance = 4;
    public static final int MINDISTANCE_FIELD_NUMBER = 4;
    private boolean hasMinDistance;
    private float minDistance_ = 0F;
    public boolean hasMinDistance() { return hasMinDistance; }
    public float getMinDistance() { return minDistance_; }
    
    public final boolean isInitialized() {
      if (!hasType) return false;
      if (!hasProvider) return false;
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (hasType()) {
        output.writeEnum(1, getType().getNumber());
      }
      if (hasProvider()) {
        output.writeString(2, getProvider());
      }
      if (hasMinTime()) {
        output.writeInt64(3, getMinTime());
      }
      if (hasMinDistance()) {
        output.writeFloat(4, getMinDistance());
      }
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (hasType()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(1, getType().getNumber());
      }
      if (hasProvider()) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(2, getProvider());
      }
      if (hasMinTime()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(3, getMinTime());
      }
      if (hasMinDistance()) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(4, getMinDistance());
      }
      memoizedSerializedSize = size;
      return size;
    }
    
    public static org.mitre.svmp.protocol.SVMPProtocol.LocationSubscribe parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.LocationSubscribe parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.LocationSubscribe parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.LocationSubscribe parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.LocationSubscribe parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.LocationSubscribe parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.LocationSubscribe parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeDelimitedFrom(input).buildParsed();
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.LocationSubscribe parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeDelimitedFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.LocationSubscribe parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.LocationSubscribe parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.mitre.svmp.protocol.SVMPProtocol.LocationSubscribe prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          org.mitre.svmp.protocol.SVMPProtocol.LocationSubscribe, Builder> {
      private org.mitre.svmp.protocol.SVMPProtocol.LocationSubscribe result;
      
      // Construct using org.mitre.svmp.protocol.SVMPProtocol.LocationSubscribe.newBuilder()
      private Builder() {}
      
      private static Builder create() {
        Builder builder = new Builder();
        builder.result = new org.mitre.svmp.protocol.SVMPProtocol.LocationSubscribe();
        return builder;
      }
      
      protected org.mitre.svmp.protocol.SVMPProtocol.LocationSubscribe internalGetResult() {
        return result;
      }
      
      public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new org.mitre.svmp.protocol.SVMPProtocol.LocationSubscribe();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(result);
      }
      
      public org.mitre.svmp.protocol.SVMPProtocol.LocationSubscribe getDefaultInstanceForType() {
        return org.mitre.svmp.protocol.SVMPProtocol.LocationSubscribe.getDefaultInstance();
      }
      
      public boolean isInitialized() {
        return result.isInitialized();
      }
      public org.mitre.svmp.protocol.SVMPProtocol.LocationSubscribe build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
      
      private org.mitre.svmp.protocol.SVMPProtocol.LocationSubscribe buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public org.mitre.svmp.protocol.SVMPProtocol.LocationSubscribe buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        org.mitre.svmp.protocol.SVMPProtocol.LocationSubscribe returnMe = result;
        result = null;
        return returnMe;
      }
      
      public Builder mergeFrom(org.mitre.svmp.protocol.SVMPProtocol.LocationSubscribe other) {
        if (other == org.mitre.svmp.protocol.SVMPProtocol.LocationSubscribe.getDefaultInstance()) return this;
        if (other.hasType()) {
          setType(other.getType());
        }
        if (other.hasProvider()) {
          setProvider(other.getProvider());
        }
        if (other.hasMinTime()) {
          setMinTime(other.getMinTime());
        }
        if (other.hasMinDistance()) {
          setMinDistance(other.getMinDistance());
        }
        return this;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              return this;
            default: {
              if (!parseUnknownField(input, extensionRegistry, tag)) {
                return this;
              }
              break;
            }
            case 8: {
              int rawValue = input.readEnum();
              org.mitre.svmp.protocol.SVMPProtocol.LocationSubscribe.LocationSubscribeType value = org.mitre.svmp.protocol.SVMPProtocol.LocationSubscribe.LocationSubscribeType.valueOf(rawValue);
              if (value != null) {
                setType(value);
              }
              break;
            }
            case 18: {
              setProvider(input.readString());
              break;
            }
            case 24: {
              setMinTime(input.readInt64());
              break;
            }
            case 37: {
              setMinDistance(input.readFloat());
              break;
            }
          }
        }
      }
      
      
      // required .svmp.LocationSubscribe.LocationSubscribeType type = 1;
      public boolean hasType() {
        return result.hasType();
      }
      public org.mitre.svmp.protocol.SVMPProtocol.LocationSubscribe.LocationSubscribeType getType() {
        return result.getType();
      }
      public Builder setType(org.mitre.svmp.protocol.SVMPProtocol.LocationSubscribe.LocationSubscribeType value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasType = true;
        result.type_ = value;
        return this;
      }
      public Builder clearType() {
        result.hasType = false;
        result.type_ = org.mitre.svmp.protocol.SVMPProtocol.LocationSubscribe.LocationSubscribeType.SINGLE_UPDATE;
        return this;
      }
      
      // required string provider = 2;
      public boolean hasProvider() {
        return result.hasProvider();
      }
      public java.lang.String getProvider() {
        return result.getProvider();
      }
      public Builder setProvider(java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  result.hasProvider = true;
        result.provider_ = value;
        return this;
      }
      public Builder clearProvider() {
        result.hasProvider = false;
        result.provider_ = getDefaultInstance().getProvider();
        return this;
      }
      
      // optional int64 minTime = 3;
      public boolean hasMinTime() {
        return result.hasMinTime();
      }
      public long getMinTime() {
        return result.getMinTime();
      }
      public Builder setMinTime(long value) {
        result.hasMinTime = true;
        result.minTime_ = value;
        return this;
      }
      public Builder clearMinTime() {
        result.hasMinTime = false;
        result.minTime_ = 0L;
        return this;
      }
      
      // optional float minDistance = 4;
      public boolean hasMinDistance() {
        return result.hasMinDistance();
      }
      public float getMinDistance() {
        return result.getMinDistance();
      }
      public Builder setMinDistance(float value) {
        result.hasMinDistance = true;
        result.minDistance_ = value;
        return this;
      }
      public Builder clearMinDistance() {
        result.hasMinDistance = false;
        result.minDistance_ = 0F;
        return this;
      }
    }
    
    static {
      org.mitre.svmp.protocol.SVMPProtocol.internalForceInit();
    }
  }
  
  public static final class LocationUnsubscribe extends
      com.google.protobuf.GeneratedMessageLite {
    // Use LocationUnsubscribe.newBuilder() to construct.
    private LocationUnsubscribe() {}
    
    private static final LocationUnsubscribe defaultInstance = new LocationUnsubscribe();
    public static LocationUnsubscribe getDefaultInstance() {
      return defaultInstance;
    }
    
    public LocationUnsubscribe getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    // required string provider = 1;
    public static final int PROVIDER_FIELD_NUMBER = 1;
    private boolean hasProvider;
    private java.lang.String provider_ = "";
    public boolean hasProvider() { return hasProvider; }
    public java.lang.String getProvider() { return provider_; }
    
    public final boolean isInitialized() {
      if (!hasProvider) return false;
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (hasProvider()) {
        output.writeString(1, getProvider());
      }
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (hasProvider()) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(1, getProvider());
      }
      memoizedSerializedSize = size;
      return size;
    }
    
    public static org.mitre.svmp.protocol.SVMPProtocol.LocationUnsubscribe parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.LocationUnsubscribe parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.LocationUnsubscribe parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.LocationUnsubscribe parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.LocationUnsubscribe parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.LocationUnsubscribe parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.LocationUnsubscribe parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeDelimitedFrom(input).buildParsed();
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.LocationUnsubscribe parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeDelimitedFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.LocationUnsubscribe parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.LocationUnsubscribe parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.mitre.svmp.protocol.SVMPProtocol.LocationUnsubscribe prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          org.mitre.svmp.protocol.SVMPProtocol.LocationUnsubscribe, Builder> {
      private org.mitre.svmp.protocol.SVMPProtocol.LocationUnsubscribe result;
      
      // Construct using org.mitre.svmp.protocol.SVMPProtocol.LocationUnsubscribe.newBuilder()
      private Builder() {}
      
      private static Builder create() {
        Builder builder = new Builder();
        builder.result = new org.mitre.svmp.protocol.SVMPProtocol.LocationUnsubscribe();
        return builder;
      }
      
      protected org.mitre.svmp.protocol.SVMPProtocol.LocationUnsubscribe internalGetResult() {
        return result;
      }
      
      public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new org.mitre.svmp.protocol.SVMPProtocol.LocationUnsubscribe();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(result);
      }
      
      public org.mitre.svmp.protocol.SVMPProtocol.LocationUnsubscribe getDefaultInstanceForType() {
        return org.mitre.svmp.protocol.SVMPProtocol.LocationUnsubscribe.getDefaultInstance();
      }
      
      public boolean isInitialized() {
        return result.isInitialized();
      }
      public org.mitre.svmp.protocol.SVMPProtocol.LocationUnsubscribe build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
      
      private org.mitre.svmp.protocol.SVMPProtocol.LocationUnsubscribe buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public org.mitre.svmp.protocol.SVMPProtocol.LocationUnsubscribe buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        org.mitre.svmp.protocol.SVMPProtocol.LocationUnsubscribe returnMe = result;
        result = null;
        return returnMe;
      }
      
      public Builder mergeFrom(org.mitre.svmp.protocol.SVMPProtocol.LocationUnsubscribe other) {
        if (other == org.mitre.svmp.protocol.SVMPProtocol.LocationUnsubscribe.getDefaultInstance()) return this;
        if (other.hasProvider()) {
          setProvider(other.getProvider());
        }
        return this;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              return this;
            default: {
              if (!parseUnknownField(input, extensionRegistry, tag)) {
                return this;
              }
              break;
            }
            case 10: {
              setProvider(input.readString());
              break;
            }
          }
        }
      }
      
      
      // required string provider = 1;
      public boolean hasProvider() {
        return result.hasProvider();
      }
      public java.lang.String getProvider() {
        return result.getProvider();
      }
      public Builder setProvider(java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  result.hasProvider = true;
        result.provider_ = value;
        return this;
      }
      public Builder clearProvider() {
        result.hasProvider = false;
        result.provider_ = getDefaultInstance().getProvider();
        return this;
      }
    }
    
    static {
      org.mitre.svmp.protocol.SVMPProtocol.internalForceInit();
    }
  }
  
  public static final class LocationResponse extends
      com.google.protobuf.GeneratedMessageLite {
    // Use LocationResponse.newBuilder() to construct.
    private LocationResponse() {}
    
    private static final LocationResponse defaultInstance = new LocationResponse();
    public static LocationResponse getDefaultInstance() {
      return defaultInstance;
    }
    
    public LocationResponse getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public enum LocationResponseType
        implements com.google.protobuf.Internal.EnumLite {
      SUBSCRIBE(0, 1),
      UNSUBSCRIBE(1, 2),
      ;
      
      
      public final int getNumber() { return value; }
      
      public static LocationResponseType valueOf(int value) {
        switch (value) {
          case 1: return SUBSCRIBE;
          case 2: return UNSUBSCRIBE;
          default: return null;
        }
      }
      
      public static com.google.protobuf.Internal.EnumLiteMap<LocationResponseType>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static com.google.protobuf.Internal.EnumLiteMap<LocationResponseType>
          internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<LocationResponseType>() {
              public LocationResponseType findValueByNumber(int number) {
                return LocationResponseType.valueOf(number)
      ;        }
            };
      
      private final int index;
      private final int value;
      private LocationResponseType(int index, int value) {
        this.index = index;
        this.value = value;
      }
    }
    
    // required .svmp.LocationResponse.LocationResponseType type = 1;
    public static final int TYPE_FIELD_NUMBER = 1;
    private boolean hasType;
    private org.mitre.svmp.protocol.SVMPProtocol.LocationResponse.LocationResponseType type_ = org.mitre.svmp.protocol.SVMPProtocol.LocationResponse.LocationResponseType.SUBSCRIBE;
    public boolean hasType() { return hasType; }
    public org.mitre.svmp.protocol.SVMPProtocol.LocationResponse.LocationResponseType getType() { return type_; }
    
    // optional .svmp.LocationSubscribe subscribe = 2;
    public static final int SUBSCRIBE_FIELD_NUMBER = 2;
    private boolean hasSubscribe;
    private org.mitre.svmp.protocol.SVMPProtocol.LocationSubscribe subscribe_ = org.mitre.svmp.protocol.SVMPProtocol.LocationSubscribe.getDefaultInstance();
    public boolean hasSubscribe() { return hasSubscribe; }
    public org.mitre.svmp.protocol.SVMPProtocol.LocationSubscribe getSubscribe() { return subscribe_; }
    
    // optional .svmp.LocationUnsubscribe unsubscribe = 3;
    public static final int UNSUBSCRIBE_FIELD_NUMBER = 3;
    private boolean hasUnsubscribe;
    private org.mitre.svmp.protocol.SVMPProtocol.LocationUnsubscribe unsubscribe_ = org.mitre.svmp.protocol.SVMPProtocol.LocationUnsubscribe.getDefaultInstance();
    public boolean hasUnsubscribe() { return hasUnsubscribe; }
    public org.mitre.svmp.protocol.SVMPProtocol.LocationUnsubscribe getUnsubscribe() { return unsubscribe_; }
    
    public final boolean isInitialized() {
      if (!hasType) return false;
      if (hasSubscribe()) {
        if (!getSubscribe().isInitialized()) return false;
      }
      if (hasUnsubscribe()) {
        if (!getUnsubscribe().isInitialized()) return false;
      }
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (hasType()) {
        output.writeEnum(1, getType().getNumber());
      }
      if (hasSubscribe()) {
        output.writeMessage(2, getSubscribe());
      }
      if (hasUnsubscribe()) {
        output.writeMessage(3, getUnsubscribe());
      }
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (hasType()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(1, getType().getNumber());
      }
      if (hasSubscribe()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, getSubscribe());
      }
      if (hasUnsubscribe()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, getUnsubscribe());
      }
      memoizedSerializedSize = size;
      return size;
    }
    
    public static org.mitre.svmp.protocol.SVMPProtocol.LocationResponse parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.LocationResponse parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.LocationResponse parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.LocationResponse parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.LocationResponse parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.LocationResponse parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.LocationResponse parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeDelimitedFrom(input).buildParsed();
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.LocationResponse parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeDelimitedFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.LocationResponse parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.LocationResponse parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.mitre.svmp.protocol.SVMPProtocol.LocationResponse prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          org.mitre.svmp.protocol.SVMPProtocol.LocationResponse, Builder> {
      private org.mitre.svmp.protocol.SVMPProtocol.LocationResponse result;
      
      // Construct using org.mitre.svmp.protocol.SVMPProtocol.LocationResponse.newBuilder()
      private Builder() {}
      
      private static Builder create() {
        Builder builder = new Builder();
        builder.result = new org.mitre.svmp.protocol.SVMPProtocol.LocationResponse();
        return builder;
      }
      
      protected org.mitre.svmp.protocol.SVMPProtocol.LocationResponse internalGetResult() {
        return result;
      }
      
      public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new org.mitre.svmp.protocol.SVMPProtocol.LocationResponse();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(result);
      }
      
      public org.mitre.svmp.protocol.SVMPProtocol.LocationResponse getDefaultInstanceForType() {
        return org.mitre.svmp.protocol.SVMPProtocol.LocationResponse.getDefaultInstance();
      }
      
      public boolean isInitialized() {
        return result.isInitialized();
      }
      public org.mitre.svmp.protocol.SVMPProtocol.LocationResponse build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
      
      private org.mitre.svmp.protocol.SVMPProtocol.LocationResponse buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public org.mitre.svmp.protocol.SVMPProtocol.LocationResponse buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        org.mitre.svmp.protocol.SVMPProtocol.LocationResponse returnMe = result;
        result = null;
        return returnMe;
      }
      
      public Builder mergeFrom(org.mitre.svmp.protocol.SVMPProtocol.LocationResponse other) {
        if (other == org.mitre.svmp.protocol.SVMPProtocol.LocationResponse.getDefaultInstance()) return this;
        if (other.hasType()) {
          setType(other.getType());
        }
        if (other.hasSubscribe()) {
          mergeSubscribe(other.getSubscribe());
        }
        if (other.hasUnsubscribe()) {
          mergeUnsubscribe(other.getUnsubscribe());
        }
        return this;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              return this;
            default: {
              if (!parseUnknownField(input, extensionRegistry, tag)) {
                return this;
              }
              break;
            }
            case 8: {
              int rawValue = input.readEnum();
              org.mitre.svmp.protocol.SVMPProtocol.LocationResponse.LocationResponseType value = org.mitre.svmp.protocol.SVMPProtocol.LocationResponse.LocationResponseType.valueOf(rawValue);
              if (value != null) {
                setType(value);
              }
              break;
            }
            case 18: {
              org.mitre.svmp.protocol.SVMPProtocol.LocationSubscribe.Builder subBuilder = org.mitre.svmp.protocol.SVMPProtocol.LocationSubscribe.newBuilder();
              if (hasSubscribe()) {
                subBuilder.mergeFrom(getSubscribe());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setSubscribe(subBuilder.buildPartial());
              break;
            }
            case 26: {
              org.mitre.svmp.protocol.SVMPProtocol.LocationUnsubscribe.Builder subBuilder = org.mitre.svmp.protocol.SVMPProtocol.LocationUnsubscribe.newBuilder();
              if (hasUnsubscribe()) {
                subBuilder.mergeFrom(getUnsubscribe());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setUnsubscribe(subBuilder.buildPartial());
              break;
            }
          }
        }
      }
      
      
      // required .svmp.LocationResponse.LocationResponseType type = 1;
      public boolean hasType() {
        return result.hasType();
      }
      public org.mitre.svmp.protocol.SVMPProtocol.LocationResponse.LocationResponseType getType() {
        return result.getType();
      }
      public Builder setType(org.mitre.svmp.protocol.SVMPProtocol.LocationResponse.LocationResponseType value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasType = true;
        result.type_ = value;
        return this;
      }
      public Builder clearType() {
        result.hasType = false;
        result.type_ = org.mitre.svmp.protocol.SVMPProtocol.LocationResponse.LocationResponseType.SUBSCRIBE;
        return this;
      }
      
      // optional .svmp.LocationSubscribe subscribe = 2;
      public boolean hasSubscribe() {
        return result.hasSubscribe();
      }
      public org.mitre.svmp.protocol.SVMPProtocol.LocationSubscribe getSubscribe() {
        return result.getSubscribe();
      }
      public Builder setSubscribe(org.mitre.svmp.protocol.SVMPProtocol.LocationSubscribe value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasSubscribe = true;
        result.subscribe_ = value;
        return this;
      }
      public Builder setSubscribe(org.mitre.svmp.protocol.SVMPProtocol.LocationSubscribe.Builder builderForValue) {
        result.hasSubscribe = true;
        result.subscribe_ = builderForValue.build();
        return this;
      }
      public Builder mergeSubscribe(org.mitre.svmp.protocol.SVMPProtocol.LocationSubscribe value) {
        if (result.hasSubscribe() &&
            result.subscribe_ != org.mitre.svmp.protocol.SVMPProtocol.LocationSubscribe.getDefaultInstance()) {
          result.subscribe_ =
            org.mitre.svmp.protocol.SVMPProtocol.LocationSubscribe.newBuilder(result.subscribe_).mergeFrom(value).buildPartial();
        } else {
          result.subscribe_ = value;
        }
        result.hasSubscribe = true;
        return this;
      }
      public Builder clearSubscribe() {
        result.hasSubscribe = false;
        result.subscribe_ = org.mitre.svmp.protocol.SVMPProtocol.LocationSubscribe.getDefaultInstance();
        return this;
      }
      
      // optional .svmp.LocationUnsubscribe unsubscribe = 3;
      public boolean hasUnsubscribe() {
        return result.hasUnsubscribe();
      }
      public org.mitre.svmp.protocol.SVMPProtocol.LocationUnsubscribe getUnsubscribe() {
        return result.getUnsubscribe();
      }
      public Builder setUnsubscribe(org.mitre.svmp.protocol.SVMPProtocol.LocationUnsubscribe value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasUnsubscribe = true;
        result.unsubscribe_ = value;
        return this;
      }
      public Builder setUnsubscribe(org.mitre.svmp.protocol.SVMPProtocol.LocationUnsubscribe.Builder builderForValue) {
        result.hasUnsubscribe = true;
        result.unsubscribe_ = builderForValue.build();
        return this;
      }
      public Builder mergeUnsubscribe(org.mitre.svmp.protocol.SVMPProtocol.LocationUnsubscribe value) {
        if (result.hasUnsubscribe() &&
            result.unsubscribe_ != org.mitre.svmp.protocol.SVMPProtocol.LocationUnsubscribe.getDefaultInstance()) {
          result.unsubscribe_ =
            org.mitre.svmp.protocol.SVMPProtocol.LocationUnsubscribe.newBuilder(result.unsubscribe_).mergeFrom(value).buildPartial();
        } else {
          result.unsubscribe_ = value;
        }
        result.hasUnsubscribe = true;
        return this;
      }
      public Builder clearUnsubscribe() {
        result.hasUnsubscribe = false;
        result.unsubscribe_ = org.mitre.svmp.protocol.SVMPProtocol.LocationUnsubscribe.getDefaultInstance();
        return this;
      }
    }
    
    static {
      org.mitre.svmp.protocol.SVMPProtocol.internalForceInit();
    }
  }
  
  public static final class Authentication extends
      com.google.protobuf.GeneratedMessageLite {
    // Use Authentication.newBuilder() to construct.
    private Authentication() {}
    
    private static final Authentication defaultInstance = new Authentication();
    public static Authentication getDefaultInstance() {
      return defaultInstance;
    }
    
    public Authentication getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    // required string un = 1;
    public static final int UN_FIELD_NUMBER = 1;
    private boolean hasUn;
    private java.lang.String un_ = "";
    public boolean hasUn() { return hasUn; }
    public java.lang.String getUn() { return un_; }
    
    // required string pw = 2;
    public static final int PW_FIELD_NUMBER = 2;
    private boolean hasPw;
    private java.lang.String pw_ = "";
    public boolean hasPw() { return hasPw; }
    public java.lang.String getPw() { return pw_; }
    
    public final boolean isInitialized() {
      if (!hasUn) return false;
      if (!hasPw) return false;
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (hasUn()) {
        output.writeString(1, getUn());
      }
      if (hasPw()) {
        output.writeString(2, getPw());
      }
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (hasUn()) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(1, getUn());
      }
      if (hasPw()) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(2, getPw());
      }
      memoizedSerializedSize = size;
      return size;
    }
    
    public static org.mitre.svmp.protocol.SVMPProtocol.Authentication parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.Authentication parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.Authentication parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.Authentication parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.Authentication parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.Authentication parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.Authentication parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeDelimitedFrom(input).buildParsed();
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.Authentication parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeDelimitedFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.Authentication parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.Authentication parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.mitre.svmp.protocol.SVMPProtocol.Authentication prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          org.mitre.svmp.protocol.SVMPProtocol.Authentication, Builder> {
      private org.mitre.svmp.protocol.SVMPProtocol.Authentication result;
      
      // Construct using org.mitre.svmp.protocol.SVMPProtocol.Authentication.newBuilder()
      private Builder() {}
      
      private static Builder create() {
        Builder builder = new Builder();
        builder.result = new org.mitre.svmp.protocol.SVMPProtocol.Authentication();
        return builder;
      }
      
      protected org.mitre.svmp.protocol.SVMPProtocol.Authentication internalGetResult() {
        return result;
      }
      
      public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new org.mitre.svmp.protocol.SVMPProtocol.Authentication();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(result);
      }
      
      public org.mitre.svmp.protocol.SVMPProtocol.Authentication getDefaultInstanceForType() {
        return org.mitre.svmp.protocol.SVMPProtocol.Authentication.getDefaultInstance();
      }
      
      public boolean isInitialized() {
        return result.isInitialized();
      }
      public org.mitre.svmp.protocol.SVMPProtocol.Authentication build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
      
      private org.mitre.svmp.protocol.SVMPProtocol.Authentication buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public org.mitre.svmp.protocol.SVMPProtocol.Authentication buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        org.mitre.svmp.protocol.SVMPProtocol.Authentication returnMe = result;
        result = null;
        return returnMe;
      }
      
      public Builder mergeFrom(org.mitre.svmp.protocol.SVMPProtocol.Authentication other) {
        if (other == org.mitre.svmp.protocol.SVMPProtocol.Authentication.getDefaultInstance()) return this;
        if (other.hasUn()) {
          setUn(other.getUn());
        }
        if (other.hasPw()) {
          setPw(other.getPw());
        }
        return this;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              return this;
            default: {
              if (!parseUnknownField(input, extensionRegistry, tag)) {
                return this;
              }
              break;
            }
            case 10: {
              setUn(input.readString());
              break;
            }
            case 18: {
              setPw(input.readString());
              break;
            }
          }
        }
      }
      
      
      // required string un = 1;
      public boolean hasUn() {
        return result.hasUn();
      }
      public java.lang.String getUn() {
        return result.getUn();
      }
      public Builder setUn(java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  result.hasUn = true;
        result.un_ = value;
        return this;
      }
      public Builder clearUn() {
        result.hasUn = false;
        result.un_ = getDefaultInstance().getUn();
        return this;
      }
      
      // required string pw = 2;
      public boolean hasPw() {
        return result.hasPw();
      }
      public java.lang.String getPw() {
        return result.getPw();
      }
      public Builder setPw(java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  result.hasPw = true;
        result.pw_ = value;
        return this;
      }
      public Builder clearPw() {
        result.hasPw = false;
        result.pw_ = getDefaultInstance().getPw();
        return this;
      }
    }
    
    static {
      org.mitre.svmp.protocol.SVMPProtocol.internalForceInit();
    }
  }
  
  public static final class VideoRequest extends
      com.google.protobuf.GeneratedMessageLite {
    // Use VideoRequest.newBuilder() to construct.
    private VideoRequest() {}
    
    private static final VideoRequest defaultInstance = new VideoRequest();
    public static VideoRequest getDefaultInstance() {
      return defaultInstance;
    }
    
    public VideoRequest getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public final boolean isInitialized() {
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      memoizedSerializedSize = size;
      return size;
    }
    
    public static org.mitre.svmp.protocol.SVMPProtocol.VideoRequest parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.VideoRequest parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.VideoRequest parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.VideoRequest parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.VideoRequest parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.VideoRequest parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.VideoRequest parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeDelimitedFrom(input).buildParsed();
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.VideoRequest parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeDelimitedFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.VideoRequest parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.VideoRequest parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.mitre.svmp.protocol.SVMPProtocol.VideoRequest prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          org.mitre.svmp.protocol.SVMPProtocol.VideoRequest, Builder> {
      private org.mitre.svmp.protocol.SVMPProtocol.VideoRequest result;
      
      // Construct using org.mitre.svmp.protocol.SVMPProtocol.VideoRequest.newBuilder()
      private Builder() {}
      
      private static Builder create() {
        Builder builder = new Builder();
        builder.result = new org.mitre.svmp.protocol.SVMPProtocol.VideoRequest();
        return builder;
      }
      
      protected org.mitre.svmp.protocol.SVMPProtocol.VideoRequest internalGetResult() {
        return result;
      }
      
      public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new org.mitre.svmp.protocol.SVMPProtocol.VideoRequest();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(result);
      }
      
      public org.mitre.svmp.protocol.SVMPProtocol.VideoRequest getDefaultInstanceForType() {
        return org.mitre.svmp.protocol.SVMPProtocol.VideoRequest.getDefaultInstance();
      }
      
      public boolean isInitialized() {
        return result.isInitialized();
      }
      public org.mitre.svmp.protocol.SVMPProtocol.VideoRequest build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
      
      private org.mitre.svmp.protocol.SVMPProtocol.VideoRequest buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public org.mitre.svmp.protocol.SVMPProtocol.VideoRequest buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        org.mitre.svmp.protocol.SVMPProtocol.VideoRequest returnMe = result;
        result = null;
        return returnMe;
      }
      
      public Builder mergeFrom(org.mitre.svmp.protocol.SVMPProtocol.VideoRequest other) {
        if (other == org.mitre.svmp.protocol.SVMPProtocol.VideoRequest.getDefaultInstance()) return this;
        return this;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              return this;
            default: {
              if (!parseUnknownField(input, extensionRegistry, tag)) {
                return this;
              }
              break;
            }
          }
        }
      }
      
    }
    
    static {
      org.mitre.svmp.protocol.SVMPProtocol.internalForceInit();
    }
  }
  
  public static final class VideoStreamInfo extends
      com.google.protobuf.GeneratedMessageLite {
    // Use VideoStreamInfo.newBuilder() to construct.
    private VideoStreamInfo() {}
    
    private static final VideoStreamInfo defaultInstance = new VideoStreamInfo();
    public static VideoStreamInfo getDefaultInstance() {
      return defaultInstance;
    }
    
    public VideoStreamInfo getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public final boolean isInitialized() {
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      memoizedSerializedSize = size;
      return size;
    }
    
    public static org.mitre.svmp.protocol.SVMPProtocol.VideoStreamInfo parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.VideoStreamInfo parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.VideoStreamInfo parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.VideoStreamInfo parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.VideoStreamInfo parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.VideoStreamInfo parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.VideoStreamInfo parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeDelimitedFrom(input).buildParsed();
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.VideoStreamInfo parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeDelimitedFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.VideoStreamInfo parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static org.mitre.svmp.protocol.SVMPProtocol.VideoStreamInfo parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.mitre.svmp.protocol.SVMPProtocol.VideoStreamInfo prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          org.mitre.svmp.protocol.SVMPProtocol.VideoStreamInfo, Builder> {
      private org.mitre.svmp.protocol.SVMPProtocol.VideoStreamInfo result;
      
      // Construct using org.mitre.svmp.protocol.SVMPProtocol.VideoStreamInfo.newBuilder()
      private Builder() {}
      
      private static Builder create() {
        Builder builder = new Builder();
        builder.result = new org.mitre.svmp.protocol.SVMPProtocol.VideoStreamInfo();
        return builder;
      }
      
      protected org.mitre.svmp.protocol.SVMPProtocol.VideoStreamInfo internalGetResult() {
        return result;
      }
      
      public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new org.mitre.svmp.protocol.SVMPProtocol.VideoStreamInfo();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(result);
      }
      
      public org.mitre.svmp.protocol.SVMPProtocol.VideoStreamInfo getDefaultInstanceForType() {
        return org.mitre.svmp.protocol.SVMPProtocol.VideoStreamInfo.getDefaultInstance();
      }
      
      public boolean isInitialized() {
        return result.isInitialized();
      }
      public org.mitre.svmp.protocol.SVMPProtocol.VideoStreamInfo build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
      
      private org.mitre.svmp.protocol.SVMPProtocol.VideoStreamInfo buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public org.mitre.svmp.protocol.SVMPProtocol.VideoStreamInfo buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        org.mitre.svmp.protocol.SVMPProtocol.VideoStreamInfo returnMe = result;
        result = null;
        return returnMe;
      }
      
      public Builder mergeFrom(org.mitre.svmp.protocol.SVMPProtocol.VideoStreamInfo other) {
        if (other == org.mitre.svmp.protocol.SVMPProtocol.VideoStreamInfo.getDefaultInstance()) return this;
        return this;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              return this;
            default: {
              if (!parseUnknownField(input, extensionRegistry, tag)) {
                return this;
              }
              break;
            }
          }
        }
      }
      
    }
    
    static {
      org.mitre.svmp.protocol.SVMPProtocol.internalForceInit();
    }
  }
  
  
  static {
  }
  
  public static void internalForceInit() {}
}
